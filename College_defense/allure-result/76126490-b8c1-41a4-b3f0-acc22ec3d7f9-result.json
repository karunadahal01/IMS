{"name": "test_product", "status": "broken", "statusDetails": {"message": "test_flow.PopupHandlingError: Failed to handle 'Add Another Product' alert: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=138.0.7204.169); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7ca7fe935+77845]\n\tGetHandleVerifier [0x0x7ff7ca7fe990+77936]\n\t(No symbol) [0x0x7ff7ca5b9cda]\n\t(No symbol) [0x0x7ff7ca5c1679]\n\t(No symbol) [0x0x7ff7ca5c471c]\n\t(No symbol) [0x0x7ff7ca5c47ef]\n\t(No symbol) [0x0x7ff7ca6115ca]\n\t(No symbol) [0x0x7ff7ca611697]\n\t(No symbol) [0x0x7ff7ca606e1c]\n\t(No symbol) [0x0x7ff7ca6388ca]\n\t(No symbol) [0x0x7ff7ca602f76]\n\t(No symbol) [0x0x7ff7ca638ae0]\n\t(No symbol) [0x0x7ff7ca660b07]\n\t(No symbol) [0x0x7ff7ca6386a3]\n\t(No symbol) [0x0x7ff7ca601791]\n\t(No symbol) [0x0x7ff7ca602523]\n\tGetHandleVerifier [0x0x7ff7caad684d+3059501]\n\tGetHandleVerifier [0x0x7ff7caad0c0d+3035885]\n\tGetHandleVerifier [0x0x7ff7caaf0400+3164896]\n\tGetHandleVerifier [0x0x7ff7ca818c3e+185118]\n\tGetHandleVerifier [0x0x7ff7ca82054f+216111]\n\tGetHandleVerifier [0x0x7ff7ca8072e4+113092]\n\tGetHandleVerifier [0x0x7ff7ca807499+113529]\n\tGetHandleVerifier [0x0x7ff7ca7ee298+10616]\n\tBaseThreadInitThunk [0x0x7ffe85327374+20]\n\tRtlUserThreadStart [0x0x7ffe8617cc91+33]", "trace": "self = <test_flow.TestERPFlowCreation object at 0x000001F1E8CB9310>, product_item = 'citizen1', HS_code = '123'\nunit = 'kg.', item_type = 'Servie Item', description = 'This is description', category = 'N/A', short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'Each', conversion_factor = '1000', barcode_map = '578356'\nbarcode_unit = 'kg.'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def product_master(self, product_item, HS_code, unit, item_type,\n                       description, category, short_name, purchase_price, sales_price,\n                       alt_unit, conversion_factor,\n                       barcode_map, barcode_unit):\n        # Wait until the menu is loaded\n        wait = WebDriverWait(self.driver, 10)\n        # Click on \"Masters\"\n        try:\n           with allure.step(\"Clicking on 'Masters' menu\"):\n            Master_menu = self.driver.find_element(By.LINK_TEXT, \"Masters\")\n            Master_menu.click()\n            print(\"Clicked on 'Masters'\")\n        except Exception as e:\n            logger.error(f\"Error clicking 'Masters': {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Masters Menu Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Masters': {e}\")\n        time.sleep(5)\n        # Hover over \"inventory_info\"\n        try:\n            inventory_info = wait.until(ec.presence_of_element_located((By.LINK_TEXT, \"Inventory Info\")))\n            ActionChains(self.driver).move_to_element(inventory_info).perform()\n            time.sleep(5)\n        except Exception as e:\n    \n            logger.error(f\"Error hovering over 'Inventory Info': {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Inventory Info Hover Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to hover over 'Inventory Info': {e}\")\n    \n        # Wait for \"Product Master\" to be visible and click it\n        try:\n            with allure.step(\"Waiting for 'Product Master' to be visible and clicking it\"):\n               product_master = wait.until(ec.visibility_of_element_located((By.LINK_TEXT, \"Product Master\")))\n               product_master.click()\n               print(\"Clicked 'Product Master'\")\n               time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Product Master': {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Product Master Click Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Product Master': {e}\")\n        # Click on \"Add Product\" button\n        try:\n            with allure.step(\"Clicking on 'Add Product' button\"):\n                add_product_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Add Product')]\")))\n                self.safe_click(add_product_btn, \"Add Product button\")\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Product' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Product Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product': {e}\")\n    \n    \n        # Click the \"Add Product\" label\n    \n        try:\n            with allure.step(\"Clicking 'Add Product' label\"):\n                wait = WebDriverWait(self.driver, 10)\n                add_product = wait.until(ec.element_to_be_clickable((By.XPATH, \"//label[contains(text(), 'Add Product')]\")))\n                # Click the \"Add Product\" label\n                add_product.click()\n                time.sleep(8)\n    \n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Product' label: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Product Label Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product' label: {e}\")\n        # Zoom out screen\n        self.driver.execute_script(\"document.body.style.zoom='80%'\")\n        time.sleep(3)\n    \n        # Click on the Item Group input field\n        try:\n            with allure.step(\"Clicking on Item Group input field\"):\n                item_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='-- Press Enter For Item Group --']\")))\n                item_group_input.click()\n                time.sleep(5)\n                # Press Enter on the Item Group field\n                item_group_input.send_keys(Keys.ENTER)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking Item Group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click Item Group input field: {e}\")\n        wait = WebDriverWait(self.driver, 5)\n    \n        # Find and click the main group input field\n        try:\n            with allure.step(\"Clicking on main group input field\"):\n                main_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//ng-select//input[@type='text']\")))\n                main_group_input.click()\n                # Send Enter key to trigger dropdown\n                main_group_input.send_keys(Keys.ENTER)\n                # Send Enter again to select the first dropdown option\n                main_group_input.send_keys(Keys.ENTER)\n                main_group_input.send_keys(Keys.ENTER)\n    \n                time.sleep(8)\n    \n                ok_button = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//button[.//span[normalize-space()='Ok']]\")))\n                ok_button.click()\n        except Exception as e:\n            logger.error(f\"Error clicking main group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Main Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click main group input field: {e}\")\n    \n        # Find the input by placeholder and enter item name\n    \n        try:\n            with allure.step(\"Entering product item name\"):\n                # Find the input by placeholder and enter item name\n                item_name_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Enter Item Name']\")))\n                item_name_input.clear()\n                item_name_input.send_keys(product_item)\n                item_name_input.send_keys(Keys.ENTER)\n        except Exception as e:\n            logger.error(f\"Error entering product item name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter product item name: {e}\")\n    \n        # Press Tab from keyboard\n        self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        time.sleep(5)\n    \n        # Enter HSC code\n        try:\n            with allure.step(\"Entering HSC code\"):\n                self.driver.switch_to.active_element.send_keys(HS_code , Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error entering HSC code: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"HSC Code Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter HSC code: {e}\")\n    \n        # Click on vatable check box\n        try:\n            with allure.step(\"Clicking on vatable checkbox\"):\n                wait = WebDriverWait(self.driver, 10)\n                checkbox = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='checkbox' and contains(@class, 'ng-pristine')]\")))\n                checkbox.click()\n                time.sleep(5)\n    \n                # press TAB\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error clicking vatable checkbox: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Vatable Checkbox Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click vatable checkbox: {e}\")\n    \n        # To select Unit\n        try:\n            with allure.step(\"Selecting unit\"):\n                self.driver.switch_to.active_element.send_keys(unit, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting unit: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Unit Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select unit: {e}\")\n    \n        # To select item type\n        try:\n            with allure.step(\"Selecting item type\"):\n                self.driver.switch_to.active_element.send_keys(item_type, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting item type: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Type Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select item type: {e}\")\n    \n        # Description\n        try:\n            with allure.step(\"Entering description\"):\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                self.driver.switch_to.active_element.send_keys(description, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering description: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Description Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter description: {e}\")\n    \n        # Category\n        try:\n            with allure.step(\"Entering category\"):\n                self.driver.switch_to.active_element.send_keys(category, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering category: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Category Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter category: {e}\")\n    \n        # Short name\n        try:\n            with allure.step(\"Entering short name\"):\n                self.driver.switch_to.active_element.send_keys(short_name, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering short name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Short Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter short name: {e}\")\n    \n        # Purchase price\n        try:\n            with allure.step(\"Entering purchase price\"):\n                price_input = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='number' and @placeholder='Enter Purchase Price']\")))\n                price_input.clear()\n                price_input.send_keys(purchase_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering purchase price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Purchase Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter purchase price: {e}\")\n    \n        # Sales price\n        try:\n            with allure.step(\"Entering sales price\"):\n                number_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and @placeholder='0']\")))\n                number_input.clear()\n                number_input.send_keys(sales_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering sales price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Sales Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter sales price: {e}\")\n    \n        #Alternate Unit\n        try:\n           with allure.step(\"Navigating to Alternate Unit tab\"):\n            alternate_unit_tab = wait.until(ec.element_to_be_clickable(\n                (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Alternate Unit']\")))\n            alternate_unit_tab.click()\n            time.sleep(8)\n    \n        except Exception as e:\n            logger.error(f\"Error clicking Alternate Unit tab: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Alternate Unit Tab Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click Alternate Unit tab: {e}\")\n    \n        # Click on \"Add Alternate Unit\" button\n        try:\n            with allure.step(\"Clicking on 'Add Alternate Unit' button\"):\n              # Select unit: gm\n              select_element = wait.until(ec.element_to_be_clickable((By.XPATH, \"//select[contains(@class, 'ng-pristine')]\")))\n              select_element.click()\n              self.driver.switch_to.active_element.send_keys(alt_unit, Keys.TAB)\n              print(\"Unit selected.\")\n    \n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Alternate Unit' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Alternate Unit Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Alternate Unit': {e}\")\n    \n        # Enter conversion factor\n        try:\n            with allure.step(\"Entering conversion factor\"):\n                input_field = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and contains(@class, 'ng-valid')]\")))\n                input_field.clear()\n                input_field.send_keys(conversion_factor)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering conversion factor: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Conversion Factor Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter conversion factor: {e}\")\n    \n        # Click on \"Add Barcode\" mapping tab\n        try:\n            with allure.step(\"Clicking on 'Add Barcode' button\"):\n                # Barcode Mapping tab\n                barcode_mapping = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Barcode Mapping']\")))\n                barcode_mapping.click()\n                time.sleep(8)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Barcode' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Barcode Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Barcode': {e}\")\n    \n        # Enter barcode\n        try:\n            with allure.step(\"Entering barcode\"):\n                barcode_input = wait.until(\n                    ec.presence_of_element_located((By.XPATH, \"//input[@placeholder='Enter Bar Code']\")))\n                barcode_input.clear()\n                barcode_input.send_keys(barcode_map)\n                barcode_input.click()\n                time.sleep(5)\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                time.sleep(5)\n    \n                select_element = self.driver.find_element(By.CSS_SELECTOR, 'div.col-2.p-0 select')\n                select_element.click()\n                self.driver.switch_to.active_element.send_keys(barcode_unit, Keys.TAB)\n                time.sleep(5)\n    \n        except Exception as e:\n            logger.error(f\"Error entering barcode: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Barcode Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter barcode: {e}\")\n    \n        # Click on \"Map\" button\n        try:\n            with allure.step(\"Clicking on 'Map' button\"):\n                wait = WebDriverWait(self.driver, 10)\n                map_button = wait.until(ec.element_to_be_clickable((By.ID, \"map\")))\n                map_button.click()\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Map' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Map Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Map': {e}\")\n    \n        # Click on \"Save\" button\n        try:\n            with allure.step(\"Clicking on 'Save' button\"):\n                save_button = self.driver.find_element(By.XPATH, \"//button[contains(text(),'SAVE')]\")\n                save_button.click()\n                time.sleep(4)\n                # WebDriverWait(self.driver, 10).until(ec.alert_is_present())\n                # self.driver.switch_to.alert.dismiss()\n                # self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n                # time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Save' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Save Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Save': {e}\")\n        time.sleep(6)\n        # Press enter to handle alert of \"Do you want to add another product?\"\n        # try:\n        #    with allure.step(\"Handling 'Do you  add another product?' alert\"):\n        # WebDriverWait(self.driver, 10).until(ec.alert_is_present())\n        # self.driver.switch_to.alert.dismiss()\n        # self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n        # #pyautogui.press('esc')\n               # self.driver.switch_to.active_element.send_keys(Keys.ESCAPE)\n               # self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n    \n               # back_button = self.driver.find_element(By.XPATH, \"//button[contains(text(),'BACK')]\")\n               # back_button.click()\n               # time.sleep(20)\n    \n                # body = self.driver.find_element(By.TAG_NAME, \"body\")\n                # body.send_keys(Keys.ENTER)\n                # #time.sleep(5)\n                # body.send_keys(Keys.ENTER)\n                # body.send_keys(Keys.ENTER)\n    \n        # except Exception  as e:\n        #     logger.error(f\"Error handling 'Do you wanna add another product?' alert: {e}\")\n        #     allure.attach(self.driver.get_screenshot_as_png(),\n        #                   name=\"Add Another Product Alert Error\",\n        #                   attachment_type=allure.attachment_type.PNG)\n        #     raise PopupHandlingError(f\"Failed to handle 'Add Another Product' alert: {e}\")\n        #handle alert box for another product creation\n        try:\n          with allure.step(\"Handling 'Do you wanna add another product?' alert\"):\n               WebDriverWait(self.driver, 10).until(ec.alert_is_present())\n               self.driver.switch_to.alert.dismiss()\n>              self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n\ntest_flow.py:608: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:305: in send_keys\n    self._execute(\n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F1E8C5B230>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff7ca7ee298+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe85327374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe8617cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=138.0.7204.169); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7ca7fe935+77845]\nE       \tGetHandleVerifier [0x0x7ff7ca7fe990+77936]\nE       \t(No symbol) [0x0x7ff7ca5b9cda]\nE       \t(No symbol) [0x0x7ff7ca5c1679]\nE       \t(No symbol) [0x0x7ff7ca5c471c]\nE       \t(No symbol) [0x0x7ff7ca5c47ef]\nE       \t(No symbol) [0x0x7ff7ca6115ca]\nE       \t(No symbol) [0x0x7ff7ca611697]\nE       \t(No symbol) [0x0x7ff7ca606e1c]\nE       \t(No symbol) [0x0x7ff7ca6388ca]\nE       \t(No symbol) [0x0x7ff7ca602f76]\nE       \t(No symbol) [0x0x7ff7ca638ae0]\nE       \t(No symbol) [0x0x7ff7ca660b07]\nE       \t(No symbol) [0x0x7ff7ca6386a3]\nE       \t(No symbol) [0x0x7ff7ca601791]\nE       \t(No symbol) [0x0x7ff7ca602523]\nE       \tGetHandleVerifier [0x0x7ff7caad684d+3059501]\nE       \tGetHandleVerifier [0x0x7ff7caad0c0d+3035885]\nE       \tGetHandleVerifier [0x0x7ff7caaf0400+3164896]\nE       \tGetHandleVerifier [0x0x7ff7ca818c3e+185118]\nE       \tGetHandleVerifier [0x0x7ff7ca82054f+216111]\nE       \tGetHandleVerifier [0x0x7ff7ca8072e4+113092]\nE       \tGetHandleVerifier [0x0x7ff7ca807499+113529]\nE       \tGetHandleVerifier [0x0x7ff7ca7ee298+10616]\nE       \tBaseThreadInitThunk [0x0x7ffe85327374+20]\nE       \tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_flow.TestERPFlowCreation object at 0x000001F1E8CB9310>\n\n    def test_product(self):\n        allure.step(\"Testing overall flow of the application\")\n        self.login(\"gedehim917@decodewp.com\",\n                   \"Tebahal1!\",\n                   \"https://velvet.webredirect.himshang.com.np/#/pages/dashboard\")\n>       self.product_master(\n            product_item=\"citizen1\",\n    \n            HS_code=\"123\",\n            unit=\"kg.\",\n            item_type=\"Servie Item\",\n            description=\"This is description\",\n            category=\"N/A\",\n            short_name=\"XYZ\",\n            purchase_price=\"120\",\n            sales_price=\"140\",\n            alt_unit=\"Each\",\n            conversion_factor=\"1000\",\n            barcode_map=\"578356\",\n            barcode_unit=\"kg.\")\n\ntest_flow.py:2216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_flow.TestERPFlowCreation object at 0x000001F1E8CB9310>, product_item = 'citizen1', HS_code = '123'\nunit = 'kg.', item_type = 'Servie Item', description = 'This is description', category = 'N/A', short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'Each', conversion_factor = '1000', barcode_map = '578356'\nbarcode_unit = 'kg.'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def product_master(self, product_item, HS_code, unit, item_type,\n                       description, category, short_name, purchase_price, sales_price,\n                       alt_unit, conversion_factor,\n                       barcode_map, barcode_unit):\n        # Wait until the menu is loaded\n        wait = WebDriverWait(self.driver, 10)\n        # Click on \"Masters\"\n        try:\n           with allure.step(\"Clicking on 'Masters' menu\"):\n            Master_menu = self.driver.find_element(By.LINK_TEXT, \"Masters\")\n            Master_menu.click()\n            print(\"Clicked on 'Masters'\")\n        except Exception as e:\n            logger.error(f\"Error clicking 'Masters': {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Masters Menu Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Masters': {e}\")\n        time.sleep(5)\n        # Hover over \"inventory_info\"\n        try:\n            inventory_info = wait.until(ec.presence_of_element_located((By.LINK_TEXT, \"Inventory Info\")))\n            ActionChains(self.driver).move_to_element(inventory_info).perform()\n            time.sleep(5)\n        except Exception as e:\n    \n            logger.error(f\"Error hovering over 'Inventory Info': {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Inventory Info Hover Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to hover over 'Inventory Info': {e}\")\n    \n        # Wait for \"Product Master\" to be visible and click it\n        try:\n            with allure.step(\"Waiting for 'Product Master' to be visible and clicking it\"):\n               product_master = wait.until(ec.visibility_of_element_located((By.LINK_TEXT, \"Product Master\")))\n               product_master.click()\n               print(\"Clicked 'Product Master'\")\n               time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Product Master': {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Product Master Click Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Product Master': {e}\")\n        # Click on \"Add Product\" button\n        try:\n            with allure.step(\"Clicking on 'Add Product' button\"):\n                add_product_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Add Product')]\")))\n                self.safe_click(add_product_btn, \"Add Product button\")\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Product' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Product Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product': {e}\")\n    \n    \n        # Click the \"Add Product\" label\n    \n        try:\n            with allure.step(\"Clicking 'Add Product' label\"):\n                wait = WebDriverWait(self.driver, 10)\n                add_product = wait.until(ec.element_to_be_clickable((By.XPATH, \"//label[contains(text(), 'Add Product')]\")))\n                # Click the \"Add Product\" label\n                add_product.click()\n                time.sleep(8)\n    \n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Product' label: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Product Label Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product' label: {e}\")\n        # Zoom out screen\n        self.driver.execute_script(\"document.body.style.zoom='80%'\")\n        time.sleep(3)\n    \n        # Click on the Item Group input field\n        try:\n            with allure.step(\"Clicking on Item Group input field\"):\n                item_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='-- Press Enter For Item Group --']\")))\n                item_group_input.click()\n                time.sleep(5)\n                # Press Enter on the Item Group field\n                item_group_input.send_keys(Keys.ENTER)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking Item Group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click Item Group input field: {e}\")\n        wait = WebDriverWait(self.driver, 5)\n    \n        # Find and click the main group input field\n        try:\n            with allure.step(\"Clicking on main group input field\"):\n                main_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//ng-select//input[@type='text']\")))\n                main_group_input.click()\n                # Send Enter key to trigger dropdown\n                main_group_input.send_keys(Keys.ENTER)\n                # Send Enter again to select the first dropdown option\n                main_group_input.send_keys(Keys.ENTER)\n                main_group_input.send_keys(Keys.ENTER)\n    \n                time.sleep(8)\n    \n                ok_button = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//button[.//span[normalize-space()='Ok']]\")))\n                ok_button.click()\n        except Exception as e:\n            logger.error(f\"Error clicking main group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Main Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click main group input field: {e}\")\n    \n        # Find the input by placeholder and enter item name\n    \n        try:\n            with allure.step(\"Entering product item name\"):\n                # Find the input by placeholder and enter item name\n                item_name_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Enter Item Name']\")))\n                item_name_input.clear()\n                item_name_input.send_keys(product_item)\n                item_name_input.send_keys(Keys.ENTER)\n        except Exception as e:\n            logger.error(f\"Error entering product item name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter product item name: {e}\")\n    \n        # Press Tab from keyboard\n        self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        time.sleep(5)\n    \n        # Enter HSC code\n        try:\n            with allure.step(\"Entering HSC code\"):\n                self.driver.switch_to.active_element.send_keys(HS_code , Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error entering HSC code: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"HSC Code Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter HSC code: {e}\")\n    \n        # Click on vatable check box\n        try:\n            with allure.step(\"Clicking on vatable checkbox\"):\n                wait = WebDriverWait(self.driver, 10)\n                checkbox = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='checkbox' and contains(@class, 'ng-pristine')]\")))\n                checkbox.click()\n                time.sleep(5)\n    \n                # press TAB\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error clicking vatable checkbox: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Vatable Checkbox Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click vatable checkbox: {e}\")\n    \n        # To select Unit\n        try:\n            with allure.step(\"Selecting unit\"):\n                self.driver.switch_to.active_element.send_keys(unit, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting unit: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Unit Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select unit: {e}\")\n    \n        # To select item type\n        try:\n            with allure.step(\"Selecting item type\"):\n                self.driver.switch_to.active_element.send_keys(item_type, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting item type: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Type Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select item type: {e}\")\n    \n        # Description\n        try:\n            with allure.step(\"Entering description\"):\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                self.driver.switch_to.active_element.send_keys(description, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering description: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Description Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter description: {e}\")\n    \n        # Category\n        try:\n            with allure.step(\"Entering category\"):\n                self.driver.switch_to.active_element.send_keys(category, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering category: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Category Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter category: {e}\")\n    \n        # Short name\n        try:\n            with allure.step(\"Entering short name\"):\n                self.driver.switch_to.active_element.send_keys(short_name, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering short name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Short Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter short name: {e}\")\n    \n        # Purchase price\n        try:\n            with allure.step(\"Entering purchase price\"):\n                price_input = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='number' and @placeholder='Enter Purchase Price']\")))\n                price_input.clear()\n                price_input.send_keys(purchase_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering purchase price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Purchase Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter purchase price: {e}\")\n    \n        # Sales price\n        try:\n            with allure.step(\"Entering sales price\"):\n                number_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and @placeholder='0']\")))\n                number_input.clear()\n                number_input.send_keys(sales_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering sales price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Sales Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter sales price: {e}\")\n    \n        #Alternate Unit\n        try:\n           with allure.step(\"Navigating to Alternate Unit tab\"):\n            alternate_unit_tab = wait.until(ec.element_to_be_clickable(\n                (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Alternate Unit']\")))\n            alternate_unit_tab.click()\n            time.sleep(8)\n    \n        except Exception as e:\n            logger.error(f\"Error clicking Alternate Unit tab: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Alternate Unit Tab Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click Alternate Unit tab: {e}\")\n    \n        # Click on \"Add Alternate Unit\" button\n        try:\n            with allure.step(\"Clicking on 'Add Alternate Unit' button\"):\n              # Select unit: gm\n              select_element = wait.until(ec.element_to_be_clickable((By.XPATH, \"//select[contains(@class, 'ng-pristine')]\")))\n              select_element.click()\n              self.driver.switch_to.active_element.send_keys(alt_unit, Keys.TAB)\n              print(\"Unit selected.\")\n    \n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Alternate Unit' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Alternate Unit Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Alternate Unit': {e}\")\n    \n        # Enter conversion factor\n        try:\n            with allure.step(\"Entering conversion factor\"):\n                input_field = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and contains(@class, 'ng-valid')]\")))\n                input_field.clear()\n                input_field.send_keys(conversion_factor)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering conversion factor: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Conversion Factor Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter conversion factor: {e}\")\n    \n        # Click on \"Add Barcode\" mapping tab\n        try:\n            with allure.step(\"Clicking on 'Add Barcode' button\"):\n                # Barcode Mapping tab\n                barcode_mapping = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Barcode Mapping']\")))\n                barcode_mapping.click()\n                time.sleep(8)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Barcode' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Barcode Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Barcode': {e}\")\n    \n        # Enter barcode\n        try:\n            with allure.step(\"Entering barcode\"):\n                barcode_input = wait.until(\n                    ec.presence_of_element_located((By.XPATH, \"//input[@placeholder='Enter Bar Code']\")))\n                barcode_input.clear()\n                barcode_input.send_keys(barcode_map)\n                barcode_input.click()\n                time.sleep(5)\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                time.sleep(5)\n    \n                select_element = self.driver.find_element(By.CSS_SELECTOR, 'div.col-2.p-0 select')\n                select_element.click()\n                self.driver.switch_to.active_element.send_keys(barcode_unit, Keys.TAB)\n                time.sleep(5)\n    \n        except Exception as e:\n            logger.error(f\"Error entering barcode: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Barcode Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter barcode: {e}\")\n    \n        # Click on \"Map\" button\n        try:\n            with allure.step(\"Clicking on 'Map' button\"):\n                wait = WebDriverWait(self.driver, 10)\n                map_button = wait.until(ec.element_to_be_clickable((By.ID, \"map\")))\n                map_button.click()\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Map' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Map Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Map': {e}\")\n    \n        # Click on \"Save\" button\n        try:\n            with allure.step(\"Clicking on 'Save' button\"):\n                save_button = self.driver.find_element(By.XPATH, \"//button[contains(text(),'SAVE')]\")\n                save_button.click()\n                time.sleep(4)\n                # WebDriverWait(self.driver, 10).until(ec.alert_is_present())\n                # self.driver.switch_to.alert.dismiss()\n                # self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n                # time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Save' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Save Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Save': {e}\")\n        time.sleep(6)\n        # Press enter to handle alert of \"Do you want to add another product?\"\n        # try:\n        #    with allure.step(\"Handling 'Do you  add another product?' alert\"):\n        # WebDriverWait(self.driver, 10).until(ec.alert_is_present())\n        # self.driver.switch_to.alert.dismiss()\n        # self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n        # #pyautogui.press('esc')\n               # self.driver.switch_to.active_element.send_keys(Keys.ESCAPE)\n               # self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n    \n               # back_button = self.driver.find_element(By.XPATH, \"//button[contains(text(),'BACK')]\")\n               # back_button.click()\n               # time.sleep(20)\n    \n                # body = self.driver.find_element(By.TAG_NAME, \"body\")\n                # body.send_keys(Keys.ENTER)\n                # #time.sleep(5)\n                # body.send_keys(Keys.ENTER)\n                # body.send_keys(Keys.ENTER)\n    \n        # except Exception  as e:\n        #     logger.error(f\"Error handling 'Do you wanna add another product?' alert: {e}\")\n        #     allure.attach(self.driver.get_screenshot_as_png(),\n        #                   name=\"Add Another Product Alert Error\",\n        #                   attachment_type=allure.attachment_type.PNG)\n        #     raise PopupHandlingError(f\"Failed to handle 'Add Another Product' alert: {e}\")\n        #handle alert box for another product creation\n        try:\n          with allure.step(\"Handling 'Do you wanna add another product?' alert\"):\n               WebDriverWait(self.driver, 10).until(ec.alert_is_present())\n               self.driver.switch_to.alert.dismiss()\n               self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n               time.sleep(8)\n               # back_button = WebDriverWait(self.driver, 10).until(\n               #     ec.element_to_be_clickable((By.ID, \"back\"))\n               # )\n               # back_button.click()\n               # Wait until the image is present, then click it\n               wait = WebDriverWait(self.driver, 10)\n    \n               # Using `src` or `routerlink` or partial style\n               image_element = wait.until(ec.element_to_be_clickable(\n                   (By.XPATH, \"//img[contains(@src, 'dashboard_logo_small.png')]\")\n               ))\n    \n               # Click the image\n               image_element.click()\n    \n               # back_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'BACK')]\")))\n               # back_btn.click()\n               time.sleep(5)\n    \n        except Exception  as e:\n            logger.error(f\"Error handling 'Do you wanna add another product?' alert: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Another Product Alert Error\",\n                          attachment_type=allure.attachment_type.PNG)\n>           raise PopupHandlingError(f\"Failed to handle 'Add Another Product' alert: {e}\")\nE           test_flow.PopupHandlingError: Failed to handle 'Add Another Product' alert: Message: stale element reference: stale element not found in the current frame\nE             (Session info: chrome=138.0.7204.169); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff7ca7fe935+77845]\nE           \tGetHandleVerifier [0x0x7ff7ca7fe990+77936]\nE           \t(No symbol) [0x0x7ff7ca5b9cda]\nE           \t(No symbol) [0x0x7ff7ca5c1679]\nE           \t(No symbol) [0x0x7ff7ca5c471c]\nE           \t(No symbol) [0x0x7ff7ca5c47ef]\nE           \t(No symbol) [0x0x7ff7ca6115ca]\nE           \t(No symbol) [0x0x7ff7ca611697]\nE           \t(No symbol) [0x0x7ff7ca606e1c]\nE           \t(No symbol) [0x0x7ff7ca6388ca]\nE           \t(No symbol) [0x0x7ff7ca602f76]\nE           \t(No symbol) [0x0x7ff7ca638ae0]\nE           \t(No symbol) [0x0x7ff7ca660b07]\nE           \t(No symbol) [0x0x7ff7ca6386a3]\nE           \t(No symbol) [0x0x7ff7ca601791]\nE           \t(No symbol) [0x0x7ff7ca602523]\nE           \tGetHandleVerifier [0x0x7ff7caad684d+3059501]\nE           \tGetHandleVerifier [0x0x7ff7caad0c0d+3035885]\nE           \tGetHandleVerifier [0x0x7ff7caaf0400+3164896]\nE           \tGetHandleVerifier [0x0x7ff7ca818c3e+185118]\nE           \tGetHandleVerifier [0x0x7ff7ca82054f+216111]\nE           \tGetHandleVerifier [0x0x7ff7ca8072e4+113092]\nE           \tGetHandleVerifier [0x0x7ff7ca807499+113529]\nE           \tGetHandleVerifier [0x0x7ff7ca7ee298+10616]\nE           \tBaseThreadInitThunk [0x0x7ffe85327374+20]\nE           \tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\ntest_flow.py:634: PopupHandlingError"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "steps": [{"name": "Detected 'Already Logged In' popup — logging out first", "status": "passed", "start": 1753783259715, "stop": 1753783260132}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1753783241390, "stop": 1753783278219}, {"name": "Creating product master for item: 'citizen1'", "status": "broken", "statusDetails": {"message": "test_flow.PopupHandlingError: Failed to handle 'Add Another Product' alert: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=138.0.7204.169); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7ca7fe935+77845]\n\tGetHandleVerifier [0x0x7ff7ca7fe990+77936]\n\t(No symbol) [0x0x7ff7ca5b9cda]\n\t(No symbol) [0x0x7ff7ca5c1679]\n\t(No symbol) [0x0x7ff7ca5c471c]\n\t(No symbol) [0x0x7ff7ca5c47ef]\n\t(No symbol) [0x0x7ff7ca6115ca]\n\t(No symbol) [0x0x7ff7ca611697]\n\t(No symbol) [0x0x7ff7ca606e1c]\n\t(No symbol) [0x0x7ff7ca6388ca]\n\t(No symbol) [0x0x7ff7ca602f76]\n\t(No symbol) [0x0x7ff7ca638ae0]\n\t(No symbol) [0x0x7ff7ca660b07]\n\t(No symbol) [0x0x7ff7ca6386a3]\n\t(No symbol) [0x0x7ff7ca601791]\n\t(No symbol) [0x0x7ff7ca602523]\n\tGetHandleVerifier [0x0x7ff7caad684d+3059501]\n\tGetHandleVerifier [0x0x7ff7caad0c0d+3035885]\n\tGetHandleVerifier [0x0x7ff7caaf0400+3164896]\n\tGetHandleVerifier [0x0x7ff7ca818c3e+185118]\n\tGetHandleVerifier [0x0x7ff7ca82054f+216111]\n\tGetHandleVerifier [0x0x7ff7ca8072e4+113092]\n\tGetHandleVerifier [0x0x7ff7ca807499+113529]\n\tGetHandleVerifier [0x0x7ff7ca7ee298+10616]\n\tBaseThreadInitThunk [0x0x7ffe85327374+20]\n\tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\College_defense\\test_flow.py\", line 634, in product_master\n    raise PopupHandlingError(f\"Failed to handle 'Add Another Product' alert: {e}\")\n"}, "steps": [{"name": "Clicking on 'Masters' menu", "status": "passed", "start": 1753783278220, "stop": 1753783278323}, {"name": "Waiting for 'Product Master' to be visible and clicking it", "status": "passed", "start": 1753783288676, "stop": 1753783294031}, {"name": "Clicking on 'Add Product' button", "status": "passed", "start": 1753783294031, "stop": 1753783304179}, {"name": "Clicking 'Add Product' label", "status": "passed", "start": 1753783304179, "stop": 1753783312443}, {"name": "Clicking on Item Group input field", "status": "passed", "start": 1753783315526, "stop": 1753783325716}, {"name": "Clicking on main group input field", "status": "passed", "start": 1753783325717, "stop": 1753783334131}, {"name": "Entering product item name", "status": "passed", "start": 1753783334131, "stop": 1753783334333}, {"name": "Entering HSC code", "status": "passed", "start": 1753783339373, "stop": 1753783339436}, {"name": "Clicking on vatable checkbox", "status": "passed", "start": 1753783339436, "stop": 1753783344668}, {"name": "Selecting unit", "status": "passed", "start": 1753783344668, "stop": 1753783349761}, {"name": "Selecting item type", "status": "passed", "start": 1753783349761, "stop": 1753783354854}, {"name": "Entering description", "status": "passed", "start": 1753783354854, "stop": 1753783360055}, {"name": "Entering category", "status": "passed", "start": 1753783360055, "stop": 1753783365134}, {"name": "Entering short name", "status": "passed", "start": 1753783365134, "stop": 1753783370213}, {"name": "Entering purchase price", "status": "passed", "start": 1753783370214, "stop": 1753783380387}, {"name": "Entering sales price", "status": "passed", "start": 1753783380387, "stop": 1753783390617}, {"name": "Navigating to Alternate Unit tab", "status": "passed", "start": 1753783390618, "stop": 1753783398757}, {"name": "Clicking on 'Add Alternate Unit' button", "status": "passed", "start": 1753783398757, "stop": 1753783398990}, {"name": "Entering conversion factor", "status": "passed", "start": 1753783398990, "stop": 1753783404140}, {"name": "Clicking on 'Add Barcode' button", "status": "passed", "start": 1753783404140, "stop": 1753783412272}, {"name": "Entering barcode", "status": "passed", "start": 1753783412272, "stop": 1753783427811}, {"name": "Clicking on 'Map' button", "status": "passed", "start": 1753783427812, "stop": 1753783437933}, {"name": "Clicking on 'Save' button", "status": "passed", "start": 1753783437933, "stop": 1753783442037}, {"name": "Handling 'Do you wanna add another product?' alert", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=138.0.7204.169); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7ca7fe935+77845]\n\tGetHandleVerifier [0x0x7ff7ca7fe990+77936]\n\t(No symbol) [0x0x7ff7ca5b9cda]\n\t(No symbol) [0x0x7ff7ca5c1679]\n\t(No symbol) [0x0x7ff7ca5c471c]\n\t(No symbol) [0x0x7ff7ca5c47ef]\n\t(No symbol) [0x0x7ff7ca6115ca]\n\t(No symbol) [0x0x7ff7ca611697]\n\t(No symbol) [0x0x7ff7ca606e1c]\n\t(No symbol) [0x0x7ff7ca6388ca]\n\t(No symbol) [0x0x7ff7ca602f76]\n\t(No symbol) [0x0x7ff7ca638ae0]\n\t(No symbol) [0x0x7ff7ca660b07]\n\t(No symbol) [0x0x7ff7ca6386a3]\n\t(No symbol) [0x0x7ff7ca601791]\n\t(No symbol) [0x0x7ff7ca602523]\n\tGetHandleVerifier [0x0x7ff7caad684d+3059501]\n\tGetHandleVerifier [0x0x7ff7caad0c0d+3035885]\n\tGetHandleVerifier [0x0x7ff7caaf0400+3164896]\n\tGetHandleVerifier [0x0x7ff7ca818c3e+185118]\n\tGetHandleVerifier [0x0x7ff7ca82054f+216111]\n\tGetHandleVerifier [0x0x7ff7ca8072e4+113092]\n\tGetHandleVerifier [0x0x7ff7ca807499+113529]\n\tGetHandleVerifier [0x0x7ff7ca7ee298+10616]\n\tBaseThreadInitThunk [0x0x7ffe85327374+20]\n\tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\College_defense\\test_flow.py\", line 608, in product_master\n    self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 305, in send_keys\n    self._execute(\n    ~~~~~~~~~~~~~^\n        Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 574, in _execute\n    return self._parent.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1753783448037, "stop": 1753783448260}], "attachments": [{"name": "Add Another Product Alert Error", "source": "65be8156-0889-462b-a7ce-7eab6a69a5fd-attachment.png", "type": "image/png"}], "parameters": [{"name": "product_item", "value": "'citizen1'"}, {"name": "HS_code", "value": "'123'"}, {"name": "unit", "value": "'kg.'"}, {"name": "item_type", "value": "'Servie Item'"}, {"name": "description", "value": "'This is description'"}, {"name": "category", "value": "'N/A'"}, {"name": "short_name", "value": "'XYZ'"}, {"name": "purchase_price", "value": "'120'"}, {"name": "sales_price", "value": "'140'"}, {"name": "alt_unit", "value": "'Each'"}, {"name": "conversion_factor", "value": "'1000'"}, {"name": "barcode_map", "value": "'578356'"}, {"name": "barcode_unit", "value": "'kg.'"}], "start": 1753783278220, "stop": 1753783448450}], "attachments": [{"name": "log", "source": "18933e1f-50bf-4865-b1fe-9d14294401d4-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "5c1a7ed7-0173-4e47-9ca0-fc01f4c949aa-attachment.txt", "type": "text/plain"}], "start": 1753783241390, "stop": 1753783448455, "uuid": "86d78cf0-2913-4f8d-97f1-263fda2a4182", "historyId": "a068f84781427714db367b8b9a831eb7", "testCaseId": "a068f84781427714db367b8b9a831eb7", "fullName": "test_flow.TestERPFlowCreation#test_product", "labels": [{"name": "feature", "value": "Test ERP FLow Creation"}, {"name": "suite", "value": "test_flow"}, {"name": "subSuite", "value": "TestERPFlowCreation"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "11788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow"}]}