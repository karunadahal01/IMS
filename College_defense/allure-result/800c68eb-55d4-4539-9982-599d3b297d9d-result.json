{"name": "test_purchase_flow", "status": "broken", "statusDetails": {"message": "test_flow.FormFieldNotFoundError: Failed to open Account Name list: Message: element click intercepted: Element <button _ngcontent-mnb-c305=\"\" class=\"btn btn-info pull-right ng-star-inserted\" style=\"margin: 0px 4px;\">...</button> is not clickable at point (998, 80). Other element would receive the click: <div _ngcontent-mnb-c237=\"\" class=\"modal-content modal-content-main-area\">...</div>\n  (Session info: chrome=138.0.7204.169)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff65c63e935+77845]\n\tGetHandleVerifier [0x0x7ff65c63e990+77936]\n\t(No symbol) [0x0x7ff65c3f9cda]\n\t(No symbol) [0x0x7ff65c4586a9]\n\t(No symbol) [0x0x7ff65c456042]\n\t(No symbol) [0x0x7ff65c453081]\n\t(No symbol) [0x0x7ff65c451f81]\n\t(No symbol) [0x0x7ff65c4436c8]\n\t(No symbol) [0x0x7ff65c4788ca]\n\t(No symbol) [0x0x7ff65c442f76]\n\t(No symbol) [0x0x7ff65c478ae0]\n\t(No symbol) [0x0x7ff65c4a0b07]\n\t(No symbol) [0x0x7ff65c4786a3]\n\t(No symbol) [0x0x7ff65c441791]\n\t(No symbol) [0x0x7ff65c442523]\n\tGetHandleVerifier [0x0x7ff65c91684d+3059501]\n\tGetHandleVerifier [0x0x7ff65c910c0d+3035885]\n\tGetHandleVerifier [0x0x7ff65c930400+3164896]\n\tGetHandleVerifier [0x0x7ff65c658c3e+185118]\n\tGetHandleVerifier [0x0x7ff65c66054f+216111]\n\tGetHandleVerifier [0x0x7ff65c6472e4+113092]\n\tGetHandleVerifier [0x0x7ff65c647499+113529]\n\tGetHandleVerifier [0x0x7ff65c62e298+10616]\n\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\n\tRtlUserThreadStart [0x0x7ff8419dcc91+33]", "trace": "self = <test_flow.TestERPFlowCreation object at 0x000001FE2FEA9950>, barcode_purchase = 5678356\n\n    def Purchase_invoice(self, barcode_purchase):\n        time.sleep(5)\n    \n        try:\n            # ============ NAVIGATION TO PURCHASE TRANSACTION ============\n            print(\"Step 5: Waiting for dashboard to load...\")\n            time.sleep(3)  # Give additional time for page to fully load\n    \n            print(\"Step 6: Clicking on 'Transactions' menu...\")\n            transactions_clicked = False\n    \n            print(\"Step 6.1: Debugging available navigation elements...\")\n            try:\n                nav_elements = self.driver.find_elements(By.XPATH, \"//a | //div[@class*='nav'] | //span[@class*='nav']\")\n                print(f\"Found {len(nav_elements)} potential navigation elements\")\n    \n                visible_nav_texts = []\n                for element in nav_elements[:15]:\n                    try:\n                        text = element.text.strip()\n                        if text and len(text) > 0 and element.is_displayed():\n                            visible_nav_texts.append(text)\n                    except:\n                        pass\n    \n                print(\"Available navigation texts:\")\n                for text in visible_nav_texts:\n                    print(f\"  - '{text}'\")\n            except Exception as e:\n                print(f\"Navigation debug failed: {e}\")\n    \n            transactions_selectors = [\n                \"//a[contains(text(), 'Transactions')]\",\n                \"//div[contains(text(), 'Transactions')]\",\n                \"//span[contains(text(), 'Transactions')]\",\n                \"//*[contains(@class, 'nav') and contains(text(), 'Transactions')]\",\n                \"//*[text()='Transactions']\",\n                \"//a[contains(@href, 'transaction')]\",\n                \"//*[@class*='menu' and contains(text(), 'Transactions')]\"\n            ]\n    \n            for i, selector in enumerate(transactions_selectors, 1):\n                try:\n                    print(f\"  Trying selector {i}: {selector}\")\n                    transactions_element = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(self.driver)\n                    actions.move_to_element(transactions_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Transactions' using selector {i}\")\n                    transactions_clicked = True\n                    time.sleep(2)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Selector {i} failed: {str(e)[:50]}...\")\n                    continue\n    \n            purchase_transaction_hovered = False\n            if not purchase_transaction_hovered:\n                print(\"⚠️ Trying alternative approach for Purchase Transaction hover...\")\n                try:\n                    all_elements = self.driver.find_elements(By.TAG_NAME, \"span\")\n                    for element in all_elements:\n                        try:\n                            element_text = element.text.strip()\n                            if 'Purchase Transaction' in element_text and element.is_displayed():\n                                actions = ActionChains(self.driver)\n                                actions.move_to_element(element).perform()\n                                print(f\"✓ Hovered over 'Purchase Transaction' using fallback method\")\n                                purchase_transaction_hovered = True\n                                time.sleep(2)\n                                break\n                        except Exception:\n                            continue\n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Transaction hover failed: {e}\")\n    \n            if not purchase_transaction_hovered:\n                raise Exception(\"Could not find or hover over 'Purchase Transaction' menu\")\n    \n            print(\"Step 8: Clicking on 'Purchase Invoice' from dropdown...\")\n    \n            purchase_invoice_clicked = False\n            purchase_invoice_selectors = [\n                \"//*[@class='dropdown-item' and contains(text(), 'Purchase Invoice')]\",\n                \"//*[contains(@class, 'menu-item') and contains(text(), 'Purchase Invoice')]\"\n            ]\n    \n            for i, selector in enumerate(purchase_invoice_selectors, 1):\n                try:\n                    print(f\"  Trying Purchase Invoice selector {i}: {selector}\")\n                    purchase_invoice_element = WebDriverWait(self.driver, 8).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(self.driver)\n                    actions.move_to_element(purchase_invoice_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Purchase Invoice' using selector {i}\")\n                    purchase_invoice_clicked = True\n                    time.sleep(3)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Purchase Invoice selector {i} failed: {str(e)[:100]}...\")\n                    continue\n    \n            if not purchase_invoice_clicked:\n                print(\"⚠️ Trying alternative approach for Purchase Invoice...\")\n                try:\n                    invoice_elements = self.driver.find_elements(By.XPATH, \"//*[contains(text(), 'Purchase Invoice')]\")\n                    print(f\"Found {len(invoice_elements)} elements containing 'Purchase Invoice'\")\n                    for element in invoice_elements:\n                        try:\n                            if element.is_displayed() and element.is_enabled():\n                                actions = ActionChains(self.driver)\n                                actions.move_to_element(element).click().perform()\n                                print(f\"✓ Clicked on 'Purchase Invoice' using fallback method\")\n                                purchase_invoice_clicked = True\n                                time.sleep(3)\n                                break\n                        except Exception:\n                            continue\n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n        except Exception  as e:\n            logger.error(f\"Failed to navigate: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                            name=\"Navigation Error\",\n                            attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to navigate to Purchase Invoice: {e}\")\n    \n        # Purchase Invoice number input\n        try:\n            random_invoice = \"INV-\" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n            print(f\"Generated Invoice Number: {random_invoice}\")\n    \n            try:\n                invoice_field = WebDriverWait(self.driver, 10).until(\n                    ec.element_to_be_clickable((By.ID, \"invoiceNO\"))\n                )\n                invoice_field.clear()\n                invoice_field.send_keys(random_invoice)\n                print(f\"✓ Successfully entered Invoice Number: {random_invoice}\")\n            except Exception as e:\n                print(f\"⚠️ Failed to enter Invoice Number: {e}\")\n           # with allure.step(\"Entering Purchase Invoice number\"):\n           #  random_invoice = \"INV-\" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n           #  print(f\"Generated Invoice Number: {random_invoice}\")\n           #\n           #  try:\n           #      invoice_field = WebDriverWait(self.driver, 10).until(\n           #          ec.element_to_be_clickable((By.ID, \"invoiceNO\"))\n           #      )\n           #      invoice_field.clear()\n           #      invoice_field.send_keys(random_invoice)\n           #      print(f\"✓ Successfully entered Invoice Number: {random_invoice}\")\n           #  except Exception as e:\n           #      print(f\"⚠️ Failed to enter Invoice Number: {e}\")\n        except Exception  as e:\n            logger.error(f\"Failed to enter Invoice Number: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Invoice Number Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter Invoice Number: {e}\")\n    \n        # Entering Account Name\n        try:\n            with allure.step(\"Entering Account Name\"):\n                try:\n                    account_field_selectors = [\n                        \"//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]\",\n                        \"//input[contains(@placeholder, 'Press Enter to select Account')]\",\n                        \"//*[contains(text(), 'Press Enter to select Account')]\",\n                        \"//input[contains(@class, 'form-control') and contains(@placeholder, 'Account')]\"\n                    ]\n                    account_field = None\n                    for selector in account_field_selectors:\n                        try:\n                            account_field = WebDriverWait(self.driver, 5).until(\n                                ec.element_to_be_clickable((By.XPATH, selector))\n                            )\n                            print(f\"✓ Found Account field using selector: {selector}\")\n                            break\n                        except:\n                            continue\n    \n                    if account_field:\n                        account_field.click()\n                        time.sleep(1)\n                        account_field.send_keys(Keys.ENTER)\n                        print(\"✓ Successfully pressed Enter on Account field to open dropdown\")\n                        print(\"⏳ Waiting for dropdown list to load completely...\")\n                        time.sleep(3)\n                    else:\n                        raise Exception(\"Could not find Account field\")\n    \n                except Exception as e:\n                    print(f\"⚠️ Failed to open Account dropdown using primary method: {e}\")\n                    try:\n                        all_inputs = self.driver.find_elements(By.TAG_NAME, \"input\")\n                        for input_field in all_inputs:\n                            try:\n                                placeholder = input_field.get_attribute(\"placeholder\")\n                                if placeholder and \"account\" in placeholder.lower():\n                                    input_field.click()\n                                    time.sleep(1)\n                                    input_field.send_keys(Keys.ENTER)\n                                    print(\"✓ Successfully opened Account dropdown using fallback method\")\n                                    time.sleep(2)\n                                    break\n                            except:\n                                continue\n                    except Exception as e2:\n                        print(f\"⚠️ All methods failed to open Account dropdown: {e2}\")\n    \n                print(\"Step 11: Selecting first account by pressing Enter again...\")\n                try:\n                    if account_field:\n                        account_field.send_keys(Keys.ENTER)\n                        print(\"✓ Successfully pressed Enter again to select first account\")\n                        time.sleep(2)\n                    else:\n                        focused_element = self.driver.switch_to.active_element\n                        focused_element.send_keys(Keys.ENTER)\n                        print(\"✓ Successfully pressed Enter on focused element to select first account\")\n                        time.sleep(2)\n                except Exception as e:\n                    print(f\"⚠️ Failed to select first account by pressing Enter: {e}\")\n                    try:\n                        print(\"⚠️ Trying fallback method: Arrow Down + Enter...\")\n                        if account_field:\n                            account_field.send_keys(Keys.ARROW_DOWN)\n                            time.sleep(0.5)\n                            account_field.send_keys(Keys.ENTER)\n                            print(\"✓ Successfully selected first account using Arrow Down + Enter\")\n                        else:\n                            focused_element = self.driver.switch_to.active_element\n                            focused_element.send_keys(Keys.ARROW_DOWN)\n                            time.sleep(0.5)\n                            focused_element.send_keys(Keys.ENTER)\n                            print(\"✓ Successfully selected first account using Arrow Down + Enter on focused element\")\n                    except Exception as e2:\n                        print(f\"⚠️ All methods failed: {e2}\")\n                        try:\n                            print(\"⚠️ Last resort: Trying to click on dropdown items...\")\n                            dropdown_selectors = [\n                                \"//div[contains(@class, 'dropdown-menu')]//a[1]\",\n                                \"//ul[contains(@class, 'dropdown')]//li[1]\",\n                                \"//div[contains(@class, 'dropdown')]//div[1]\",\n                                \"//*[contains(@class, 'dropdown-item')][1]\",\n                                \"//*[contains(@class, 'list-item')][1]\"\n                            ]\n                            for selector in dropdown_selectors:\n                                try:\n                                    first_account = WebDriverWait(self.driver, 3).until(\n                                        ec.element_to_be_clickable((By.XPATH, selector))\n                                    )\n                                    first_account.click()\n                                    print(f\"✓ Successfully clicked on first account using selector: {selector}\")\n                                    break\n                                except:\n                                    continue\n                        except Exception as e3:\n                            print(f\"⚠️ All methods failed to select first account: {e3}\")\n    \n                print(\"\\n\" + \"=\" * 50)\n                print(\"✓ NEW FUNCTIONALITY COMPLETED SUCCESSFULLY!\")\n                print(\"✓ Account dropdown opened by pressing Enter\")\n                print(\"✓ First account selected by pressing Enter again\")\n                print(\"=\" * 50 + \"\\n\")\n    \n                remarks_field = WebDriverWait(self.driver, 5).until(\n                    ec.element_to_be_clickable((By.ID, \"remarksid\"))\n                )\n                remarks_field.clear()\n                remarks_field.send_keys(\"This is an automated remark for PI.\")\n                time.sleep(5)\n                print(\"✅ Remarks entered successfully.\")\n    \n                # Barcode and quantity\n                barcode_input = self.driver.find_element(By.ID, \"barcodeField\")\n                barcode_input.clear()\n                barcode_input.send_keys(barcode_purchase)\n                barcode_input.send_keys(Keys.ENTER)\n    \n                quantity = random.randint(80, 200)\n                print(f\"Generated quantity: {quantity}\")\n    \n                xpaths = [\n                    \"//table//tr//td[position()=9]//input\",\n                    \"//input[contains(@name, 'quantity') or contains(@name, 'Quantity')]\",\n                    \"//input[contains(@id, 'quantity') or contains(@id, 'Quantity')]\",\n                    \"//td[contains(@class, 'quantity')]//input\",\n                    \"//table//tbody//tr[1]//td[9]//input\",\n                ]\n    \n                quantity_field = None\n                for xpath in xpaths:\n                    try:\n                        quantity_field = WebDriverWait(self.driver, 5).until(\n                            ec.element_to_be_clickable((By.XPATH, xpath))\n                        )\n                        quantity_field.clear()\n                        quantity_field.send_keys(str(quantity) + Keys.ENTER)\n                        print(\"✅ Quantity entered and Enter key pressed.\")\n                        time.sleep(2)\n                        break\n                    except Exception as e:\n                        print(f\"⚠ Failed with XPath: {xpath} -> {e}\")\n                else:\n                    print(\"❌ Could not locate the quantity input field.\")\n    \n                # --- Discount (Dis%) 0 ---\n                discount = random.randint(1, 50)\n                print(f\"Generated discount: {discount}%\")\n                try:\n                    discount_field = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.ID, \"INDDISCOUNTRATE0\"))\n                    )\n                    discount_field.clear()\n                    discount_field.send_keys(str(discount))\n                    time.sleep(2)\n                    print(\"✅ Discount entered.\")\n                except Exception as e:\n                    print(f\"❌ Discount input not found: {e}\")\n    \n                # --- Discount (Dis%) 1 ---\n                discount = random.randint(1, 50)\n                try:\n                    discount_field = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.ID, \"INDDISCOUNTRATE1\"))\n                    )\n                    discount_field.clear()\n                    discount_field.send_keys(str(discount))\n                    time.sleep(2)\n                    print(\"✅ Discount entered.\")\n                except Exception as e:\n                    print(f\"❌ Discount input not found: {e}\")\n    \n                wait = WebDriverWait(self.driver, 10)\n                save_button = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//button[contains(text(), 'SAVE') and contains(@class, 'btn-info')]\")))\n                save_button.click()\n    \n                try:\n                    WebDriverWait(self.driver, 5).until(ec.alert_is_present())\n                    alert = self.driver.switch_to.alert\n                    alert.accept()\n                    print(\"Alert accepted successfully.\")\n                except :\n                    print(\"No alert appeared after clicking SAVE.\")\n    \n                import pyautogui\n                time.sleep(10)\n                pyautogui.press('esc')\n                time.sleep(5)\n    \n                view_button = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'VIEW')]\")))\n                view_button.click()\n    \n                time.sleep(2)\n                actions = ActionChains(self.driver)\n                actions.send_keys(Keys.ENTER).perform()\n                time.sleep(3)\n    \n                reset_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'RESET')]\")))\n>               reset_btn.click()\n\ntest_flow.py:1005: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FE2FEAAE90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff65c62e298+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8419dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button _ngcontent-mnb-c305=\"\" class=\"btn btn-info pull-right ng-star-inserted\" style=\"margin: 0px 4px;\">...</button> is not clickable at point (998, 80). Other element would receive the click: <div _ngcontent-mnb-c237=\"\" class=\"modal-content modal-content-main-area\">...</div>\nE         (Session info: chrome=138.0.7204.169)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff65c63e935+77845]\nE       \tGetHandleVerifier [0x0x7ff65c63e990+77936]\nE       \t(No symbol) [0x0x7ff65c3f9cda]\nE       \t(No symbol) [0x0x7ff65c4586a9]\nE       \t(No symbol) [0x0x7ff65c456042]\nE       \t(No symbol) [0x0x7ff65c453081]\nE       \t(No symbol) [0x0x7ff65c451f81]\nE       \t(No symbol) [0x0x7ff65c4436c8]\nE       \t(No symbol) [0x0x7ff65c4788ca]\nE       \t(No symbol) [0x0x7ff65c442f76]\nE       \t(No symbol) [0x0x7ff65c478ae0]\nE       \t(No symbol) [0x0x7ff65c4a0b07]\nE       \t(No symbol) [0x0x7ff65c4786a3]\nE       \t(No symbol) [0x0x7ff65c441791]\nE       \t(No symbol) [0x0x7ff65c442523]\nE       \tGetHandleVerifier [0x0x7ff65c91684d+3059501]\nE       \tGetHandleVerifier [0x0x7ff65c910c0d+3035885]\nE       \tGetHandleVerifier [0x0x7ff65c930400+3164896]\nE       \tGetHandleVerifier [0x0x7ff65c658c3e+185118]\nE       \tGetHandleVerifier [0x0x7ff65c66054f+216111]\nE       \tGetHandleVerifier [0x0x7ff65c6472e4+113092]\nE       \tGetHandleVerifier [0x0x7ff65c647499+113529]\nE       \tGetHandleVerifier [0x0x7ff65c62e298+10616]\nE       \tBaseThreadInitThunk [0x0x7ff840aa7374+20]\nE       \tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_flow.TestERPFlowCreation object at 0x000001FE2FEA9950>\n\n    def test_purchase_flow(self):\n    \n        self.login(\"gedehim917@decodewp.com\",\n                   \"Tebahal1!\",\n                   \"https://velvet.webredirect.himshang.com.np/#/pages/dashboard\")\n>       self.Purchase_invoice(\n                         barcode_purchase=5678356)\n\ntest_flow.py:2237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_flow.TestERPFlowCreation object at 0x000001FE2FEA9950>, barcode_purchase = 5678356\n\n    def Purchase_invoice(self, barcode_purchase):\n        time.sleep(5)\n    \n        try:\n            # ============ NAVIGATION TO PURCHASE TRANSACTION ============\n            print(\"Step 5: Waiting for dashboard to load...\")\n            time.sleep(3)  # Give additional time for page to fully load\n    \n            print(\"Step 6: Clicking on 'Transactions' menu...\")\n            transactions_clicked = False\n    \n            print(\"Step 6.1: Debugging available navigation elements...\")\n            try:\n                nav_elements = self.driver.find_elements(By.XPATH, \"//a | //div[@class*='nav'] | //span[@class*='nav']\")\n                print(f\"Found {len(nav_elements)} potential navigation elements\")\n    \n                visible_nav_texts = []\n                for element in nav_elements[:15]:\n                    try:\n                        text = element.text.strip()\n                        if text and len(text) > 0 and element.is_displayed():\n                            visible_nav_texts.append(text)\n                    except:\n                        pass\n    \n                print(\"Available navigation texts:\")\n                for text in visible_nav_texts:\n                    print(f\"  - '{text}'\")\n            except Exception as e:\n                print(f\"Navigation debug failed: {e}\")\n    \n            transactions_selectors = [\n                \"//a[contains(text(), 'Transactions')]\",\n                \"//div[contains(text(), 'Transactions')]\",\n                \"//span[contains(text(), 'Transactions')]\",\n                \"//*[contains(@class, 'nav') and contains(text(), 'Transactions')]\",\n                \"//*[text()='Transactions']\",\n                \"//a[contains(@href, 'transaction')]\",\n                \"//*[@class*='menu' and contains(text(), 'Transactions')]\"\n            ]\n    \n            for i, selector in enumerate(transactions_selectors, 1):\n                try:\n                    print(f\"  Trying selector {i}: {selector}\")\n                    transactions_element = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(self.driver)\n                    actions.move_to_element(transactions_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Transactions' using selector {i}\")\n                    transactions_clicked = True\n                    time.sleep(2)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Selector {i} failed: {str(e)[:50]}...\")\n                    continue\n    \n            purchase_transaction_hovered = False\n            if not purchase_transaction_hovered:\n                print(\"⚠️ Trying alternative approach for Purchase Transaction hover...\")\n                try:\n                    all_elements = self.driver.find_elements(By.TAG_NAME, \"span\")\n                    for element in all_elements:\n                        try:\n                            element_text = element.text.strip()\n                            if 'Purchase Transaction' in element_text and element.is_displayed():\n                                actions = ActionChains(self.driver)\n                                actions.move_to_element(element).perform()\n                                print(f\"✓ Hovered over 'Purchase Transaction' using fallback method\")\n                                purchase_transaction_hovered = True\n                                time.sleep(2)\n                                break\n                        except Exception:\n                            continue\n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Transaction hover failed: {e}\")\n    \n            if not purchase_transaction_hovered:\n                raise Exception(\"Could not find or hover over 'Purchase Transaction' menu\")\n    \n            print(\"Step 8: Clicking on 'Purchase Invoice' from dropdown...\")\n    \n            purchase_invoice_clicked = False\n            purchase_invoice_selectors = [\n                \"//*[@class='dropdown-item' and contains(text(), 'Purchase Invoice')]\",\n                \"//*[contains(@class, 'menu-item') and contains(text(), 'Purchase Invoice')]\"\n            ]\n    \n            for i, selector in enumerate(purchase_invoice_selectors, 1):\n                try:\n                    print(f\"  Trying Purchase Invoice selector {i}: {selector}\")\n                    purchase_invoice_element = WebDriverWait(self.driver, 8).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(self.driver)\n                    actions.move_to_element(purchase_invoice_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Purchase Invoice' using selector {i}\")\n                    purchase_invoice_clicked = True\n                    time.sleep(3)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Purchase Invoice selector {i} failed: {str(e)[:100]}...\")\n                    continue\n    \n            if not purchase_invoice_clicked:\n                print(\"⚠️ Trying alternative approach for Purchase Invoice...\")\n                try:\n                    invoice_elements = self.driver.find_elements(By.XPATH, \"//*[contains(text(), 'Purchase Invoice')]\")\n                    print(f\"Found {len(invoice_elements)} elements containing 'Purchase Invoice'\")\n                    for element in invoice_elements:\n                        try:\n                            if element.is_displayed() and element.is_enabled():\n                                actions = ActionChains(self.driver)\n                                actions.move_to_element(element).click().perform()\n                                print(f\"✓ Clicked on 'Purchase Invoice' using fallback method\")\n                                purchase_invoice_clicked = True\n                                time.sleep(3)\n                                break\n                        except Exception:\n                            continue\n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n        except Exception  as e:\n            logger.error(f\"Failed to navigate: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                            name=\"Navigation Error\",\n                            attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to navigate to Purchase Invoice: {e}\")\n    \n        # Purchase Invoice number input\n        try:\n            random_invoice = \"INV-\" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n            print(f\"Generated Invoice Number: {random_invoice}\")\n    \n            try:\n                invoice_field = WebDriverWait(self.driver, 10).until(\n                    ec.element_to_be_clickable((By.ID, \"invoiceNO\"))\n                )\n                invoice_field.clear()\n                invoice_field.send_keys(random_invoice)\n                print(f\"✓ Successfully entered Invoice Number: {random_invoice}\")\n            except Exception as e:\n                print(f\"⚠️ Failed to enter Invoice Number: {e}\")\n           # with allure.step(\"Entering Purchase Invoice number\"):\n           #  random_invoice = \"INV-\" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n           #  print(f\"Generated Invoice Number: {random_invoice}\")\n           #\n           #  try:\n           #      invoice_field = WebDriverWait(self.driver, 10).until(\n           #          ec.element_to_be_clickable((By.ID, \"invoiceNO\"))\n           #      )\n           #      invoice_field.clear()\n           #      invoice_field.send_keys(random_invoice)\n           #      print(f\"✓ Successfully entered Invoice Number: {random_invoice}\")\n           #  except Exception as e:\n           #      print(f\"⚠️ Failed to enter Invoice Number: {e}\")\n        except Exception  as e:\n            logger.error(f\"Failed to enter Invoice Number: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Invoice Number Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter Invoice Number: {e}\")\n    \n        # Entering Account Name\n        try:\n            with allure.step(\"Entering Account Name\"):\n                try:\n                    account_field_selectors = [\n                        \"//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]\",\n                        \"//input[contains(@placeholder, 'Press Enter to select Account')]\",\n                        \"//*[contains(text(), 'Press Enter to select Account')]\",\n                        \"//input[contains(@class, 'form-control') and contains(@placeholder, 'Account')]\"\n                    ]\n                    account_field = None\n                    for selector in account_field_selectors:\n                        try:\n                            account_field = WebDriverWait(self.driver, 5).until(\n                                ec.element_to_be_clickable((By.XPATH, selector))\n                            )\n                            print(f\"✓ Found Account field using selector: {selector}\")\n                            break\n                        except:\n                            continue\n    \n                    if account_field:\n                        account_field.click()\n                        time.sleep(1)\n                        account_field.send_keys(Keys.ENTER)\n                        print(\"✓ Successfully pressed Enter on Account field to open dropdown\")\n                        print(\"⏳ Waiting for dropdown list to load completely...\")\n                        time.sleep(3)\n                    else:\n                        raise Exception(\"Could not find Account field\")\n    \n                except Exception as e:\n                    print(f\"⚠️ Failed to open Account dropdown using primary method: {e}\")\n                    try:\n                        all_inputs = self.driver.find_elements(By.TAG_NAME, \"input\")\n                        for input_field in all_inputs:\n                            try:\n                                placeholder = input_field.get_attribute(\"placeholder\")\n                                if placeholder and \"account\" in placeholder.lower():\n                                    input_field.click()\n                                    time.sleep(1)\n                                    input_field.send_keys(Keys.ENTER)\n                                    print(\"✓ Successfully opened Account dropdown using fallback method\")\n                                    time.sleep(2)\n                                    break\n                            except:\n                                continue\n                    except Exception as e2:\n                        print(f\"⚠️ All methods failed to open Account dropdown: {e2}\")\n    \n                print(\"Step 11: Selecting first account by pressing Enter again...\")\n                try:\n                    if account_field:\n                        account_field.send_keys(Keys.ENTER)\n                        print(\"✓ Successfully pressed Enter again to select first account\")\n                        time.sleep(2)\n                    else:\n                        focused_element = self.driver.switch_to.active_element\n                        focused_element.send_keys(Keys.ENTER)\n                        print(\"✓ Successfully pressed Enter on focused element to select first account\")\n                        time.sleep(2)\n                except Exception as e:\n                    print(f\"⚠️ Failed to select first account by pressing Enter: {e}\")\n                    try:\n                        print(\"⚠️ Trying fallback method: Arrow Down + Enter...\")\n                        if account_field:\n                            account_field.send_keys(Keys.ARROW_DOWN)\n                            time.sleep(0.5)\n                            account_field.send_keys(Keys.ENTER)\n                            print(\"✓ Successfully selected first account using Arrow Down + Enter\")\n                        else:\n                            focused_element = self.driver.switch_to.active_element\n                            focused_element.send_keys(Keys.ARROW_DOWN)\n                            time.sleep(0.5)\n                            focused_element.send_keys(Keys.ENTER)\n                            print(\"✓ Successfully selected first account using Arrow Down + Enter on focused element\")\n                    except Exception as e2:\n                        print(f\"⚠️ All methods failed: {e2}\")\n                        try:\n                            print(\"⚠️ Last resort: Trying to click on dropdown items...\")\n                            dropdown_selectors = [\n                                \"//div[contains(@class, 'dropdown-menu')]//a[1]\",\n                                \"//ul[contains(@class, 'dropdown')]//li[1]\",\n                                \"//div[contains(@class, 'dropdown')]//div[1]\",\n                                \"//*[contains(@class, 'dropdown-item')][1]\",\n                                \"//*[contains(@class, 'list-item')][1]\"\n                            ]\n                            for selector in dropdown_selectors:\n                                try:\n                                    first_account = WebDriverWait(self.driver, 3).until(\n                                        ec.element_to_be_clickable((By.XPATH, selector))\n                                    )\n                                    first_account.click()\n                                    print(f\"✓ Successfully clicked on first account using selector: {selector}\")\n                                    break\n                                except:\n                                    continue\n                        except Exception as e3:\n                            print(f\"⚠️ All methods failed to select first account: {e3}\")\n    \n                print(\"\\n\" + \"=\" * 50)\n                print(\"✓ NEW FUNCTIONALITY COMPLETED SUCCESSFULLY!\")\n                print(\"✓ Account dropdown opened by pressing Enter\")\n                print(\"✓ First account selected by pressing Enter again\")\n                print(\"=\" * 50 + \"\\n\")\n    \n                remarks_field = WebDriverWait(self.driver, 5).until(\n                    ec.element_to_be_clickable((By.ID, \"remarksid\"))\n                )\n                remarks_field.clear()\n                remarks_field.send_keys(\"This is an automated remark for PI.\")\n                time.sleep(5)\n                print(\"✅ Remarks entered successfully.\")\n    \n                # Barcode and quantity\n                barcode_input = self.driver.find_element(By.ID, \"barcodeField\")\n                barcode_input.clear()\n                barcode_input.send_keys(barcode_purchase)\n                barcode_input.send_keys(Keys.ENTER)\n    \n                quantity = random.randint(80, 200)\n                print(f\"Generated quantity: {quantity}\")\n    \n                xpaths = [\n                    \"//table//tr//td[position()=9]//input\",\n                    \"//input[contains(@name, 'quantity') or contains(@name, 'Quantity')]\",\n                    \"//input[contains(@id, 'quantity') or contains(@id, 'Quantity')]\",\n                    \"//td[contains(@class, 'quantity')]//input\",\n                    \"//table//tbody//tr[1]//td[9]//input\",\n                ]\n    \n                quantity_field = None\n                for xpath in xpaths:\n                    try:\n                        quantity_field = WebDriverWait(self.driver, 5).until(\n                            ec.element_to_be_clickable((By.XPATH, xpath))\n                        )\n                        quantity_field.clear()\n                        quantity_field.send_keys(str(quantity) + Keys.ENTER)\n                        print(\"✅ Quantity entered and Enter key pressed.\")\n                        time.sleep(2)\n                        break\n                    except Exception as e:\n                        print(f\"⚠ Failed with XPath: {xpath} -> {e}\")\n                else:\n                    print(\"❌ Could not locate the quantity input field.\")\n    \n                # --- Discount (Dis%) 0 ---\n                discount = random.randint(1, 50)\n                print(f\"Generated discount: {discount}%\")\n                try:\n                    discount_field = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.ID, \"INDDISCOUNTRATE0\"))\n                    )\n                    discount_field.clear()\n                    discount_field.send_keys(str(discount))\n                    time.sleep(2)\n                    print(\"✅ Discount entered.\")\n                except Exception as e:\n                    print(f\"❌ Discount input not found: {e}\")\n    \n                # --- Discount (Dis%) 1 ---\n                discount = random.randint(1, 50)\n                try:\n                    discount_field = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.ID, \"INDDISCOUNTRATE1\"))\n                    )\n                    discount_field.clear()\n                    discount_field.send_keys(str(discount))\n                    time.sleep(2)\n                    print(\"✅ Discount entered.\")\n                except Exception as e:\n                    print(f\"❌ Discount input not found: {e}\")\n    \n                wait = WebDriverWait(self.driver, 10)\n                save_button = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//button[contains(text(), 'SAVE') and contains(@class, 'btn-info')]\")))\n                save_button.click()\n    \n                try:\n                    WebDriverWait(self.driver, 5).until(ec.alert_is_present())\n                    alert = self.driver.switch_to.alert\n                    alert.accept()\n                    print(\"Alert accepted successfully.\")\n                except :\n                    print(\"No alert appeared after clicking SAVE.\")\n    \n                import pyautogui\n                time.sleep(10)\n                pyautogui.press('esc')\n                time.sleep(5)\n    \n                view_button = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'VIEW')]\")))\n                view_button.click()\n    \n                time.sleep(2)\n                actions = ActionChains(self.driver)\n                actions.send_keys(Keys.ENTER).perform()\n                time.sleep(3)\n    \n                reset_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'RESET')]\")))\n                reset_btn.click()\n    \n                time.sleep(3)\n                wait.until(ec.alert_is_present())\n                alert = self.driver.switch_to.alert\n                alert.accept()\n                time.sleep(5)\n    \n                back_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'BACK')]\")))\n                back_btn.click()\n    \n                # account_field_selectors = [\n                #     \"//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]\",\n                #     \"//input[contains(@placeholder, 'Press Enter to select Account')]\",\n                #     \"//*[contains(text(), 'Press Enter to select Account')]\",\n                #     \"//input[contains(@class, 'form-control') and contains(@placeholder, 'Account')]\"\n                # ]\n                # account_field = None\n                # for selector in account_field_selectors:\n                #    try:\n                #       account_field = WebDriverWait(self.driver, 5).until(\n                #         ec.element_to_be_clickable((By.XPATH, selector))\n                #       )\n                #       print(f\"✓ Found Account field using selector: {selector}\")\n                #       break\n                #    except FormFieldNotFoundError:\n                #       continue\n                #\n                # if account_field:\n                #    account_field.click()\n                #    time.sleep(1)\n                #    account_field.send_keys(Keys.ENTER)\n                #    print(\"✓ Successfully pressed Enter on Account field to open dropdown\")\n                #    print(\"⏳ Waiting for dropdown list to load completely...\")\n                #    time.sleep(3)\n                # else:\n                #   raise Exception(\"Could not find Account field\")\n    \n        except Exception as e:\n            logger.error(f\"Failed to Open Account Name list: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Account Name list Open Error\",\n                          attachment_type=allure.attachment_type.PNG)\n>           raise FormFieldNotFoundError(f\"Failed to open Account Name list: {e}\")\nE           test_flow.FormFieldNotFoundError: Failed to open Account Name list: Message: element click intercepted: Element <button _ngcontent-mnb-c305=\"\" class=\"btn btn-info pull-right ng-star-inserted\" style=\"margin: 0px 4px;\">...</button> is not clickable at point (998, 80). Other element would receive the click: <div _ngcontent-mnb-c237=\"\" class=\"modal-content modal-content-main-area\">...</div>\nE             (Session info: chrome=138.0.7204.169)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff65c63e935+77845]\nE           \tGetHandleVerifier [0x0x7ff65c63e990+77936]\nE           \t(No symbol) [0x0x7ff65c3f9cda]\nE           \t(No symbol) [0x0x7ff65c4586a9]\nE           \t(No symbol) [0x0x7ff65c456042]\nE           \t(No symbol) [0x0x7ff65c453081]\nE           \t(No symbol) [0x0x7ff65c451f81]\nE           \t(No symbol) [0x0x7ff65c4436c8]\nE           \t(No symbol) [0x0x7ff65c4788ca]\nE           \t(No symbol) [0x0x7ff65c442f76]\nE           \t(No symbol) [0x0x7ff65c478ae0]\nE           \t(No symbol) [0x0x7ff65c4a0b07]\nE           \t(No symbol) [0x0x7ff65c4786a3]\nE           \t(No symbol) [0x0x7ff65c441791]\nE           \t(No symbol) [0x0x7ff65c442523]\nE           \tGetHandleVerifier [0x0x7ff65c91684d+3059501]\nE           \tGetHandleVerifier [0x0x7ff65c910c0d+3035885]\nE           \tGetHandleVerifier [0x0x7ff65c930400+3164896]\nE           \tGetHandleVerifier [0x0x7ff65c658c3e+185118]\nE           \tGetHandleVerifier [0x0x7ff65c66054f+216111]\nE           \tGetHandleVerifier [0x0x7ff65c6472e4+113092]\nE           \tGetHandleVerifier [0x0x7ff65c647499+113529]\nE           \tGetHandleVerifier [0x0x7ff65c62e298+10616]\nE           \tBaseThreadInitThunk [0x0x7ff840aa7374+20]\nE           \tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\ntest_flow.py:1048: FormFieldNotFoundError"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "steps": [{"name": "Detected 'Already Logged In' popup — logging out first", "status": "passed", "start": 1753760818697, "stop": 1753760818784}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1753760800944, "stop": 1753760836904}, {"name": "Entering Account Name", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button _ngcontent-mnb-c305=\"\" class=\"btn btn-info pull-right ng-star-inserted\" style=\"margin: 0px 4px;\">...</button> is not clickable at point (998, 80). Other element would receive the click: <div _ngcontent-mnb-c237=\"\" class=\"modal-content modal-content-main-area\">...</div>\n  (Session info: chrome=138.0.7204.169)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff65c63e935+77845]\n\tGetHandleVerifier [0x0x7ff65c63e990+77936]\n\t(No symbol) [0x0x7ff65c3f9cda]\n\t(No symbol) [0x0x7ff65c4586a9]\n\t(No symbol) [0x0x7ff65c456042]\n\t(No symbol) [0x0x7ff65c453081]\n\t(No symbol) [0x0x7ff65c451f81]\n\t(No symbol) [0x0x7ff65c4436c8]\n\t(No symbol) [0x0x7ff65c4788ca]\n\t(No symbol) [0x0x7ff65c442f76]\n\t(No symbol) [0x0x7ff65c478ae0]\n\t(No symbol) [0x0x7ff65c4a0b07]\n\t(No symbol) [0x0x7ff65c4786a3]\n\t(No symbol) [0x0x7ff65c441791]\n\t(No symbol) [0x0x7ff65c442523]\n\tGetHandleVerifier [0x0x7ff65c91684d+3059501]\n\tGetHandleVerifier [0x0x7ff65c910c0d+3035885]\n\tGetHandleVerifier [0x0x7ff65c930400+3164896]\n\tGetHandleVerifier [0x0x7ff65c658c3e+185118]\n\tGetHandleVerifier [0x0x7ff65c66054f+216111]\n\tGetHandleVerifier [0x0x7ff65c6472e4+113092]\n\tGetHandleVerifier [0x0x7ff65c647499+113529]\n\tGetHandleVerifier [0x0x7ff65c62e298+10616]\n\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\n\tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\project\\College_defense\\test_flow.py\", line 1005, in Purchase_invoice\n    reset_btn.click()\n    ~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 121, in click\n    self._execute(Command.CLICK_ELEMENT)\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 574, in _execute\n    return self._parent.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1753760895028, "stop": 1753761004097}], "attachments": [{"name": "Account Name list Open Error", "source": "4d0cc1f9-50b7-4563-b592-70e2cbd50d8a-attachment.png", "type": "image/png"}, {"name": "log", "source": "5cd7f45d-f74e-4e4c-96ea-43d0068d9dd6-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "084c3ce2-ed7b-4764-a272-5494f6549aba-attachment.txt", "type": "text/plain"}], "start": 1753760800944, "stop": 1753761004348, "uuid": "e95efe02-5c14-4338-90df-def74fa2cf7f", "historyId": "5c3d43723f4dba9566abcf28cb1c7eb7", "testCaseId": "5c3d43723f4dba9566abcf28cb1c7eb7", "fullName": "test_flow.TestERPFlowCreation#test_purchase_flow", "labels": [{"name": "feature", "value": "Test ERP FLow Creation"}, {"name": "suite", "value": "test_flow"}, {"name": "subSuite", "value": "TestERPFlowCreation"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "5616-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow"}]}