{"name": "test_overall_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e0f2e935+77845]\n\tGetHandleVerifier [0x0x7ff7e0f2e990+77936]\n\t(No symbol) [0x0x7ff7e0ce9b0c]\n\t(No symbol) [0x0x7ff7e0d308bf]\n\t(No symbol) [0x0x7ff7e0d68792]\n\t(No symbol) [0x0x7ff7e0d63293]\n\t(No symbol) [0x0x7ff7e0d62359]\n\t(No symbol) [0x0x7ff7e0cb4b05]\n\tGetHandleVerifier [0x0x7ff7e120684d+3059501]\n\tGetHandleVerifier [0x0x7ff7e1200c0d+3035885]\n\tGetHandleVerifier [0x0x7ff7e1220400+3164896]\n\tGetHandleVerifier [0x0x7ff7e0f48c3e+185118]\n\tGetHandleVerifier [0x0x7ff7e0f5054f+216111]\n\t(No symbol) [0x0x7ff7e0cb3b00]\n\tGetHandleVerifier [0x0x7ff7e132bd98+4260984]\n\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\n\tRtlUserThreadStart [0x0x7ff8419dcc91+33]", "trace": "self = <test_flow.TestERPFlowCreation object at 0x000001A1C0AF9310>, product_item = 'meetion', HS_code = '123'\nunit = 'kg.', item_type = 'Raw Item', description = 'This is description', category = 'N/A', short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'Each', conversion_factor = '1000', barcode_map = '9841'\nbarcode_unit = 'kg.'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def product_master(self, product_item, HS_code, unit, item_type,\n                       description, category, short_name, purchase_price, sales_price,\n                       alt_unit, conversion_factor,\n                       barcode_map, barcode_unit):\n        # Wait until the menu is loaded\n        wait = WebDriverWait(self.driver, 10)\n        # Click on \"Masters\"\n        try:\n           with allure.step(\"Clicking on 'Masters' menu\"):\n            Master_menu = self.driver.find_element(By.LINK_TEXT, \"Masters\")\n            Master_menu.click()\n            print(\"Clicked on 'Masters'\")\n        except Exception as e:\n            logger.error(f\"Error clicking 'Masters': {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Masters Menu Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Masters': {e}\")\n        time.sleep(5)\n        # Hover over \"inventory_info\"\n        try:\n            inventory_info = wait.until(ec.presence_of_element_located((By.LINK_TEXT, \"Inventory Info\")))\n            ActionChains(self.driver).move_to_element(inventory_info).perform()\n            time.sleep(5)\n        except Exception as e:\n    \n            logger.error(f\"Error hovering over 'Inventory Info': {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Inventory Info Hover Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to hover over 'Inventory Info': {e}\")\n    \n        # Wait for \"Product Master\" to be visible and click it\n        try:\n            with allure.step(\"Waiting for 'Product Master' to be visible and clicking it\"):\n               product_master = wait.until(ec.visibility_of_element_located((By.LINK_TEXT, \"Product Master\")))\n               product_master.click()\n               print(\"Clicked 'Product Master'\")\n               time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Product Master': {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Product Master Click Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Product Master': {e}\")\n        # Click on \"Add Product\" button\n        try:\n            with allure.step(\"Clicking on 'Add Product' button\"):\n                add_product_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Add Product')]\")))\n                self.safe_click(add_product_btn, \"Add Product button\")\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Product' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Product Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product': {e}\")\n    \n    \n        # Click the \"Add Product\" label\n    \n        try:\n            with allure.step(\"Clicking 'Add Product' label\"):\n                wait = WebDriverWait(self.driver, 10)\n                add_product = wait.until(ec.element_to_be_clickable((By.XPATH, \"//label[contains(text(), 'Add Product')]\")))\n                # Click the \"Add Product\" label\n                add_product.click()\n                time.sleep(8)\n    \n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Product' label: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Product Label Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product' label: {e}\")\n        # Zoom out screen\n        self.driver.execute_script(\"document.body.style.zoom='80%'\")\n        time.sleep(3)\n    \n        # Click on the Item Group input field\n        try:\n            with allure.step(\"Clicking on Item Group input field\"):\n                item_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='-- Press Enter For Item Group --']\")))\n                item_group_input.click()\n                time.sleep(5)\n                # Press Enter on the Item Group field\n                item_group_input.send_keys(Keys.ENTER)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking Item Group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click Item Group input field: {e}\")\n        wait = WebDriverWait(self.driver, 5)\n    \n        # Find and click the main group input field\n        try:\n            with allure.step(\"Clicking on main group input field\"):\n                main_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//ng-select//input[@type='text']\")))\n                main_group_input.click()\n                # Send Enter key to trigger dropdown\n                main_group_input.send_keys(Keys.ENTER)\n                # Send Enter again to select the first dropdown option\n                main_group_input.send_keys(Keys.ENTER)\n                main_group_input.send_keys(Keys.ENTER)\n    \n                time.sleep(8)\n    \n                ok_button = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//button[.//span[normalize-space()='Ok']]\")))\n                ok_button.click()\n        except Exception as e:\n            logger.error(f\"Error clicking main group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Main Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click main group input field: {e}\")\n    \n        # Find the input by placeholder and enter item name\n    \n        try:\n            with allure.step(\"Entering product item name\"):\n                # Find the input by placeholder and enter item name\n                item_name_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Enter Item Name']\")))\n                item_name_input.clear()\n                item_name_input.send_keys(product_item)\n                item_name_input.send_keys(Keys.ENTER)\n        except Exception as e:\n            logger.error(f\"Error entering product item name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter product item name: {e}\")\n    \n        # Press Tab from keyboard\n        self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        time.sleep(5)\n    \n        # Enter HSC code\n        try:\n            with allure.step(\"Entering HSC code\"):\n>               self.driver.switch_to.active_element.send_keys(HS_code , Keys.TAB)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_flow.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:43: in active_element\n    return self._driver.execute(Command.W3C_GET_ACTIVE_ELEMENT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A1C0A974D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff7e0f1e298+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8419dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: Unable to receive message from renderer\nE         (Session info: chrome=138.0.7204.169)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7e0f2e935+77845]\nE       \tGetHandleVerifier [0x0x7ff7e0f2e990+77936]\nE       \t(No symbol) [0x0x7ff7e0ce9cda]\nE       \t(No symbol) [0x0x7ff7e0cd75ec]\nE       \t(No symbol) [0x0x7ff7e0cd72da]\nE       \t(No symbol) [0x0x7ff7e0cd613e]\nE       \t(No symbol) [0x0x7ff7e0cfaabe]\nE       \t(No symbol) [0x0x7ff7e0d6feb5]\nE       \t(No symbol) [0x0x7ff7e0d90432]\nE       \t(No symbol) [0x0x7ff7e0d686a3]\nE       \t(No symbol) [0x0x7ff7e0d31791]\nE       \t(No symbol) [0x0x7ff7e0d32523]\nE       \tGetHandleVerifier [0x0x7ff7e120684d+3059501]\nE       \tGetHandleVerifier [0x0x7ff7e1200c0d+3035885]\nE       \tGetHandleVerifier [0x0x7ff7e1220400+3164896]\nE       \tGetHandleVerifier [0x0x7ff7e0f48c3e+185118]\nE       \tGetHandleVerifier [0x0x7ff7e0f5054f+216111]\nE       \tGetHandleVerifier [0x0x7ff7e0f372e4+113092]\nE       \tGetHandleVerifier [0x0x7ff7e0f37499+113529]\nE       \tGetHandleVerifier [0x0x7ff7e0f1e298+10616]\nE       \tBaseThreadInitThunk [0x0x7ff840aa7374+20]\nE       \tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_flow.TestERPFlowCreation object at 0x000001A1C0AF9310>\n\n    def test_overall_flow(self):\n        allure.step(\"Testing overall flow of the application\")\n        self.login(\"gedehim917@decodewp.com\",\n                   \"Tebahal1!\",\n                   \"https://velvet.webredirect.himshang.com.np/#/pages/dashboard\")\n>       self.product_master(\n            product_item=\"meetion1\",\n            HS_code=\"123\",\n            unit=\"kg.\",\n            item_type=\"Raw Item\",\n            description=\"This is description\",\n            category=\"N/A\",\n            short_name=\"XYZ\",\n            purchase_price=\"120\",\n            sales_price=\"140\",\n            alt_unit=\"Each\",\n            conversion_factor=\"1000\",\n            barcode_map=\"9841\",\n            barcode_unit=\"kg.\")\n\ntest_flow.py:1956: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_flow.py:347: in product_master\n    allure.attach(self.driver.get_screenshot_as_png(),\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1019: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1029: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A1C0A974D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...7e132bd98+4260984]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8419dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7e0f2e935+77845]\nE       \tGetHandleVerifier [0x0x7ff7e0f2e990+77936]\nE       \t(No symbol) [0x0x7ff7e0ce9b0c]\nE       \t(No symbol) [0x0x7ff7e0d308bf]\nE       \t(No symbol) [0x0x7ff7e0d68792]\nE       \t(No symbol) [0x0x7ff7e0d63293]\nE       \t(No symbol) [0x0x7ff7e0d62359]\nE       \t(No symbol) [0x0x7ff7e0cb4b05]\nE       \tGetHandleVerifier [0x0x7ff7e120684d+3059501]\nE       \tGetHandleVerifier [0x0x7ff7e1200c0d+3035885]\nE       \tGetHandleVerifier [0x0x7ff7e1220400+3164896]\nE       \tGetHandleVerifier [0x0x7ff7e0f48c3e+185118]\nE       \tGetHandleVerifier [0x0x7ff7e0f5054f+216111]\nE       \t(No symbol) [0x0x7ff7e0cb3b00]\nE       \tGetHandleVerifier [0x0x7ff7e132bd98+4260984]\nE       \tBaseThreadInitThunk [0x0x7ff840aa7374+20]\nE       \tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "steps": [{"name": "Detected 'Already Logged In' popup — logging out first", "status": "passed", "start": 1753684225471, "stop": 1753684225626}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1753684210040, "stop": 1753684243734}, {"name": "Creating product master for item: 'meetion'", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e0f2e935+77845]\n\tGetHandleVerifier [0x0x7ff7e0f2e990+77936]\n\t(No symbol) [0x0x7ff7e0ce9b0c]\n\t(No symbol) [0x0x7ff7e0d308bf]\n\t(No symbol) [0x0x7ff7e0d68792]\n\t(No symbol) [0x0x7ff7e0d63293]\n\t(No symbol) [0x0x7ff7e0d62359]\n\t(No symbol) [0x0x7ff7e0cb4b05]\n\tGetHandleVerifier [0x0x7ff7e120684d+3059501]\n\tGetHandleVerifier [0x0x7ff7e1200c0d+3035885]\n\tGetHandleVerifier [0x0x7ff7e1220400+3164896]\n\tGetHandleVerifier [0x0x7ff7e0f48c3e+185118]\n\tGetHandleVerifier [0x0x7ff7e0f5054f+216111]\n\t(No symbol) [0x0x7ff7e0cb3b00]\n\tGetHandleVerifier [0x0x7ff7e132bd98+4260984]\n\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\n\tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\project\\College_defense\\test_flow.py\", line 347, in product_master\n    allure.attach(self.driver.get_screenshot_as_png(),\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1019, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1029, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Clicking on 'Masters' menu", "status": "passed", "start": 1753684243734, "stop": 1753684243840}, {"name": "Waiting for 'Product Master' to be visible and clicking it", "status": "passed", "start": 1753684254168, "stop": 1753684259431}, {"name": "Clicking on 'Add Product' button", "status": "passed", "start": 1753684259431, "stop": 1753684269561}, {"name": "Clicking 'Add Product' label", "status": "passed", "start": 1753684269561, "stop": 1753684277837}, {"name": "Clicking on Item Group input field", "status": "passed", "start": 1753684280920, "stop": 1753684291112}, {"name": "Clicking on main group input field", "status": "passed", "start": 1753684291112, "stop": 1753684299531}, {"name": "Entering product item name", "status": "passed", "start": 1753684299531, "stop": 1753684299730}, {"name": "Entering HSC code", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: Unable to receive message from renderer\n  (Session info: chrome=138.0.7204.169)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e0f2e935+77845]\n\tGetHandleVerifier [0x0x7ff7e0f2e990+77936]\n\t(No symbol) [0x0x7ff7e0ce9cda]\n\t(No symbol) [0x0x7ff7e0cd75ec]\n\t(No symbol) [0x0x7ff7e0cd72da]\n\t(No symbol) [0x0x7ff7e0cd613e]\n\t(No symbol) [0x0x7ff7e0cfaabe]\n\t(No symbol) [0x0x7ff7e0d6feb5]\n\t(No symbol) [0x0x7ff7e0d90432]\n\t(No symbol) [0x0x7ff7e0d686a3]\n\t(No symbol) [0x0x7ff7e0d31791]\n\t(No symbol) [0x0x7ff7e0d32523]\n\tGetHandleVerifier [0x0x7ff7e120684d+3059501]\n\tGetHandleVerifier [0x0x7ff7e1200c0d+3035885]\n\tGetHandleVerifier [0x0x7ff7e1220400+3164896]\n\tGetHandleVerifier [0x0x7ff7e0f48c3e+185118]\n\tGetHandleVerifier [0x0x7ff7e0f5054f+216111]\n\tGetHandleVerifier [0x0x7ff7e0f372e4+113092]\n\tGetHandleVerifier [0x0x7ff7e0f37499+113529]\n\tGetHandleVerifier [0x0x7ff7e0f1e298+10616]\n\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\n\tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\project\\College_defense\\test_flow.py\", line 344, in product_master\n    self.driver.switch_to.active_element.send_keys(HS_code , Keys.TAB)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\switch_to.py\", line 43, in active_element\n    return self._driver.execute(Command.W3C_GET_ACTIVE_ELEMENT)[\"value\"]\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1753684304768, "stop": 1753684304925}], "parameters": [{"name": "product_item", "value": "'meetion'"}, {"name": "HS_code", "value": "'123'"}, {"name": "unit", "value": "'kg.'"}, {"name": "item_type", "value": "'Raw Item'"}, {"name": "description", "value": "'This is description'"}, {"name": "category", "value": "'N/A'"}, {"name": "short_name", "value": "'XYZ'"}, {"name": "purchase_price", "value": "'120'"}, {"name": "sales_price", "value": "'140'"}, {"name": "alt_unit", "value": "'Each'"}, {"name": "conversion_factor", "value": "'1000'"}, {"name": "barcode_map", "value": "'9841'"}, {"name": "barcode_unit", "value": "'kg.'"}], "start": 1753684243734, "stop": 1753684305117}], "attachments": [{"name": "log", "source": "b679ff2d-5784-4285-abce-c3fcc9d80aea-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "7288312f-5bfd-4d64-a03c-001cf8b3a70c-attachment.txt", "type": "text/plain"}], "start": 1753684210039, "stop": 1753684305143, "uuid": "684b108e-083e-4f56-9ace-3752f8c517e5", "historyId": "19c629496675b750fef6dc56c298a72b", "testCaseId": "19c629496675b750fef6dc56c298a72b", "fullName": "test_flow.TestERPFlowCreation#test_overall_flow", "labels": [{"name": "feature", "value": "Test ERP FLow Creation"}, {"name": "suite", "value": "test_flow"}, {"name": "subSuite", "value": "TestERPFlowCreation"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "4528-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow"}]}