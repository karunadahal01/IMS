{"name": "test_overall_flow", "status": "broken", "statusDetails": {"message": "test_flow.FormFieldNotFoundError: Failed to open Account Name list: Message: invalid selector: Unable to locate an element with the xpath expression //input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]' is not a valid XPath expression.\n  (Session info: chrome=138.0.7204.169); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6ad16e935+77845]\n\tGetHandleVerifier [0x0x7ff6ad16e990+77936]\n\t(No symbol) [0x0x7ff6acf29cda]\n\t(No symbol) [0x0x7ff6acf31679]\n\t(No symbol) [0x0x7ff6acf3471c]\n\t(No symbol) [0x0x7ff6acf347ef]\n\t(No symbol) [0x0x7ff6acf7ff57]\n\t(No symbol) [0x0x7ff6acf8095c]\n\t(No symbol) [0x0x7ff6acfd3d07]\n\t(No symbol) [0x0x7ff6acfa890f]\n\t(No symbol) [0x0x7ff6acfd0b07]\n\t(No symbol) [0x0x7ff6acfa86a3]\n\t(No symbol) [0x0x7ff6acf71791]\n\t(No symbol) [0x0x7ff6acf72523]\n\tGetHandleVerifier [0x0x7ff6ad44684d+3059501]\n\tGetHandleVerifier [0x0x7ff6ad440c0d+3035885]\n\tGetHandleVerifier [0x0x7ff6ad460400+3164896]\n\tGetHandleVerifier [0x0x7ff6ad188c3e+185118]\n\tGetHandleVerifier [0x0x7ff6ad19054f+216111]\n\tGetHandleVerifier [0x0x7ff6ad1772e4+113092]\n\tGetHandleVerifier [0x0x7ff6ad177499+113529]\n\tGetHandleVerifier [0x0x7ff6ad15e298+10616]\n\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\n\tRtlUserThreadStart [0x0x7ff8419dcc91+33]", "trace": "self = <test_flow.TestERPFlowCreation object at 0x0000022AA4C89450>, barcode_purchase = 8580\n\n    def Purchase_invoice(self, barcode_purchase):\n        time.sleep(5)\n    \n        try:\n            # ============ NAVIGATION TO PURCHASE TRANSACTION ============\n            print(\"Step 5: Waiting for dashboard to load...\")\n            time.sleep(3)  # Give additional time for page to fully load\n    \n            print(\"Step 6: Clicking on 'Transactions' menu...\")\n            transactions_clicked = False\n    \n            print(\"Step 6.1: Debugging available navigation elements...\")\n            try:\n                nav_elements = self.driver.find_elements(By.XPATH, \"//a | //div[@class*='nav'] | //span[@class*='nav']\")\n                print(f\"Found {len(nav_elements)} potential navigation elements\")\n    \n                visible_nav_texts = []\n                for element in nav_elements[:15]:\n                    try:\n                        text = element.text.strip()\n                        if text and len(text) > 0 and element.is_displayed():\n                            visible_nav_texts.append(text)\n                    except:\n                        pass\n    \n                print(\"Available navigation texts:\")\n                for text in visible_nav_texts:\n                    print(f\"  - '{text}'\")\n            except Exception as e:\n                print(f\"Navigation debug failed: {e}\")\n    \n            transactions_selectors = [\n                \"//a[contains(text(), 'Transactions')]\",\n                \"//div[contains(text(), 'Transactions')]\",\n                \"//span[contains(text(), 'Transactions')]\",\n                \"//*[contains(@class, 'nav') and contains(text(), 'Transactions')]\",\n                \"//*[text()='Transactions']\",\n                \"//a[contains(@href, 'transaction')]\",\n                \"//*[@class*='menu' and contains(text(), 'Transactions')]\"\n            ]\n    \n            for i, selector in enumerate(transactions_selectors, 1):\n                try:\n                    print(f\"  Trying selector {i}: {selector}\")\n                    transactions_element = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(self.driver)\n                    actions.move_to_element(transactions_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Transactions' using selector {i}\")\n                    transactions_clicked = True\n                    time.sleep(2)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Selector {i} failed: {str(e)[:50]}...\")\n                    continue\n    \n            purchase_transaction_hovered = False\n            if not purchase_transaction_hovered:\n                print(\"⚠️ Trying alternative approach for Purchase Transaction hover...\")\n                try:\n                    all_elements = self.driver.find_elements(By.TAG_NAME, \"span\")\n                    for element in all_elements:\n                        try:\n                            element_text = element.text.strip()\n                            if 'Purchase Transaction' in element_text and element.is_displayed():\n                                actions = ActionChains(self.driver)\n                                actions.move_to_element(element).perform()\n                                print(f\"✓ Hovered over 'Purchase Transaction' using fallback method\")\n                                purchase_transaction_hovered = True\n                                time.sleep(2)\n                                break\n                        except Exception:\n                            continue\n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Transaction hover failed: {e}\")\n    \n            if not purchase_transaction_hovered:\n                raise Exception(\"Could not find or hover over 'Purchase Transaction' menu\")\n    \n            print(\"Step 8: Clicking on 'Purchase Invoice' from dropdown...\")\n    \n            purchase_invoice_clicked = False\n            purchase_invoice_selectors = [\n                \"//*[@class='dropdown-item' and contains(text(), 'Purchase Invoice')]\",\n                \"//*[contains(@class, 'menu-item') and contains(text(), 'Purchase Invoice')]\"\n            ]\n    \n            for i, selector in enumerate(purchase_invoice_selectors, 1):\n                try:\n                    print(f\"  Trying Purchase Invoice selector {i}: {selector}\")\n                    purchase_invoice_element = WebDriverWait(self.driver, 8).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(self.driver)\n                    actions.move_to_element(purchase_invoice_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Purchase Invoice' using selector {i}\")\n                    purchase_invoice_clicked = True\n                    time.sleep(3)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Purchase Invoice selector {i} failed: {str(e)[:100]}...\")\n                    continue\n    \n            if not purchase_invoice_clicked:\n                print(\"⚠️ Trying alternative approach for Purchase Invoice...\")\n                try:\n                    invoice_elements = self.driver.find_elements(By.XPATH, \"//*[contains(text(), 'Purchase Invoice')]\")\n                    print(f\"Found {len(invoice_elements)} elements containing 'Purchase Invoice'\")\n                    for element in invoice_elements:\n                        try:\n                            if element.is_displayed() and element.is_enabled():\n                                actions = ActionChains(self.driver)\n                                actions.move_to_element(element).click().perform()\n                                print(f\"✓ Clicked on 'Purchase Invoice' using fallback method\")\n                                purchase_invoice_clicked = True\n                                time.sleep(3)\n                                break\n                        except Exception:\n                            continue\n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n        except Exception  as e:\n            logger.error(f\"Failed to navigate: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                            name=\"Navigation Error\",\n                            attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to navigate to Purchase Invoice: {e}\")\n    \n        # Purchase Invoice number input\n        try:\n           with allure.step(\"Entering Purchase Invoice number\"):\n            random_invoice = \"INV-\" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n            print(f\"Generated Invoice Number: {random_invoice}\")\n    \n            try:\n                invoice_field = WebDriverWait(self.driver, 10).until(\n                    ec.element_to_be_clickable((By.ID, \"invoiceNO\"))\n                )\n                invoice_field.clear()\n                invoice_field.send_keys(random_invoice)\n                print(f\"✓ Successfully entered Invoice Number: {random_invoice}\")\n            except Exception as e:\n                print(f\"⚠️ Failed to enter Invoice Number: {e}\")\n        except Exception  as e:\n            logger.error(f\"Failed to enter Invoice Number: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Invoice Number Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter Invoice Number: {e}\")\n    \n        # Entering Account Name\n        try:\n            with allure.step(\"Entering Account Name\"):\n                account_field_selectors = [\n                    \"//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]\",\n                    \"//input[contains(@placeholder, 'Press Enter to select Account')]\",\n                    \"//*[contains(text(), 'Press Enter to select Account')]\",\n                    \"//input[contains(@class, 'form-control') and contains(@placeholder, 'Account')]\"\n                ]\n                account_field = None\n                for selector in account_field_selectors:\n                   try:\n>                     account_field = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                      )\n\ntest_flow.py:785: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022AA4C27380>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...ff6ad15e298+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8419dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')] because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]' is not a valid XPath expression.\nE         (Session info: chrome=138.0.7204.169); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6ad16e935+77845]\nE       \tGetHandleVerifier [0x0x7ff6ad16e990+77936]\nE       \t(No symbol) [0x0x7ff6acf29cda]\nE       \t(No symbol) [0x0x7ff6acf31679]\nE       \t(No symbol) [0x0x7ff6acf3471c]\nE       \t(No symbol) [0x0x7ff6acf347ef]\nE       \t(No symbol) [0x0x7ff6acf7ff57]\nE       \t(No symbol) [0x0x7ff6acf8095c]\nE       \t(No symbol) [0x0x7ff6acfd3d07]\nE       \t(No symbol) [0x0x7ff6acfa890f]\nE       \t(No symbol) [0x0x7ff6acfd0b07]\nE       \t(No symbol) [0x0x7ff6acfa86a3]\nE       \t(No symbol) [0x0x7ff6acf71791]\nE       \t(No symbol) [0x0x7ff6acf72523]\nE       \tGetHandleVerifier [0x0x7ff6ad44684d+3059501]\nE       \tGetHandleVerifier [0x0x7ff6ad440c0d+3035885]\nE       \tGetHandleVerifier [0x0x7ff6ad460400+3164896]\nE       \tGetHandleVerifier [0x0x7ff6ad188c3e+185118]\nE       \tGetHandleVerifier [0x0x7ff6ad19054f+216111]\nE       \tGetHandleVerifier [0x0x7ff6ad1772e4+113092]\nE       \tGetHandleVerifier [0x0x7ff6ad177499+113529]\nE       \tGetHandleVerifier [0x0x7ff6ad15e298+10616]\nE       \tBaseThreadInitThunk [0x0x7ff840aa7374+20]\nE       \tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSelectorException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_flow.TestERPFlowCreation object at 0x0000022AA4C89450>\n\n    def test_overall_flow(self):\n        allure.step(\"Testing overall flow of the application\")\n        self.login(\"gedehim917@decodewp.com\",\n                   \"Tebahal1!\",\n                   \"https://velvet.webredirect.himshang.com.np/#/pages/dashboard\")\n        # self.product_master(\n        #     product_item=\"meetion19\",\n        #     HS_code=\"123\",\n        #     unit=\"kg.\",\n        #     item_type=\"Servie Item\",\n        #     description=\"This is description\",\n        #     category=\"N/A\",\n        #     short_name=\"XYZ\",\n        #     purchase_price=\"120\",\n        #     sales_price=\"140\",\n        #     alt_unit=\"Each\",\n        #     conversion_factor=\"1000\",\n        #     barcode_map=\"8580\",\n        #     barcode_unit=\"kg.\")\n    \n    \n>       self.Purchase_invoice(\n                         barcode_purchase=8580)\n\ntest_flow.py:1991: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_flow.TestERPFlowCreation object at 0x0000022AA4C89450>, barcode_purchase = 8580\n\n    def Purchase_invoice(self, barcode_purchase):\n        time.sleep(5)\n    \n        try:\n            # ============ NAVIGATION TO PURCHASE TRANSACTION ============\n            print(\"Step 5: Waiting for dashboard to load...\")\n            time.sleep(3)  # Give additional time for page to fully load\n    \n            print(\"Step 6: Clicking on 'Transactions' menu...\")\n            transactions_clicked = False\n    \n            print(\"Step 6.1: Debugging available navigation elements...\")\n            try:\n                nav_elements = self.driver.find_elements(By.XPATH, \"//a | //div[@class*='nav'] | //span[@class*='nav']\")\n                print(f\"Found {len(nav_elements)} potential navigation elements\")\n    \n                visible_nav_texts = []\n                for element in nav_elements[:15]:\n                    try:\n                        text = element.text.strip()\n                        if text and len(text) > 0 and element.is_displayed():\n                            visible_nav_texts.append(text)\n                    except:\n                        pass\n    \n                print(\"Available navigation texts:\")\n                for text in visible_nav_texts:\n                    print(f\"  - '{text}'\")\n            except Exception as e:\n                print(f\"Navigation debug failed: {e}\")\n    \n            transactions_selectors = [\n                \"//a[contains(text(), 'Transactions')]\",\n                \"//div[contains(text(), 'Transactions')]\",\n                \"//span[contains(text(), 'Transactions')]\",\n                \"//*[contains(@class, 'nav') and contains(text(), 'Transactions')]\",\n                \"//*[text()='Transactions']\",\n                \"//a[contains(@href, 'transaction')]\",\n                \"//*[@class*='menu' and contains(text(), 'Transactions')]\"\n            ]\n    \n            for i, selector in enumerate(transactions_selectors, 1):\n                try:\n                    print(f\"  Trying selector {i}: {selector}\")\n                    transactions_element = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(self.driver)\n                    actions.move_to_element(transactions_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Transactions' using selector {i}\")\n                    transactions_clicked = True\n                    time.sleep(2)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Selector {i} failed: {str(e)[:50]}...\")\n                    continue\n    \n            purchase_transaction_hovered = False\n            if not purchase_transaction_hovered:\n                print(\"⚠️ Trying alternative approach for Purchase Transaction hover...\")\n                try:\n                    all_elements = self.driver.find_elements(By.TAG_NAME, \"span\")\n                    for element in all_elements:\n                        try:\n                            element_text = element.text.strip()\n                            if 'Purchase Transaction' in element_text and element.is_displayed():\n                                actions = ActionChains(self.driver)\n                                actions.move_to_element(element).perform()\n                                print(f\"✓ Hovered over 'Purchase Transaction' using fallback method\")\n                                purchase_transaction_hovered = True\n                                time.sleep(2)\n                                break\n                        except Exception:\n                            continue\n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Transaction hover failed: {e}\")\n    \n            if not purchase_transaction_hovered:\n                raise Exception(\"Could not find or hover over 'Purchase Transaction' menu\")\n    \n            print(\"Step 8: Clicking on 'Purchase Invoice' from dropdown...\")\n    \n            purchase_invoice_clicked = False\n            purchase_invoice_selectors = [\n                \"//*[@class='dropdown-item' and contains(text(), 'Purchase Invoice')]\",\n                \"//*[contains(@class, 'menu-item') and contains(text(), 'Purchase Invoice')]\"\n            ]\n    \n            for i, selector in enumerate(purchase_invoice_selectors, 1):\n                try:\n                    print(f\"  Trying Purchase Invoice selector {i}: {selector}\")\n                    purchase_invoice_element = WebDriverWait(self.driver, 8).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(self.driver)\n                    actions.move_to_element(purchase_invoice_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Purchase Invoice' using selector {i}\")\n                    purchase_invoice_clicked = True\n                    time.sleep(3)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Purchase Invoice selector {i} failed: {str(e)[:100]}...\")\n                    continue\n    \n            if not purchase_invoice_clicked:\n                print(\"⚠️ Trying alternative approach for Purchase Invoice...\")\n                try:\n                    invoice_elements = self.driver.find_elements(By.XPATH, \"//*[contains(text(), 'Purchase Invoice')]\")\n                    print(f\"Found {len(invoice_elements)} elements containing 'Purchase Invoice'\")\n                    for element in invoice_elements:\n                        try:\n                            if element.is_displayed() and element.is_enabled():\n                                actions = ActionChains(self.driver)\n                                actions.move_to_element(element).click().perform()\n                                print(f\"✓ Clicked on 'Purchase Invoice' using fallback method\")\n                                purchase_invoice_clicked = True\n                                time.sleep(3)\n                                break\n                        except Exception:\n                            continue\n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n        except Exception  as e:\n            logger.error(f\"Failed to navigate: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                            name=\"Navigation Error\",\n                            attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to navigate to Purchase Invoice: {e}\")\n    \n        # Purchase Invoice number input\n        try:\n           with allure.step(\"Entering Purchase Invoice number\"):\n            random_invoice = \"INV-\" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n            print(f\"Generated Invoice Number: {random_invoice}\")\n    \n            try:\n                invoice_field = WebDriverWait(self.driver, 10).until(\n                    ec.element_to_be_clickable((By.ID, \"invoiceNO\"))\n                )\n                invoice_field.clear()\n                invoice_field.send_keys(random_invoice)\n                print(f\"✓ Successfully entered Invoice Number: {random_invoice}\")\n            except Exception as e:\n                print(f\"⚠️ Failed to enter Invoice Number: {e}\")\n        except Exception  as e:\n            logger.error(f\"Failed to enter Invoice Number: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Invoice Number Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter Invoice Number: {e}\")\n    \n        # Entering Account Name\n        try:\n            with allure.step(\"Entering Account Name\"):\n                account_field_selectors = [\n                    \"//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]\",\n                    \"//input[contains(@placeholder, 'Press Enter to select Account')]\",\n                    \"//*[contains(text(), 'Press Enter to select Account')]\",\n                    \"//input[contains(@class, 'form-control') and contains(@placeholder, 'Account')]\"\n                ]\n                account_field = None\n                for selector in account_field_selectors:\n                   try:\n                      account_field = WebDriverWait(self.driver, 5).until(\n                        ec.element_to_be_clickable((By.XPATH, selector))\n                      )\n                      print(f\"✓ Found Account field using selector: {selector}\")\n                      break\n                   except FormFieldNotFoundError:\n                      continue\n    \n                if account_field:\n                   account_field.click()\n                   time.sleep(1)\n                   account_field.send_keys(Keys.ENTER)\n                   print(\"✓ Successfully pressed Enter on Account field to open dropdown\")\n                   print(\"⏳ Waiting for dropdown list to load completely...\")\n                   time.sleep(3)\n                else:\n                  raise Exception(\"Could not find Account field\")\n        except Exception as e:\n            logger.error(f\"Failed to Open Account Name list: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Account Name list Open Error\",\n                          attachment_type=allure.attachment_type.PNG)\n>           raise FormFieldNotFoundError(f\"Failed to open Account Name list: {e}\")\nE           test_flow.FormFieldNotFoundError: Failed to open Account Name list: Message: invalid selector: Unable to locate an element with the xpath expression //input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')] because of the following error:\nE           SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]' is not a valid XPath expression.\nE             (Session info: chrome=138.0.7204.169); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff6ad16e935+77845]\nE           \tGetHandleVerifier [0x0x7ff6ad16e990+77936]\nE           \t(No symbol) [0x0x7ff6acf29cda]\nE           \t(No symbol) [0x0x7ff6acf31679]\nE           \t(No symbol) [0x0x7ff6acf3471c]\nE           \t(No symbol) [0x0x7ff6acf347ef]\nE           \t(No symbol) [0x0x7ff6acf7ff57]\nE           \t(No symbol) [0x0x7ff6acf8095c]\nE           \t(No symbol) [0x0x7ff6acfd3d07]\nE           \t(No symbol) [0x0x7ff6acfa890f]\nE           \t(No symbol) [0x0x7ff6acfd0b07]\nE           \t(No symbol) [0x0x7ff6acfa86a3]\nE           \t(No symbol) [0x0x7ff6acf71791]\nE           \t(No symbol) [0x0x7ff6acf72523]\nE           \tGetHandleVerifier [0x0x7ff6ad44684d+3059501]\nE           \tGetHandleVerifier [0x0x7ff6ad440c0d+3035885]\nE           \tGetHandleVerifier [0x0x7ff6ad460400+3164896]\nE           \tGetHandleVerifier [0x0x7ff6ad188c3e+185118]\nE           \tGetHandleVerifier [0x0x7ff6ad19054f+216111]\nE           \tGetHandleVerifier [0x0x7ff6ad1772e4+113092]\nE           \tGetHandleVerifier [0x0x7ff6ad177499+113529]\nE           \tGetHandleVerifier [0x0x7ff6ad15e298+10616]\nE           \tBaseThreadInitThunk [0x0x7ff840aa7374+20]\nE           \tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\ntest_flow.py:807: FormFieldNotFoundError"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "steps": [{"name": "Detected 'Already Logged In' popup — logging out first", "status": "passed", "start": 1753699881943, "stop": 1753699882047}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1753699860226, "stop": 1753699900152}, {"name": "Entering Purchase Invoice number", "status": "passed", "start": 1753699957165, "stop": 1753699958121}, {"name": "Entering Account Name", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]' is not a valid XPath expression.\n  (Session info: chrome=138.0.7204.169); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6ad16e935+77845]\n\tGetHandleVerifier [0x0x7ff6ad16e990+77936]\n\t(No symbol) [0x0x7ff6acf29cda]\n\t(No symbol) [0x0x7ff6acf31679]\n\t(No symbol) [0x0x7ff6acf3471c]\n\t(No symbol) [0x0x7ff6acf347ef]\n\t(No symbol) [0x0x7ff6acf7ff57]\n\t(No symbol) [0x0x7ff6acf8095c]\n\t(No symbol) [0x0x7ff6acfd3d07]\n\t(No symbol) [0x0x7ff6acfa890f]\n\t(No symbol) [0x0x7ff6acfd0b07]\n\t(No symbol) [0x0x7ff6acfa86a3]\n\t(No symbol) [0x0x7ff6acf71791]\n\t(No symbol) [0x0x7ff6acf72523]\n\tGetHandleVerifier [0x0x7ff6ad44684d+3059501]\n\tGetHandleVerifier [0x0x7ff6ad440c0d+3035885]\n\tGetHandleVerifier [0x0x7ff6ad460400+3164896]\n\tGetHandleVerifier [0x0x7ff6ad188c3e+185118]\n\tGetHandleVerifier [0x0x7ff6ad19054f+216111]\n\tGetHandleVerifier [0x0x7ff6ad1772e4+113092]\n\tGetHandleVerifier [0x0x7ff6ad177499+113529]\n\tGetHandleVerifier [0x0x7ff6ad15e298+10616]\n\tBaseThreadInitThunk [0x0x7ff840aa7374+20]\n\tRtlUserThreadStart [0x0x7ff8419dcc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\project\\College_defense\\test_flow.py\", line 785, in Purchase_invoice\n    account_field = WebDriverWait(self.driver, 5).until(\n      ec.element_to_be_clickable((By.XPATH, selector))\n    )\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 129, in until\n    value = method(self._driver)\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 622, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 914, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1753699958121, "stop": 1753699958192}], "attachments": [{"name": "Account Name list Open Error", "source": "fbc1383a-1080-4c07-8048-239bdf06a759-attachment.png", "type": "image/png"}, {"name": "log", "source": "1483e382-ebf0-4f7d-9e03-78aae2ad8ec8-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f6144379-cf28-446f-b019-afa04c975825-attachment.txt", "type": "text/plain"}], "start": 1753699860225, "stop": 1753699958396, "uuid": "71a01988-7caf-4bd9-b66b-9011b26a996a", "historyId": "19c629496675b750fef6dc56c298a72b", "testCaseId": "19c629496675b750fef6dc56c298a72b", "fullName": "test_flow.TestERPFlowCreation#test_overall_flow", "labels": [{"name": "feature", "value": "Test ERP FLow Creation"}, {"name": "suite", "value": "test_flow"}, {"name": "subSuite", "value": "TestERPFlowCreation"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "9856-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow"}]}