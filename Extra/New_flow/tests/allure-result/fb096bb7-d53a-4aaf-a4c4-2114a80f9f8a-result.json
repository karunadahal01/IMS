{"name": "test_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x7ff656e5e415+77285]\n\tGetHandleVerifier [0x0x7ff656e5e470+77376]\n\t(No symbol) [0x0x7ff656c2989c]\n\t(No symbol) [0x0x7ff656c7064f]\n\t(No symbol) [0x0x7ff656ca84d2]\n\t(No symbol) [0x0x7ff656ca2fd3]\n\t(No symbol) [0x0x7ff656ca2099]\n\t(No symbol) [0x0x7ff656bf4895]\n\tGetHandleVerifier [0x0x7ff657141efd+3107021]\n\tGetHandleVerifier [0x0x7ff65713c29d+3083373]\n\tGetHandleVerifier [0x0x7ff65715bedd+3213485]\n\tGetHandleVerifier [0x0x7ff656e7884e+184862]\n\tGetHandleVerifier [0x0x7ff656e8055f+216879]\n\t(No symbol) [0x0x7ff656bf3890]\n\tGetHandleVerifier [0x0x7ff657276558+4370216]\n\tBaseThreadInitThunk [0x0x7ffe85327374+20]\n\tRtlUserThreadStart [0x0x7ffe8617cc91+33]", "trace": "self = <pages.product_master_page.ProductMasterPage object at 0x000001C0EC680590>, product_item = 'bcb', HS_code = '123'\nunit = 'Each', item_type = 'Inventory Item', description = 'This is description', category = 'N/A', short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'kg', conversion_factor = '1000', barcode_map = '82'\nbarcode_unit = 'Each'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def create_product_master(self, product_item, HS_code, unit, item_type,\n                              description, category, short_name, purchase_price, sales_price,\n                              alt_unit, conversion_factor, barcode_map, barcode_unit):\n        \"\"\"Create a new product master.\"\"\"\n    \n        # Navigate to Masters menu\n        try:\n            with allure.step(\"Clicking on 'Masters' menu\"):\n                Master_menu = self.driver.find_element(*self.MASTERS_MENU)\n                Master_menu.click()\n                print(\"Clicked on 'Masters'\")\n        except Exception as e:\n            logger.error(f\"Error clicking 'Masters': {e}\")\n            self.take_screenshot(\"Masters Menu Error\")\n            raise NavigationError(f\"Failed to click 'Masters': {e}\")\n        time.sleep(5)\n    \n        # Hover over Inventory Info\n        try:\n            inventory_info = self.wait.until(ec.presence_of_element_located(self.INVENTORY_INFO_MENU))\n            ActionChains(self.driver).move_to_element(inventory_info).perform()\n            time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error hovering over 'Inventory Info': {e}\")\n            self.take_screenshot(\"Inventory Info Hover Error\")\n            raise NavigationError(f\"Failed to hover over 'Inventory Info': {e}\")\n    \n        # Click Product Master\n        try:\n            with allure.step(\"Waiting for 'Product Master' to be visible and clicking it\"):\n                product_master = self.wait.until(ec.visibility_of_element_located(self.PRODUCT_MASTER_MENU))\n                product_master.click()\n                print(\"Clicked 'Product Master'\")\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Product Master': {e}\")\n            self.take_screenshot(\"Product Master Click Error\")\n            raise NavigationError(f\"Failed to click 'Product Master': {e}\")\n    \n        # Click Add Product button\n        try:\n            with allure.step(\"Clicking on 'Add Product' button\"):\n                add_product_btn = self.wait.until(ec.element_to_be_clickable(self.ADD_PRODUCT_BUTTON))\n                self.safe_click(add_product_btn, \"Add Product button\")\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Product' button: {e}\")\n            self.take_screenshot(\"Add Product Button Error\")\n            raise NavigationError(f\"Failed to click 'Add Product': {e}\")\n    \n        # Click Add Product label\n        try:\n            with allure.step(\"Clicking 'Add Product' label\"):\n                add_product = self.wait.until(ec.element_to_be_clickable(self.ADD_PRODUCT_LABEL))\n                add_product.click()\n                time.sleep(8)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Product' label: {e}\")\n            self.take_screenshot(\"Add Product Label Error\")\n            raise NavigationError(f\"Failed to click 'Add Product' label: {e}\")\n    \n        # Set page zoom\n        self.set_page_zoom()\n        time.sleep(3)\n    \n        # Handle Item Group selection\n        try:\n            with allure.step(\"Clicking on Item Group input field\"):\n                item_group_input = self.wait.until(ec.element_to_be_clickable(self.ITEM_GROUP_INPUT))\n                item_group_input.click()\n                time.sleep(5)\n                item_group_input.send_keys(Keys.ENTER)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking Item Group input field: {e}\")\n            self.take_screenshot(\"Item Group Input Error\")\n            raise FormFieldNotFoundError(f\"Failed to click Item Group input field: {e}\")\n    \n        # Handle Main Group selection\n        try:\n            with allure.step(\"Clicking on main group input field\"):\n                main_group_input = self.wait.until(ec.element_to_be_clickable(self.MAIN_GROUP_INPUT))\n                main_group_input.click()\n                main_group_input.send_keys(Keys.ENTER)\n                main_group_input.send_keys(Keys.ENTER)\n                main_group_input.send_keys(Keys.ENTER)\n                time.sleep(8)\n    \n                ok_button = self.wait.until(ec.element_to_be_clickable(self.OK_BUTTON))\n                ok_button.click()\n        except Exception as e:\n            logger.error(f\"Error clicking main group input field: {e}\")\n            self.take_screenshot(\"Main Group Input Error\")\n            raise FormFieldNotFoundError(f\"Failed to click main group input field: {e}\")\n    \n        # Enter item name\n        try:\n            with allure.step(\"Entering product item name\"):\n                item_name_input = self.wait.until(ec.element_to_be_clickable(self.ITEM_NAME_INPUT))\n                item_name_input.clear()\n                item_name_input.send_keys(product_item)\n                item_name_input.send_keys(Keys.ENTER)\n        except Exception as e:\n            logger.error(f\"Error entering product item name: {e}\")\n            self.take_screenshot(\"Item Name Input Error\")\n            raise FormFieldNotFoundError(f\"Failed to enter product item name: {e}\")\n    \n        # Fill form fields using TAB navigation\n        self._fill_basic_product_info(HS_code, unit, item_type, description, category, short_name)\n    \n        # Enter purchase price\n        try:\n            with allure.step(\"Entering purchase price\"):\n>               price_input = self.wait.until(ec.element_to_be_clickable(self.PURCHASE_PRICE_INPUT))\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n..\\pages\\product_master_page.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C0EB883380>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff656e4e298+11368]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe85327374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe8617cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=138.0.7204.169)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff656e5e415+77285]\nE       \tGetHandleVerifier [0x0x7ff656e5e470+77376]\nE       \t(No symbol) [0x0x7ff656c29a6a]\nE       \t(No symbol) [0x0x7ff656c15cf5]\nE       \t(No symbol) [0x0x7ff656c3a7fa]\nE       \t(No symbol) [0x0x7ff656cafc05]\nE       \t(No symbol) [0x0x7ff656cd0192]\nE       \t(No symbol) [0x0x7ff656ca83e3]\nE       \t(No symbol) [0x0x7ff656c71521]\nE       \t(No symbol) [0x0x7ff656c722b3]\nE       \tGetHandleVerifier [0x0x7ff657141efd+3107021]\nE       \tGetHandleVerifier [0x0x7ff65713c29d+3083373]\nE       \tGetHandleVerifier [0x0x7ff65715bedd+3213485]\nE       \tGetHandleVerifier [0x0x7ff656e7884e+184862]\nE       \tGetHandleVerifier [0x0x7ff656e8055f+216879]\nE       \tGetHandleVerifier [0x0x7ff656e67084+113236]\nE       \tGetHandleVerifier [0x0x7ff656e67239+113673]\nE       \tGetHandleVerifier [0x0x7ff656e4e298+11368]\nE       \tBaseThreadInitThunk [0x0x7ffe85327374+20]\nE       \tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_erp_flow.TestERPFlowCreation object at 0x000001C0EC631810>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"95a383a9bd243285cf93cc3ee974bf1f\")>\n\n    @allure.story(\"testing small flow\")\n    def test_flow(self, driver):\n        \"\"\"Test case for creating sales tax invoice.\"\"\"\n        with allure.step(\"Sales a product item\"):\n            # Login\n            login_page = LoginPage(driver)\n            login_page.login(DEFAULT_USERNAME, DEFAULT_PASSWORD, BASE_URL)\n    \n            # Create product master\n            product_page = ProductMasterPage(driver)\n>           product_page.create_product_master(\n                product_item=\"bcb\",\n                HS_code=\"123\",\n                unit=\"Each\",\n                item_type=\"Inventory Item\",\n                description=\"This is description\",\n                category=\"N/A\",\n                short_name=\"XYZ\",\n                purchase_price=\"120\",\n                sales_price=\"140\",\n                alt_unit=\"kg\",\n                conversion_factor=\"1000\",\n                barcode_map=\"82\",\n                barcode_unit=\"Each\"\n            )\n\ntest_erp_flow.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\product_master_page.py:163: in create_product_master\n    self.take_screenshot(\"Purchase Price Input Error\")\n..\\pages\\base_page.py:38: in take_screenshot\n    allure.attach(self.driver.get_screenshot_as_png(),\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1019: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1029: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C0EB883380>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...657276558+4370216]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe85327374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe8617cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff656e5e415+77285]\nE       \tGetHandleVerifier [0x0x7ff656e5e470+77376]\nE       \t(No symbol) [0x0x7ff656c2989c]\nE       \t(No symbol) [0x0x7ff656c7064f]\nE       \t(No symbol) [0x0x7ff656ca84d2]\nE       \t(No symbol) [0x0x7ff656ca2fd3]\nE       \t(No symbol) [0x0x7ff656ca2099]\nE       \t(No symbol) [0x0x7ff656bf4895]\nE       \tGetHandleVerifier [0x0x7ff657141efd+3107021]\nE       \tGetHandleVerifier [0x0x7ff65713c29d+3083373]\nE       \tGetHandleVerifier [0x0x7ff65715bedd+3213485]\nE       \tGetHandleVerifier [0x0x7ff656e7884e+184862]\nE       \tGetHandleVerifier [0x0x7ff656e8055f+216879]\nE       \t(No symbol) [0x0x7ff656bf3890]\nE       \tGetHandleVerifier [0x0x7ff657276558+4370216]\nE       \tBaseThreadInitThunk [0x0x7ffe85327374+20]\nE       \tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "Test case for creating sales tax invoice.", "steps": [{"name": "Sales a product item", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x7ff656e5e415+77285]\n\tGetHandleVerifier [0x0x7ff656e5e470+77376]\n\t(No symbol) [0x0x7ff656c2989c]\n\t(No symbol) [0x0x7ff656c7064f]\n\t(No symbol) [0x0x7ff656ca84d2]\n\t(No symbol) [0x0x7ff656ca2fd3]\n\t(No symbol) [0x0x7ff656ca2099]\n\t(No symbol) [0x0x7ff656bf4895]\n\tGetHandleVerifier [0x0x7ff657141efd+3107021]\n\tGetHandleVerifier [0x0x7ff65713c29d+3083373]\n\tGetHandleVerifier [0x0x7ff65715bedd+3213485]\n\tGetHandleVerifier [0x0x7ff656e7884e+184862]\n\tGetHandleVerifier [0x0x7ff656e8055f+216879]\n\t(No symbol) [0x0x7ff656bf3890]\n\tGetHandleVerifier [0x0x7ff657276558+4370216]\n\tBaseThreadInitThunk [0x0x7ffe85327374+20]\n\tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\New_flow\\tests\\test_erp_flow.py\", line 92, in test_flow\n    product_page.create_product_master(\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n        product_item=\"bcb\",\n        ^^^^^^^^^^^^^^^^^^^\n    ...<11 lines>...\n        barcode_unit=\"Each\"\n        ^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\New_flow\\pages\\product_master_page.py\", line 163, in create_product_master\n    self.take_screenshot(\"Purchase Price Input Error\")\n    ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\New_flow\\pages\\base_page.py\", line 38, in take_screenshot\n    allure.attach(self.driver.get_screenshot_as_png(),\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1019, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1029, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "steps": [{"name": "Detected 'Already Logged In' popup — logging out first", "status": "passed", "start": 1753853780006, "stop": 1753853780125}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1753853760382, "stop": 1753853798234}, {"name": "Creating product master for item: 'bcb'", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x7ff656e5e415+77285]\n\tGetHandleVerifier [0x0x7ff656e5e470+77376]\n\t(No symbol) [0x0x7ff656c2989c]\n\t(No symbol) [0x0x7ff656c7064f]\n\t(No symbol) [0x0x7ff656ca84d2]\n\t(No symbol) [0x0x7ff656ca2fd3]\n\t(No symbol) [0x0x7ff656ca2099]\n\t(No symbol) [0x0x7ff656bf4895]\n\tGetHandleVerifier [0x0x7ff657141efd+3107021]\n\tGetHandleVerifier [0x0x7ff65713c29d+3083373]\n\tGetHandleVerifier [0x0x7ff65715bedd+3213485]\n\tGetHandleVerifier [0x0x7ff656e7884e+184862]\n\tGetHandleVerifier [0x0x7ff656e8055f+216879]\n\t(No symbol) [0x0x7ff656bf3890]\n\tGetHandleVerifier [0x0x7ff657276558+4370216]\n\tBaseThreadInitThunk [0x0x7ffe85327374+20]\n\tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\New_flow\\pages\\product_master_page.py\", line 163, in create_product_master\n    self.take_screenshot(\"Purchase Price Input Error\")\n    ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\New_flow\\pages\\base_page.py\", line 38, in take_screenshot\n    allure.attach(self.driver.get_screenshot_as_png(),\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1019, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1029, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Clicking on 'Masters' menu", "status": "passed", "start": 1753853798235, "stop": 1753853799126}, {"name": "Waiting for 'Product Master' to be visible and clicking it", "status": "passed", "start": 1753853809444, "stop": 1753853814694}, {"name": "Clicking on 'Add Product' button", "status": "passed", "start": 1753853814694, "stop": 1753853824839}, {"name": "Clicking 'Add Product' label", "status": "passed", "start": 1753853824839, "stop": 1753853833110}, {"name": "Clicking on Item Group input field", "status": "passed", "start": 1753853836192, "stop": 1753853846366}, {"name": "Clicking on main group input field", "status": "passed", "start": 1753853846366, "stop": 1753853854803}, {"name": "Entering product item name", "status": "passed", "start": 1753853854804, "stop": 1753853854988}, {"name": "Entering purchase price", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=138.0.7204.169)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff656e5e415+77285]\n\tGetHandleVerifier [0x0x7ff656e5e470+77376]\n\t(No symbol) [0x0x7ff656c29a6a]\n\t(No symbol) [0x0x7ff656c15cf5]\n\t(No symbol) [0x0x7ff656c3a7fa]\n\t(No symbol) [0x0x7ff656cafc05]\n\t(No symbol) [0x0x7ff656cd0192]\n\t(No symbol) [0x0x7ff656ca83e3]\n\t(No symbol) [0x0x7ff656c71521]\n\t(No symbol) [0x0x7ff656c722b3]\n\tGetHandleVerifier [0x0x7ff657141efd+3107021]\n\tGetHandleVerifier [0x0x7ff65713c29d+3083373]\n\tGetHandleVerifier [0x0x7ff65715bedd+3213485]\n\tGetHandleVerifier [0x0x7ff656e7884e+184862]\n\tGetHandleVerifier [0x0x7ff656e8055f+216879]\n\tGetHandleVerifier [0x0x7ff656e67084+113236]\n\tGetHandleVerifier [0x0x7ff656e67239+113673]\n\tGetHandleVerifier [0x0x7ff656e4e298+11368]\n\tBaseThreadInitThunk [0x0x7ffe85327374+20]\n\tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\New_flow\\pages\\product_master_page.py\", line 157, in create_product_master\n    price_input = self.wait.until(ec.element_to_be_clickable(self.PURCHASE_PRICE_INPUT))\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 129, in until\n    value = method(self._driver)\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 622, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 914, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1753853890919, "stop": 1753853890924}], "parameters": [{"name": "product_item", "value": "'bcb'"}, {"name": "HS_code", "value": "'123'"}, {"name": "unit", "value": "'Each'"}, {"name": "item_type", "value": "'Inventory Item'"}, {"name": "description", "value": "'This is description'"}, {"name": "category", "value": "'N/A'"}, {"name": "short_name", "value": "'XYZ'"}, {"name": "purchase_price", "value": "'120'"}, {"name": "sales_price", "value": "'140'"}, {"name": "alt_unit", "value": "'kg'"}, {"name": "conversion_factor", "value": "'1000'"}, {"name": "barcode_map", "value": "'82'"}, {"name": "barcode_unit", "value": "'Each'"}], "start": 1753853798235, "stop": 1753853891073}], "start": 1753853760382, "stop": 1753853891076}], "attachments": [{"name": "log", "source": "174a5989-2e59-4549-b741-b5b91ce2a3d2-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "5ecc9be8-787b-45f4-8d98-0d59fdacc459-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "863b6699-e2f4-47a0-b23c-c2d5fd1679ff-attachment.txt", "type": "text/plain"}], "start": 1753853760382, "stop": 1753853891081, "uuid": "53da311b-1eb4-4b28-8466-a56ccc860998", "historyId": "4d9a86512e4e1b0ad33326f14d5eb7d8", "testCaseId": "4d9a86512e4e1b0ad33326f14d5eb7d8", "fullName": "test_erp_flow.TestERPFlowCreation#test_flow", "labels": [{"name": "story", "value": "testing small flow"}, {"name": "feature", "value": "Test ERP Flow Creation"}, {"name": "suite", "value": "test_erp_flow"}, {"name": "subSuite", "value": "TestERPFlowCreation"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "2120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_erp_flow"}]}