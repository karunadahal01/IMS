{"name": "test_flow_with_invalid_barcode", "status": "broken", "statusDetails": {"message": "test_purchase_invoice.ListNotFoundError: Account dropdown error: Could not find Account field", "trace": "self = <test_purchase_invoice.TestPurchaseInvoiceCreation object at 0x000001F4CE3D9D10>, barcode = 'INVALID_BARCODE'\n\n    @allure.step(\"Create purchase invoice\")\n    def purchase_invoice(self, barcode):\n        global account_field, e\n        driver = self.driver\n        actions = ActionChains(driver)\n        wait = WebDriverWait(driver, 10)\n        transactions_clicked = False\n        print(\"Step 6.1: Debugging available navigation elements...\")\n        try:\n            nav_elements = driver.find_elements(By.XPATH, \"//a | //div[@class*='nav'] | //span[@class*='nav']\")\n            print(f\"Found {len(nav_elements)} potential navigation elements\")\n    \n            visible_nav_texts = []\n            for element in nav_elements[:15]:\n                try:\n                    text = element.text.strip()\n                    if text and len(text) > 0 and element.is_displayed():\n                        visible_nav_texts.append(text)\n                except:\n                    pass\n    \n            print(\"Available navigation texts:\")\n            for text in visible_nav_texts:\n                print(f\"  - '{text}'\")\n        except Exception as e:\n            print(f\"Navigation debug failed: {e}\")\n    \n        transactions_selectors = [\n            \"//a[contains(text(), 'Transactions')]\",\n            \"//div[contains(text(), 'Transactions')]\",\n            \"//span[contains(text(), 'Transactions')]\",\n            \"//*[contains(@class, 'nav') and contains(text(), 'Transactions')]\",\n            \"//*[text()='Transactions']\",\n            \"//a[contains(@href, 'transaction')]\",\n            \"//*[@class*='menu' and contains(text(), 'Transactions')]\"\n        ]\n    \n        for i, selector in enumerate(transactions_selectors, 1):\n            try:\n                print(f\"  Trying selector {i}: {selector}\")\n                transactions_element = WebDriverWait(driver, 5).until(\n                    EC.element_to_be_clickable((By.XPATH, selector))\n                )\n                actions = ActionChains(driver)\n                actions.move_to_element(transactions_element).click().perform()\n                print(f\"✓ Successfully clicked on 'Transactions' using selector {i}\")\n                transactions_clicked = True\n                time.sleep(2)\n                break\n            except Exception as e:\n                print(f\"  ✗ Selector {i} failed: {str(e)[:50]}...\")\n                logger.error(f\"Navigation failed: {e}\")\n                allure.attach(driver.get_screenshot_as_png(),\n                                name=\"Transactions Navigation Error\",\n                                attachment_type=allure.attachment_type.PNG)\n    \n                continue\n    \n    \n        purchase_transaction_hovered = False\n        if not purchase_transaction_hovered:\n            print(\"⚠️ Trying alternative approach for Purchase Transaction hover...\")\n            try:\n                all_elements = driver.find_elements(By.TAG_NAME, \"span\")\n                for element in all_elements:\n                    try:\n                        element_text = element.text.strip()\n                        if 'Purchase Transaction' in element_text and element.is_displayed():\n                            actions = ActionChains(driver)\n                            actions.move_to_element(element).perform()\n                            print(f\"✓ Hovered over 'Purchase Transaction' using fallback method\")\n                            purchase_transaction_hovered = True\n                            time.sleep(2)\n                            break\n                    except Exception:\n                        continue\n            except Exception as e:\n                print(f\"⚠️ Fallback method for Purchase Transaction hover failed: {e}\")\n                logger.error(f\"Navigation failed: {e}\")\n                allure.attach(driver.get_screenshot_as_png(),\n                                name=\"Purchase Transaction Hover Error\",\n                                attachment_type=allure.attachment_type.PNG)\n    \n    \n        if not purchase_transaction_hovered:\n            raise NavigationError(\"Could not find or hover over 'Purchase Transaction' menu\")\n    \n        try:\n            print(\"Step 8: Clicking on 'Purchase Invoice' from dropdown...\")\n            purchase_invoice_clicked = False\n            purchase_invoice_selectors = [\n                \"//*[@class='dropdown-item' and contains(text(), 'Purchase Invoice')]\",\n                \"//*[contains(@class, 'menu-item') and contains(text(), 'Purchase Invoice')]\"\n            ]\n    \n            for i, selector in enumerate(purchase_invoice_selectors, 1):\n                try:\n                    print(f\"  Trying Purchase Invoice selector {i}: {selector}\")\n                    purchase_invoice_element = WebDriverWait(driver, 8).until(\n                        EC.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(driver)\n                    actions.move_to_element(purchase_invoice_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Purchase Invoice' using selector {i}\")\n                    purchase_invoice_clicked = True\n                    time.sleep(3)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Purchase Invoice selector {i} failed: {str(e)[:100]}...\")\n                    continue\n    \n            if not purchase_invoice_clicked:\n                print(\"⚠️ Trying alternative approach for Purchase Invoice...\")\n                try:\n                    invoice_elements = driver.find_elements(By.XPATH, \"//*[contains(text(), 'Purchase Invoice')]\")\n                    print(f\"Found {len(invoice_elements)} elements containing 'Purchase Invoice'\")\n                    for element in invoice_elements:\n                        try:\n                            if element.is_displayed() and element.is_enabled():\n                                actions = ActionChains(driver)\n                                actions.move_to_element(element).click().perform()\n                                print(f\"✓ Clicked on 'Purchase Invoice' using fallback method\")\n                                purchase_invoice_clicked = True\n                                time.sleep(3)\n                                break\n                        except Exception:\n                            continue\n    \n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n                    logger.error(f\"Navigation failed: {e}\")\n                    allure.attach(driver.get_screenshot_as_png(),\n                                    name=\"Purchase Invoice Navigation Error\",\n                                    attachment_type=allure.attachment_type.PNG)\n    \n                    raise NavigationError(f\"Failed to navigate to required menu: {e}\")\n        except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n                    logger.error(f\"Navigation failed: {e}\")\n                    allure.attach(driver.get_screenshot_as_png(),\n                                    name=\"Purchase Invoice Navigation Error\",\n                                    attachment_type=allure.attachment_type.PNG)\n                    raise NavigationError(f\"Failed to navigate to required menu: {e}\")\n    \n        # print(\"Step 8: Clicking on 'Purchase Invoice' from dropdown...\")\n         # purchase_invoice_clicked = False\n        # purchase_invoice_selectors = [\n        #     \"//*[@class='dropdown-item' and contains(text(), 'Purchase Invoice')]\",\n        #     \"//*[contains(@class, 'menu-item') and contains(text(), 'Purchase Invoice')]\"\n        # ]\n        #\n        # for i, selector in enumerate(purchase_invoice_selectors, 1):\n        #     try:\n        #         print(f\"  Trying Purchase Invoice selector {i}: {selector}\")\n        #         purchase_invoice_element = WebDriverWait(driver, 8).until(\n        #             EC.element_to_be_clickable((By.XPATH, selector))\n        #         )\n        #         actions = ActionChains(driver)\n        #         actions.move_to_element(purchase_invoice_element).click().perform()\n        #         print(f\"✓ Successfully clicked on 'Purchase Invoice' using selector {i}\")\n        #         purchase_invoice_clicked = True\n        #         time.sleep(3)\n        #         break\n        #     except Exception as e:\n        #         print(f\"  ✗ Purchase Invoice selector {i} failed: {str(e)[:50]}...\")\n        #         logger.error(f\"Navigation failed: {e}\")\n        #         allure.attach(driver.get_screenshot_as_png(),\n        #                       name=\"Purchase Invoice Navigation Error\",\n        #                       attachment_type=allure.attachment_type.PNG)\n        #         raise NavigationError(f\"Failed to navigate to required menu: {e}\")\n        #\n        # if not purchase_invoice_clicked:\n        #     print(\"⚠️ Trying alternative approach for Purchase Invoice...\")\n        #     try:\n        #         invoice_elements = driver.find_elements(By.XPATH, \"//*[contains(text(), 'Purchase Invoice')]\")\n        #         print(f\"Found {len(invoice_elements)} elements containing 'Purchase Invoice'\")\n        #         for element in invoice_elements:\n        #             try:\n        #                 if element.is_displayed() and element.is_enabled():\n        #                     actions = ActionChains(driver)\n        #                     actions.move_to_element(element).click().perform()\n        #                     print(f\"✓ Clicked on 'Purchase Invoice' using fallback method\")\n        #                     purchase_invoice_clicked = True\n        #                     time.sleep(3)\n        #                     break\n        #             except Exception:\n        #                 continue\n        #     except Exception as e:\n        #         print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n        #         logger.error(f\"Navigation failed: {e}\")\n        #         allure.attach(driver.get_screenshot_as_png(),\n        #                       name=\"Purchase Invoice Navigation Error\",\n        #                       attachment_type=allure.attachment_type.PNG)\n        #         raise NavigationError(f\"Failed to navigate to required menu: {e}\")\n        time.sleep(8)\n        # Fill form\n        try:\n            invoice_no = \"INV-\" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n            logger.info(f\"Generated Invoice Number: {invoice_no}\")\n    \n            invoice_field = wait.until(EC.element_to_be_clickable((By.ID, \"invoiceNO\")))\n            invoice_field.clear()\n            invoice_field.send_keys(invoice_no)\n    \n        except Exception as e:\n            logger.error(f\"Invoice field not found: {e}\")\n            allure.attach(driver.get_screenshot_as_png(),\n                          name=\"Invoice Field Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Invoice field error: {e}\")\n    \n        try:\n            account_field_selectors = [\n                \"//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]\",\n                \"//input[contains(@placeholder, 'Press Enter to select Account')]\",\n                \"//*[contains(text(), 'Press Enter to select Account')]\",\n                \"//input[contains(@class, 'form-control') and contains(@placeholder, 'Account')]\"\n            ]\n            account_field = None\n            for selector in account_field_selectors:\n                try:\n                    account_field = WebDriverWait(driver, 5).until(\n                        EC.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    print(f\"✓ Found Account field using selector: {selector}\")\n                    break\n                except:\n                    continue\n    \n            if account_field:\n                account_field.click()\n                time.sleep(4)\n                account_field.send_keys(Keys.ENTER)\n                print(\"✓ Successfully pressed Enter on Account field to open dropdown\")\n                print(\"⏳ Waiting for dropdown list to load completely...\")\n                time.sleep(8)\n            else:\n>               raise ListNotFoundError(\"Could not find Account field\")\nE               test_purchase_invoice.ListNotFoundError: Could not find Account field\n\ntest_purchase_invoice.py:442: ListNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_purchase_invoice.TestPurchaseInvoiceCreation object at 0x000001F4CE3D9D10>\n\n    def test_flow_with_invalid_barcode(self):\n        self.login(TEST_CONFIG[\"username\"], TEST_CONFIG[\"password\"], TEST_CONFIG[\"url\"])\n>       self.purchase_invoice(barcode=\"INVALID_BARCODE\")\n\ntest_purchase_invoice.py:734: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_purchase_invoice.TestPurchaseInvoiceCreation object at 0x000001F4CE3D9D10>, barcode = 'INVALID_BARCODE'\n\n    @allure.step(\"Create purchase invoice\")\n    def purchase_invoice(self, barcode):\n        global account_field, e\n        driver = self.driver\n        actions = ActionChains(driver)\n        wait = WebDriverWait(driver, 10)\n        transactions_clicked = False\n        print(\"Step 6.1: Debugging available navigation elements...\")\n        try:\n            nav_elements = driver.find_elements(By.XPATH, \"//a | //div[@class*='nav'] | //span[@class*='nav']\")\n            print(f\"Found {len(nav_elements)} potential navigation elements\")\n    \n            visible_nav_texts = []\n            for element in nav_elements[:15]:\n                try:\n                    text = element.text.strip()\n                    if text and len(text) > 0 and element.is_displayed():\n                        visible_nav_texts.append(text)\n                except:\n                    pass\n    \n            print(\"Available navigation texts:\")\n            for text in visible_nav_texts:\n                print(f\"  - '{text}'\")\n        except Exception as e:\n            print(f\"Navigation debug failed: {e}\")\n    \n        transactions_selectors = [\n            \"//a[contains(text(), 'Transactions')]\",\n            \"//div[contains(text(), 'Transactions')]\",\n            \"//span[contains(text(), 'Transactions')]\",\n            \"//*[contains(@class, 'nav') and contains(text(), 'Transactions')]\",\n            \"//*[text()='Transactions']\",\n            \"//a[contains(@href, 'transaction')]\",\n            \"//*[@class*='menu' and contains(text(), 'Transactions')]\"\n        ]\n    \n        for i, selector in enumerate(transactions_selectors, 1):\n            try:\n                print(f\"  Trying selector {i}: {selector}\")\n                transactions_element = WebDriverWait(driver, 5).until(\n                    EC.element_to_be_clickable((By.XPATH, selector))\n                )\n                actions = ActionChains(driver)\n                actions.move_to_element(transactions_element).click().perform()\n                print(f\"✓ Successfully clicked on 'Transactions' using selector {i}\")\n                transactions_clicked = True\n                time.sleep(2)\n                break\n            except Exception as e:\n                print(f\"  ✗ Selector {i} failed: {str(e)[:50]}...\")\n                logger.error(f\"Navigation failed: {e}\")\n                allure.attach(driver.get_screenshot_as_png(),\n                                name=\"Transactions Navigation Error\",\n                                attachment_type=allure.attachment_type.PNG)\n    \n                continue\n    \n    \n        purchase_transaction_hovered = False\n        if not purchase_transaction_hovered:\n            print(\"⚠️ Trying alternative approach for Purchase Transaction hover...\")\n            try:\n                all_elements = driver.find_elements(By.TAG_NAME, \"span\")\n                for element in all_elements:\n                    try:\n                        element_text = element.text.strip()\n                        if 'Purchase Transaction' in element_text and element.is_displayed():\n                            actions = ActionChains(driver)\n                            actions.move_to_element(element).perform()\n                            print(f\"✓ Hovered over 'Purchase Transaction' using fallback method\")\n                            purchase_transaction_hovered = True\n                            time.sleep(2)\n                            break\n                    except Exception:\n                        continue\n            except Exception as e:\n                print(f\"⚠️ Fallback method for Purchase Transaction hover failed: {e}\")\n                logger.error(f\"Navigation failed: {e}\")\n                allure.attach(driver.get_screenshot_as_png(),\n                                name=\"Purchase Transaction Hover Error\",\n                                attachment_type=allure.attachment_type.PNG)\n    \n    \n        if not purchase_transaction_hovered:\n            raise NavigationError(\"Could not find or hover over 'Purchase Transaction' menu\")\n    \n        try:\n            print(\"Step 8: Clicking on 'Purchase Invoice' from dropdown...\")\n            purchase_invoice_clicked = False\n            purchase_invoice_selectors = [\n                \"//*[@class='dropdown-item' and contains(text(), 'Purchase Invoice')]\",\n                \"//*[contains(@class, 'menu-item') and contains(text(), 'Purchase Invoice')]\"\n            ]\n    \n            for i, selector in enumerate(purchase_invoice_selectors, 1):\n                try:\n                    print(f\"  Trying Purchase Invoice selector {i}: {selector}\")\n                    purchase_invoice_element = WebDriverWait(driver, 8).until(\n                        EC.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    actions = ActionChains(driver)\n                    actions.move_to_element(purchase_invoice_element).click().perform()\n                    print(f\"✓ Successfully clicked on 'Purchase Invoice' using selector {i}\")\n                    purchase_invoice_clicked = True\n                    time.sleep(3)\n                    break\n                except Exception as e:\n                    print(f\"  ✗ Purchase Invoice selector {i} failed: {str(e)[:100]}...\")\n                    continue\n    \n            if not purchase_invoice_clicked:\n                print(\"⚠️ Trying alternative approach for Purchase Invoice...\")\n                try:\n                    invoice_elements = driver.find_elements(By.XPATH, \"//*[contains(text(), 'Purchase Invoice')]\")\n                    print(f\"Found {len(invoice_elements)} elements containing 'Purchase Invoice'\")\n                    for element in invoice_elements:\n                        try:\n                            if element.is_displayed() and element.is_enabled():\n                                actions = ActionChains(driver)\n                                actions.move_to_element(element).click().perform()\n                                print(f\"✓ Clicked on 'Purchase Invoice' using fallback method\")\n                                purchase_invoice_clicked = True\n                                time.sleep(3)\n                                break\n                        except Exception:\n                            continue\n    \n                except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n                    logger.error(f\"Navigation failed: {e}\")\n                    allure.attach(driver.get_screenshot_as_png(),\n                                    name=\"Purchase Invoice Navigation Error\",\n                                    attachment_type=allure.attachment_type.PNG)\n    \n                    raise NavigationError(f\"Failed to navigate to required menu: {e}\")\n        except Exception as e:\n                    print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n                    logger.error(f\"Navigation failed: {e}\")\n                    allure.attach(driver.get_screenshot_as_png(),\n                                    name=\"Purchase Invoice Navigation Error\",\n                                    attachment_type=allure.attachment_type.PNG)\n                    raise NavigationError(f\"Failed to navigate to required menu: {e}\")\n    \n        # print(\"Step 8: Clicking on 'Purchase Invoice' from dropdown...\")\n         # purchase_invoice_clicked = False\n        # purchase_invoice_selectors = [\n        #     \"//*[@class='dropdown-item' and contains(text(), 'Purchase Invoice')]\",\n        #     \"//*[contains(@class, 'menu-item') and contains(text(), 'Purchase Invoice')]\"\n        # ]\n        #\n        # for i, selector in enumerate(purchase_invoice_selectors, 1):\n        #     try:\n        #         print(f\"  Trying Purchase Invoice selector {i}: {selector}\")\n        #         purchase_invoice_element = WebDriverWait(driver, 8).until(\n        #             EC.element_to_be_clickable((By.XPATH, selector))\n        #         )\n        #         actions = ActionChains(driver)\n        #         actions.move_to_element(purchase_invoice_element).click().perform()\n        #         print(f\"✓ Successfully clicked on 'Purchase Invoice' using selector {i}\")\n        #         purchase_invoice_clicked = True\n        #         time.sleep(3)\n        #         break\n        #     except Exception as e:\n        #         print(f\"  ✗ Purchase Invoice selector {i} failed: {str(e)[:50]}...\")\n        #         logger.error(f\"Navigation failed: {e}\")\n        #         allure.attach(driver.get_screenshot_as_png(),\n        #                       name=\"Purchase Invoice Navigation Error\",\n        #                       attachment_type=allure.attachment_type.PNG)\n        #         raise NavigationError(f\"Failed to navigate to required menu: {e}\")\n        #\n        # if not purchase_invoice_clicked:\n        #     print(\"⚠️ Trying alternative approach for Purchase Invoice...\")\n        #     try:\n        #         invoice_elements = driver.find_elements(By.XPATH, \"//*[contains(text(), 'Purchase Invoice')]\")\n        #         print(f\"Found {len(invoice_elements)} elements containing 'Purchase Invoice'\")\n        #         for element in invoice_elements:\n        #             try:\n        #                 if element.is_displayed() and element.is_enabled():\n        #                     actions = ActionChains(driver)\n        #                     actions.move_to_element(element).click().perform()\n        #                     print(f\"✓ Clicked on 'Purchase Invoice' using fallback method\")\n        #                     purchase_invoice_clicked = True\n        #                     time.sleep(3)\n        #                     break\n        #             except Exception:\n        #                 continue\n        #     except Exception as e:\n        #         print(f\"⚠️ Fallback method for Purchase Invoice failed: {e}\")\n        #         logger.error(f\"Navigation failed: {e}\")\n        #         allure.attach(driver.get_screenshot_as_png(),\n        #                       name=\"Purchase Invoice Navigation Error\",\n        #                       attachment_type=allure.attachment_type.PNG)\n        #         raise NavigationError(f\"Failed to navigate to required menu: {e}\")\n        time.sleep(8)\n        # Fill form\n        try:\n            invoice_no = \"INV-\" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n            logger.info(f\"Generated Invoice Number: {invoice_no}\")\n    \n            invoice_field = wait.until(EC.element_to_be_clickable((By.ID, \"invoiceNO\")))\n            invoice_field.clear()\n            invoice_field.send_keys(invoice_no)\n    \n        except Exception as e:\n            logger.error(f\"Invoice field not found: {e}\")\n            allure.attach(driver.get_screenshot_as_png(),\n                          name=\"Invoice Field Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Invoice field error: {e}\")\n    \n        try:\n            account_field_selectors = [\n                \"//input[preceding-sibling::label[contains(text(), 'Account')] or @placeholder*='Account' or contains(@formcontrolname, 'account')]\",\n                \"//input[contains(@placeholder, 'Press Enter to select Account')]\",\n                \"//*[contains(text(), 'Press Enter to select Account')]\",\n                \"//input[contains(@class, 'form-control') and contains(@placeholder, 'Account')]\"\n            ]\n            account_field = None\n            for selector in account_field_selectors:\n                try:\n                    account_field = WebDriverWait(driver, 5).until(\n                        EC.element_to_be_clickable((By.XPATH, selector))\n                    )\n                    print(f\"✓ Found Account field using selector: {selector}\")\n                    break\n                except:\n                    continue\n    \n            if account_field:\n                account_field.click()\n                time.sleep(4)\n                account_field.send_keys(Keys.ENTER)\n                print(\"✓ Successfully pressed Enter on Account field to open dropdown\")\n                print(\"⏳ Waiting for dropdown list to load completely...\")\n                time.sleep(8)\n            else:\n                raise ListNotFoundError(\"Could not find Account field\")\n    \n        except Exception as e:\n            print(f\"⚠️ Failed to open Account dropdown using primary method: {e}\")\n            logger.error(f\"failed to open account dropdown: {e}\")\n            allure.attach(driver.get_screenshot_as_png(),\n                          name=\"Account Dropdown Error\",\n                          attachment_type=allure.attachment_type.PNG)\n>           raise ListNotFoundError(f\"Account dropdown error: {e}\")\nE           test_purchase_invoice.ListNotFoundError: Account dropdown error: Could not find Account field\n\ntest_purchase_invoice.py:450: ListNotFoundError"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "steps": [{"name": "Detected 'Already Logged In' popup — logging out first", "status": "passed", "start": 1752060337874, "stop": 1752060337953}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1752060326511, "stop": 1752060356040}, {"name": "Create purchase invoice", "status": "broken", "statusDetails": {"message": "test_purchase_invoice.ListNotFoundError: Account dropdown error: Could not find Account field\n", "trace": "  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Flow_Addproduct_purchase_sales\\test_purchase_invoice.py\", line 450, in purchase_invoice\n    raise ListNotFoundError(f\"Account dropdown error: {e}\")\n"}, "attachments": [{"name": "Transactions Navigation Error", "source": "b4f9da50-5cf0-4b80-98f8-2cb9514d6e93-attachment.png", "type": "image/png"}, {"name": "Transactions Navigation Error", "source": "45448a6f-84f4-43b9-9185-a25820a54271-attachment.png", "type": "image/png"}, {"name": "Account Dropdown Error", "source": "e59f6873-b900-4cab-9911-803eb8c1a4d0-attachment.png", "type": "image/png"}], "parameters": [{"name": "barcode", "value": "'INVALID_BARCODE'"}], "start": 1752060356040, "stop": 1752060439779}], "attachments": [{"name": "log", "source": "6afadd7c-30ba-48b3-8b83-e31fa1c222f7-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "26bb7d85-a900-4c23-930f-eb2bdbdbf7f7-attachment.txt", "type": "text/plain"}], "start": 1752060326511, "stop": 1752060439783, "uuid": "3b4cce4b-9635-4c36-a244-e31e3584fccc", "historyId": "bd12315bb948b7da0062c04cbf42be63", "testCaseId": "bd12315bb948b7da0062c04cbf42be63", "fullName": "test_purchase_invoice.TestPurchaseInvoiceCreation#test_flow_with_invalid_barcode", "labels": [{"name": "feature", "value": "Purchase Invoice Creation"}, {"name": "suite", "value": "test_purchase_invoice"}, {"name": "subSuite", "value": "TestPurchaseInvoiceCreation"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "11812-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_purchase_invoice"}]}