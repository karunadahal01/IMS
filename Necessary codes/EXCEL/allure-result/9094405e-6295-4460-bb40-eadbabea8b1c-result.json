{"name": "test_product_master_from_excel[row0]", "status": "broken", "statusDetails": {"message": "test_product_master.PopupHandlingError: Failed to handle 'Add Another Product' alert: Alert Text: Data Saved Successfully. Do you want to continue adding products to this group ?\nMessage: unexpected alert open: {Alert text : Data Saved Successfully. Do you want to continue adding products to this group ?}\n  (Session info: chrome=138.0.7204.101)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff71a1a6f75+76917]\n\tGetHandleVerifier [0x0x7ff71a1a6fd0+77008]\n\t(No symbol) [0x0x7ff719f59dea]\n\t(No symbol) [0x0x7ff71a00110c]\n\t(No symbol) [0x0x7ff719fd8243]\n\t(No symbol) [0x0x7ff719fa1431]\n\t(No symbol) [0x0x7ff719fa21c3]\n\tGetHandleVerifier [0x0x7ff71a47d2ad+3051437]\n\tGetHandleVerifier [0x0x7ff71a477903+3028483]\n\tGetHandleVerifier [0x0x7ff71a49589d+3151261]\n\tGetHandleVerifier [0x0x7ff71a1c183e+185662]\n\tGetHandleVerifier [0x0x7ff71a1c96ff+218111]\n\tGetHandleVerifier [0x0x7ff71a1afaf4+112628]\n\tGetHandleVerifier [0x0x7ff71a1afca9+113065]\n\tGetHandleVerifier [0x0x7ff71a196c78+10616]\n\tBaseThreadInitThunk [0x0x7ffd2c157374+20]\n\tRtlUserThreadStart [0x0x7ffd2c85cc91+33]", "trace": "self = <test_product_master.TestProductMaster object at 0x000001C564FCA5D0>, product_item = 'tested 10', HS_code = '123'\nunit = 'kg.', item_type = 'Service Item', description = 'This is description', category = nan, short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'Each', conversion_factor = '1000', barcode_map = '67'\nbarcode_unit = 'kg.'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def product_master(self, product_item, HS_code, unit, item_type,\n                       description, category, short_name, purchase_price, sales_price,\n                       alt_unit, conversion_factor,\n                       barcode_map, barcode_unit):\n        wait = WebDriverWait(self.driver, 10)\n        try:\n            Master_menu = self.driver.find_element(By.LINK_TEXT, \"Masters\")\n            Master_menu.click()\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Masters Menu Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Masters': {e}\")\n        time.sleep(5)\n    \n        try:\n            inventory_info = wait.until(ec.presence_of_element_located((By.LINK_TEXT, \"Inventory Info\")))\n            ActionChains(self.driver).move_to_element(inventory_info).perform()\n            time.sleep(5)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Inventory Info Hover Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to hover over 'Inventory Info': {e}\")\n    \n        try:\n            product_master_link = wait.until(ec.visibility_of_element_located((By.LINK_TEXT, \"Product Master\")))\n            product_master_link.click()\n            time.sleep(5)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Product Master Click Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Product Master': {e}\")\n    \n        try:\n            add_product_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Add Product')]\")))\n            self.safe_click(add_product_btn, \"Add Product button\")\n            time.sleep(10)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Add Product Button Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product': {e}\")\n    \n        try:\n            add_product_label = wait.until(ec.element_to_be_clickable((By.XPATH, \"//label[contains(text(), 'Add Product')]\")))\n            add_product_label.click()\n            time.sleep(8)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Add Product Label Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product' label: {e}\")\n    \n        self.driver.execute_script(\"document.body.style.zoom='80%'\")\n        time.sleep(3)\n    \n        # Click on the Item Group input field\n        try:\n            with allure.step(\"Clicking on Item Group input field\"):\n                item_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='-- Press Enter For Item Group --']\")))\n                item_group_input.click()\n                time.sleep(5)\n                # Press Enter on the Item Group field\n                item_group_input.send_keys(Keys.ENTER)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking Item Group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click Item Group input field: {e}\")\n        wait = WebDriverWait(self.driver, 5)\n    \n        # Find and click the main group input field\n        try:\n            with allure.step(\"Clicking on main group input field\"):\n                main_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//ng-select//input[@type='text']\")))\n                main_group_input.click()\n                # Send Enter key to trigger dropdown\n                main_group_input.send_keys(Keys.ENTER)\n                # Send Enter again to select the first dropdown option\n                main_group_input.send_keys(Keys.ENTER)\n                main_group_input.send_keys(Keys.ENTER)\n    \n                time.sleep(8)\n    \n                ok_button = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//button[.//span[normalize-space()='Ok']]\")))\n                ok_button.click()\n        except Exception as e:\n            logger.error(f\"Error clicking main group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Main Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click main group input field: {e}\")\n    \n        # Find the input by placeholder and enter item name\n    \n        try:\n            with allure.step(\"Entering product item name\"):\n                # Find the input by placeholder and enter item name\n                item_name_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Enter Item Name']\")))\n                item_name_input.clear()\n                item_name_input.send_keys(product_item)\n                item_name_input.send_keys(Keys.ENTER)\n        except Exception as e:\n            logger.error(f\"Error entering product item name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter product item name: {e}\")\n    \n        # Press Tab from keyboard\n        self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        time.sleep(5)\n    \n        # Enter HSC code\n        try:\n            with allure.step(\"Entering HSC code\"):\n                self.driver.switch_to.active_element.send_keys(HS_code, Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error entering HSC code: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"HSC Code Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter HSC code: {e}\")\n    \n        # Click on vatable check box\n        try:\n            with allure.step(\"Clicking on vatable checkbox\"):\n                wait = WebDriverWait(self.driver, 10)\n                checkbox = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='checkbox' and contains(@class, 'ng-pristine')]\")))\n                checkbox.click()\n                time.sleep(5)\n    \n                # press TAB\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error clicking vatable checkbox: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Vatable Checkbox Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click vatable checkbox: {e}\")\n    \n        # To select Unit\n        try:\n            with allure.step(\"Selecting unit\"):\n                self.driver.switch_to.active_element.send_keys(unit, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting unit: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Unit Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select unit: {e}\")\n    \n        # To select item type\n        try:\n            with allure.step(\"Selecting item type\"):\n                self.driver.switch_to.active_element.send_keys(item_type, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting item type: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Type Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select item type: {e}\")\n    \n        # Description\n        try:\n            with allure.step(\"Entering description\"):\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                self.driver.switch_to.active_element.send_keys(description, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering description: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Description Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter description: {e}\")\n    \n        # Category\n        try:\n            with allure.step(\"Entering category\"):\n                self.driver.switch_to.active_element.send_keys(category, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering category: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Category Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter category: {e}\")\n    \n        # Short name\n        try:\n            with allure.step(\"Entering short name\"):\n                self.driver.switch_to.active_element.send_keys(short_name, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering short name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Short Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter short name: {e}\")\n    \n        # Purchase price\n        try:\n            with allure.step(\"Entering purchase price\"):\n                price_input = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='number' and @placeholder='Enter Purchase Price']\")))\n                price_input.clear()\n                price_input.send_keys(purchase_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering purchase price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Purchase Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter purchase price: {e}\")\n    \n        # Sales price\n        try:\n            with allure.step(\"Entering sales price\"):\n                number_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and @placeholder='0']\")))\n                number_input.clear()\n                number_input.send_keys(sales_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering sales price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Sales Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter sales price: {e}\")\n    \n        # Alternate Unit\n        try:\n            with allure.step(\"Navigating to Alternate Unit tab\"):\n                alternate_unit_tab = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Alternate Unit']\")))\n                alternate_unit_tab.click()\n                time.sleep(8)\n    \n        except Exception as e:\n            logger.error(f\"Error clicking Alternate Unit tab: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Alternate Unit Tab Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click Alternate Unit tab: {e}\")\n    \n        # Click on \"Add Alternate Unit\" button\n        try:\n            with allure.step(\"Clicking on 'Add Alternate Unit' button\"):\n                # Select unit: gm\n                select_element = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//select[contains(@class, 'ng-pristine')]\")))\n                select_element.click()\n                self.driver.switch_to.active_element.send_keys(alt_unit, Keys.TAB)\n                print(\"Unit selected.\")\n    \n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Alternate Unit' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Alternate Unit Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Alternate Unit': {e}\")\n    \n        # Enter conversion factor\n        try:\n            with allure.step(\"Entering conversion factor\"):\n                input_field = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and contains(@class, 'ng-valid')]\")))\n                input_field.clear()\n                input_field.send_keys(conversion_factor)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering conversion factor: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Conversion Factor Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter conversion factor: {e}\")\n    \n        # Click on \"Add Barcode\" mapping tab\n        try:\n            with allure.step(\"Clicking on 'Add Barcode' button\"):\n                # Barcode Mapping tab\n                barcode_mapping = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Barcode Mapping']\")))\n                barcode_mapping.click()\n                time.sleep(8)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Barcode' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Barcode Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Barcode': {e}\")\n    \n        # Enter barcode\n        try:\n            with allure.step(\"Entering barcode\"):\n                barcode_input = wait.until(\n                    ec.presence_of_element_located((By.XPATH, \"//input[@placeholder='Enter Bar Code']\")))\n                barcode_input.clear()\n                barcode_input.send_keys(barcode_map)\n                barcode_input.click()\n                time.sleep(5)\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                time.sleep(5)\n    \n                select_element = self.driver.find_element(By.CSS_SELECTOR, 'div.col-2.p-0 select')\n                select_element.click()\n                self.driver.switch_to.active_element.send_keys(barcode_unit, Keys.TAB)\n                time.sleep(5)\n    \n        except Exception as e:\n            logger.error(f\"Error entering barcode: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Barcode Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter barcode: {e}\")\n    \n        # Click on \"Map\" button\n        try:\n            with allure.step(\"Clicking on 'Map' button\"):\n                wait = WebDriverWait(self.driver, 10)\n                map_button = wait.until(ec.element_to_be_clickable((By.ID, \"map\")))\n                map_button.click()\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Map' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Map Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Map': {e}\")\n    \n        # Remaining form filling...\n        # (You can paste your detailed form filling steps here exactly as you had them.)\n    \n        # Click Save and handle alert\n        try:\n            save_button = self.driver.find_element(By.XPATH, \"//button[contains(text(),'SAVE')]\")\n            save_button.click()\n            time.sleep(10)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Save Button Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Save': {e}\")\n        try:\n            with allure.step(\"Handling 'Do you wanna add another product?' alert\"):\n>               body = self.driver.find_element(By.TAG_NAME, \"body\")\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_product_master.py:1068: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C564FC6A50>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Data Saved Successfully. Do you want to continue adding products t...ff71a196c78+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd2c157374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd2c85cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Data Saved Successfully. Do you want to continue adding products to this group ?\nE           Message: unexpected alert open: {Alert text : Data Saved Successfully. Do you want to continue adding products to this group ?}\nE             (Session info: chrome=138.0.7204.101)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff71a1a6f75+76917]\nE           \tGetHandleVerifier [0x0x7ff71a1a6fd0+77008]\nE           \t(No symbol) [0x0x7ff719f59dea]\nE           \t(No symbol) [0x0x7ff71a00110c]\nE           \t(No symbol) [0x0x7ff719fd8243]\nE           \t(No symbol) [0x0x7ff719fa1431]\nE           \t(No symbol) [0x0x7ff719fa21c3]\nE           \tGetHandleVerifier [0x0x7ff71a47d2ad+3051437]\nE           \tGetHandleVerifier [0x0x7ff71a477903+3028483]\nE           \tGetHandleVerifier [0x0x7ff71a49589d+3151261]\nE           \tGetHandleVerifier [0x0x7ff71a1c183e+185662]\nE           \tGetHandleVerifier [0x0x7ff71a1c96ff+218111]\nE           \tGetHandleVerifier [0x0x7ff71a1afaf4+112628]\nE           \tGetHandleVerifier [0x0x7ff71a1afca9+113065]\nE           \tGetHandleVerifier [0x0x7ff71a196c78+10616]\nE           \tBaseThreadInitThunk [0x0x7ffd2c157374+20]\nE           \tRtlUserThreadStart [0x0x7ffd2c85cc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:231: UnexpectedAlertPresentException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_product_master.TestProductMaster object at 0x000001C564FCA5D0>\nrow = {'HS_code': 123, 'alt_unit': 'Each', 'barcode_map': 67, 'barcode_unit': 'kg.', ...}\n\n    @pytest.mark.parametrize(\"row\", pd.read_excel(\"products.xlsx\").to_dict('records'))\n    def test_product_master_from_excel(self, row):\n        with allure.step(f\"Creating product item from Excel row: {row}\"):\n            self.login(\"gedehim917@decodewp.com\",\n                       \"Tebahal1!\",\n                       \"https://velvet.webredirect.himshang.com.np/#/pages/dashboard\")\n    \n>           self.product_master(\n                product_item=row['product_item'],\n                HS_code=str(row['HS_code']),\n                unit=row['unit'],\n                item_type=row['item_type'],\n                description=row['description'],\n                category=row['category'],\n                short_name=row['short_name'],\n                purchase_price=str(row['purchase_price']),\n                sales_price=str(row['sales_price']),\n                alt_unit=row['alt_unit'],\n                conversion_factor=str(row['conversion_factor']),\n                barcode_map=str(row['barcode_map']),\n                barcode_unit=row['barcode_unit']\n            )\n\ntest_product_master.py:1094: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_product_master.TestProductMaster object at 0x000001C564FCA5D0>, product_item = 'tested 10', HS_code = '123'\nunit = 'kg.', item_type = 'Service Item', description = 'This is description', category = nan, short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'Each', conversion_factor = '1000', barcode_map = '67'\nbarcode_unit = 'kg.'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def product_master(self, product_item, HS_code, unit, item_type,\n                       description, category, short_name, purchase_price, sales_price,\n                       alt_unit, conversion_factor,\n                       barcode_map, barcode_unit):\n        wait = WebDriverWait(self.driver, 10)\n        try:\n            Master_menu = self.driver.find_element(By.LINK_TEXT, \"Masters\")\n            Master_menu.click()\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Masters Menu Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Masters': {e}\")\n        time.sleep(5)\n    \n        try:\n            inventory_info = wait.until(ec.presence_of_element_located((By.LINK_TEXT, \"Inventory Info\")))\n            ActionChains(self.driver).move_to_element(inventory_info).perform()\n            time.sleep(5)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Inventory Info Hover Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to hover over 'Inventory Info': {e}\")\n    \n        try:\n            product_master_link = wait.until(ec.visibility_of_element_located((By.LINK_TEXT, \"Product Master\")))\n            product_master_link.click()\n            time.sleep(5)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Product Master Click Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Product Master': {e}\")\n    \n        try:\n            add_product_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Add Product')]\")))\n            self.safe_click(add_product_btn, \"Add Product button\")\n            time.sleep(10)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Add Product Button Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product': {e}\")\n    \n        try:\n            add_product_label = wait.until(ec.element_to_be_clickable((By.XPATH, \"//label[contains(text(), 'Add Product')]\")))\n            add_product_label.click()\n            time.sleep(8)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Add Product Label Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product' label: {e}\")\n    \n        self.driver.execute_script(\"document.body.style.zoom='80%'\")\n        time.sleep(3)\n    \n        # Click on the Item Group input field\n        try:\n            with allure.step(\"Clicking on Item Group input field\"):\n                item_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='-- Press Enter For Item Group --']\")))\n                item_group_input.click()\n                time.sleep(5)\n                # Press Enter on the Item Group field\n                item_group_input.send_keys(Keys.ENTER)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking Item Group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click Item Group input field: {e}\")\n        wait = WebDriverWait(self.driver, 5)\n    \n        # Find and click the main group input field\n        try:\n            with allure.step(\"Clicking on main group input field\"):\n                main_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//ng-select//input[@type='text']\")))\n                main_group_input.click()\n                # Send Enter key to trigger dropdown\n                main_group_input.send_keys(Keys.ENTER)\n                # Send Enter again to select the first dropdown option\n                main_group_input.send_keys(Keys.ENTER)\n                main_group_input.send_keys(Keys.ENTER)\n    \n                time.sleep(8)\n    \n                ok_button = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//button[.//span[normalize-space()='Ok']]\")))\n                ok_button.click()\n        except Exception as e:\n            logger.error(f\"Error clicking main group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Main Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click main group input field: {e}\")\n    \n        # Find the input by placeholder and enter item name\n    \n        try:\n            with allure.step(\"Entering product item name\"):\n                # Find the input by placeholder and enter item name\n                item_name_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Enter Item Name']\")))\n                item_name_input.clear()\n                item_name_input.send_keys(product_item)\n                item_name_input.send_keys(Keys.ENTER)\n        except Exception as e:\n            logger.error(f\"Error entering product item name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter product item name: {e}\")\n    \n        # Press Tab from keyboard\n        self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        time.sleep(5)\n    \n        # Enter HSC code\n        try:\n            with allure.step(\"Entering HSC code\"):\n                self.driver.switch_to.active_element.send_keys(HS_code, Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error entering HSC code: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"HSC Code Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter HSC code: {e}\")\n    \n        # Click on vatable check box\n        try:\n            with allure.step(\"Clicking on vatable checkbox\"):\n                wait = WebDriverWait(self.driver, 10)\n                checkbox = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='checkbox' and contains(@class, 'ng-pristine')]\")))\n                checkbox.click()\n                time.sleep(5)\n    \n                # press TAB\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error clicking vatable checkbox: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Vatable Checkbox Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click vatable checkbox: {e}\")\n    \n        # To select Unit\n        try:\n            with allure.step(\"Selecting unit\"):\n                self.driver.switch_to.active_element.send_keys(unit, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting unit: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Unit Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select unit: {e}\")\n    \n        # To select item type\n        try:\n            with allure.step(\"Selecting item type\"):\n                self.driver.switch_to.active_element.send_keys(item_type, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting item type: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Type Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select item type: {e}\")\n    \n        # Description\n        try:\n            with allure.step(\"Entering description\"):\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                self.driver.switch_to.active_element.send_keys(description, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering description: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Description Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter description: {e}\")\n    \n        # Category\n        try:\n            with allure.step(\"Entering category\"):\n                self.driver.switch_to.active_element.send_keys(category, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering category: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Category Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter category: {e}\")\n    \n        # Short name\n        try:\n            with allure.step(\"Entering short name\"):\n                self.driver.switch_to.active_element.send_keys(short_name, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering short name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Short Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter short name: {e}\")\n    \n        # Purchase price\n        try:\n            with allure.step(\"Entering purchase price\"):\n                price_input = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='number' and @placeholder='Enter Purchase Price']\")))\n                price_input.clear()\n                price_input.send_keys(purchase_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering purchase price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Purchase Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter purchase price: {e}\")\n    \n        # Sales price\n        try:\n            with allure.step(\"Entering sales price\"):\n                number_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and @placeholder='0']\")))\n                number_input.clear()\n                number_input.send_keys(sales_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering sales price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Sales Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter sales price: {e}\")\n    \n        # Alternate Unit\n        try:\n            with allure.step(\"Navigating to Alternate Unit tab\"):\n                alternate_unit_tab = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Alternate Unit']\")))\n                alternate_unit_tab.click()\n                time.sleep(8)\n    \n        except Exception as e:\n            logger.error(f\"Error clicking Alternate Unit tab: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Alternate Unit Tab Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click Alternate Unit tab: {e}\")\n    \n        # Click on \"Add Alternate Unit\" button\n        try:\n            with allure.step(\"Clicking on 'Add Alternate Unit' button\"):\n                # Select unit: gm\n                select_element = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//select[contains(@class, 'ng-pristine')]\")))\n                select_element.click()\n                self.driver.switch_to.active_element.send_keys(alt_unit, Keys.TAB)\n                print(\"Unit selected.\")\n    \n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Alternate Unit' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Alternate Unit Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Alternate Unit': {e}\")\n    \n        # Enter conversion factor\n        try:\n            with allure.step(\"Entering conversion factor\"):\n                input_field = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and contains(@class, 'ng-valid')]\")))\n                input_field.clear()\n                input_field.send_keys(conversion_factor)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering conversion factor: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Conversion Factor Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter conversion factor: {e}\")\n    \n        # Click on \"Add Barcode\" mapping tab\n        try:\n            with allure.step(\"Clicking on 'Add Barcode' button\"):\n                # Barcode Mapping tab\n                barcode_mapping = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Barcode Mapping']\")))\n                barcode_mapping.click()\n                time.sleep(8)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Barcode' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Barcode Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Barcode': {e}\")\n    \n        # Enter barcode\n        try:\n            with allure.step(\"Entering barcode\"):\n                barcode_input = wait.until(\n                    ec.presence_of_element_located((By.XPATH, \"//input[@placeholder='Enter Bar Code']\")))\n                barcode_input.clear()\n                barcode_input.send_keys(barcode_map)\n                barcode_input.click()\n                time.sleep(5)\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                time.sleep(5)\n    \n                select_element = self.driver.find_element(By.CSS_SELECTOR, 'div.col-2.p-0 select')\n                select_element.click()\n                self.driver.switch_to.active_element.send_keys(barcode_unit, Keys.TAB)\n                time.sleep(5)\n    \n        except Exception as e:\n            logger.error(f\"Error entering barcode: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Barcode Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter barcode: {e}\")\n    \n        # Click on \"Map\" button\n        try:\n            with allure.step(\"Clicking on 'Map' button\"):\n                wait = WebDriverWait(self.driver, 10)\n                map_button = wait.until(ec.element_to_be_clickable((By.ID, \"map\")))\n                map_button.click()\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error clicking 'Map' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Map Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Map': {e}\")\n    \n        # Remaining form filling...\n        # (You can paste your detailed form filling steps here exactly as you had them.)\n    \n        # Click Save and handle alert\n        try:\n            save_button = self.driver.find_element(By.XPATH, \"//button[contains(text(),'SAVE')]\")\n            save_button.click()\n            time.sleep(10)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Save Button Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Save': {e}\")\n        try:\n            with allure.step(\"Handling 'Do you wanna add another product?' alert\"):\n                body = self.driver.find_element(By.TAG_NAME, \"body\")\n                body.send_keys(Keys.ENTER)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error handling 'Do you wanna add another product?' alert: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Another Product Alert Error\",\n                          attachment_type=allure.attachment_type.PNG)\n>           raise PopupHandlingError(f\"Failed to handle 'Add Another Product' alert: {e}\")\nE           test_product_master.PopupHandlingError: Failed to handle 'Add Another Product' alert: Alert Text: Data Saved Successfully. Do you want to continue adding products to this group ?\nE           Message: unexpected alert open: {Alert text : Data Saved Successfully. Do you want to continue adding products to this group ?}\nE             (Session info: chrome=138.0.7204.101)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff71a1a6f75+76917]\nE           \tGetHandleVerifier [0x0x7ff71a1a6fd0+77008]\nE           \t(No symbol) [0x0x7ff719f59dea]\nE           \t(No symbol) [0x0x7ff71a00110c]\nE           \t(No symbol) [0x0x7ff719fd8243]\nE           \t(No symbol) [0x0x7ff719fa1431]\nE           \t(No symbol) [0x0x7ff719fa21c3]\nE           \tGetHandleVerifier [0x0x7ff71a47d2ad+3051437]\nE           \tGetHandleVerifier [0x0x7ff71a477903+3028483]\nE           \tGetHandleVerifier [0x0x7ff71a49589d+3151261]\nE           \tGetHandleVerifier [0x0x7ff71a1c183e+185662]\nE           \tGetHandleVerifier [0x0x7ff71a1c96ff+218111]\nE           \tGetHandleVerifier [0x0x7ff71a1afaf4+112628]\nE           \tGetHandleVerifier [0x0x7ff71a1afca9+113065]\nE           \tGetHandleVerifier [0x0x7ff71a196c78+10616]\nE           \tBaseThreadInitThunk [0x0x7ffd2c157374+20]\nE           \tRtlUserThreadStart [0x0x7ffd2c85cc91+33]\n\ntest_product_master.py:1076: PopupHandlingError"}, "steps": [{"name": "Creating product item from Excel row: {'product_item': 'tested 10', 'HS_code': 123, 'unit': 'kg.', 'item_type': 'Service Item', 'description': 'This is description', 'category': nan, 'short_name': 'XYZ', 'purchase_price': 120, 'sales_price': 140, 'alt_unit': 'Each', 'conversion_factor': 1000, 'barcode_map': 67, 'barcode_unit': 'kg.'}", "status": "broken", "statusDetails": {"message": "test_product_master.PopupHandlingError: Failed to handle 'Add Another Product' alert: Alert Text: Data Saved Successfully. Do you want to continue adding products to this group ?\nMessage: unexpected alert open: {Alert text : Data Saved Successfully. Do you want to continue adding products to this group ?}\n  (Session info: chrome=138.0.7204.101)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff71a1a6f75+76917]\n\tGetHandleVerifier [0x0x7ff71a1a6fd0+77008]\n\t(No symbol) [0x0x7ff719f59dea]\n\t(No symbol) [0x0x7ff71a00110c]\n\t(No symbol) [0x0x7ff719fd8243]\n\t(No symbol) [0x0x7ff719fa1431]\n\t(No symbol) [0x0x7ff719fa21c3]\n\tGetHandleVerifier [0x0x7ff71a47d2ad+3051437]\n\tGetHandleVerifier [0x0x7ff71a477903+3028483]\n\tGetHandleVerifier [0x0x7ff71a49589d+3151261]\n\tGetHandleVerifier [0x0x7ff71a1c183e+185662]\n\tGetHandleVerifier [0x0x7ff71a1c96ff+218111]\n\tGetHandleVerifier [0x0x7ff71a1afaf4+112628]\n\tGetHandleVerifier [0x0x7ff71a1afca9+113065]\n\tGetHandleVerifier [0x0x7ff71a196c78+10616]\n\tBaseThreadInitThunk [0x0x7ffd2c157374+20]\n\tRtlUserThreadStart [0x0x7ffd2c85cc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Necessary codes\\EXCEL\\test_product_master.py\", line 1094, in test_product_master_from_excel\n    self.product_master(\n    ~~~~~~~~~~~~~~~~~~~^\n        product_item=row['product_item'],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<11 lines>...\n        barcode_unit=row['barcode_unit']\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Necessary codes\\EXCEL\\test_product_master.py\", line 1076, in product_master\n    raise PopupHandlingError(f\"Failed to handle 'Add Another Product' alert: {e}\")\n"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1752400125272, "stop": 1752400169740}, {"name": "Creating product master for item: 'tested 10'", "status": "broken", "statusDetails": {"message": "test_product_master.PopupHandlingError: Failed to handle 'Add Another Product' alert: Alert Text: Data Saved Successfully. Do you want to continue adding products to this group ?\nMessage: unexpected alert open: {Alert text : Data Saved Successfully. Do you want to continue adding products to this group ?}\n  (Session info: chrome=138.0.7204.101)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff71a1a6f75+76917]\n\tGetHandleVerifier [0x0x7ff71a1a6fd0+77008]\n\t(No symbol) [0x0x7ff719f59dea]\n\t(No symbol) [0x0x7ff71a00110c]\n\t(No symbol) [0x0x7ff719fd8243]\n\t(No symbol) [0x0x7ff719fa1431]\n\t(No symbol) [0x0x7ff719fa21c3]\n\tGetHandleVerifier [0x0x7ff71a47d2ad+3051437]\n\tGetHandleVerifier [0x0x7ff71a477903+3028483]\n\tGetHandleVerifier [0x0x7ff71a49589d+3151261]\n\tGetHandleVerifier [0x0x7ff71a1c183e+185662]\n\tGetHandleVerifier [0x0x7ff71a1c96ff+218111]\n\tGetHandleVerifier [0x0x7ff71a1afaf4+112628]\n\tGetHandleVerifier [0x0x7ff71a1afca9+113065]\n\tGetHandleVerifier [0x0x7ff71a196c78+10616]\n\tBaseThreadInitThunk [0x0x7ffd2c157374+20]\n\tRtlUserThreadStart [0x0x7ffd2c85cc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Necessary codes\\EXCEL\\test_product_master.py\", line 1076, in product_master\n    raise PopupHandlingError(f\"Failed to handle 'Add Another Product' alert: {e}\")\n"}, "steps": [{"name": "Clicking on Item Group input field", "status": "passed", "start": 1752400207128, "stop": 1752400217296}, {"name": "Clicking on main group input field", "status": "passed", "start": 1752400217296, "stop": 1752400225665}, {"name": "Entering product item name", "status": "passed", "start": 1752400225665, "stop": 1752400225830}, {"name": "Entering HSC code", "status": "passed", "start": 1752400230866, "stop": 1752400230936}, {"name": "Clicking on vatable checkbox", "status": "passed", "start": 1752400230936, "stop": 1752400236128}, {"name": "Selecting unit", "status": "passed", "start": 1752400236129, "stop": 1752400241202}, {"name": "Selecting item type", "status": "passed", "start": 1752400241202, "stop": 1752400246296}, {"name": "Entering description", "status": "passed", "start": 1752400246296, "stop": 1752400251494}, {"name": "Entering category", "status": "passed", "start": 1752400251494, "stop": 1752400256574}, {"name": "Entering short name", "status": "passed", "start": 1752400256574, "stop": 1752400261649}, {"name": "Entering purchase price", "status": "passed", "start": 1752400261650, "stop": 1752400271796}, {"name": "Entering sales price", "status": "passed", "start": 1752400271796, "stop": 1752400282018}, {"name": "Navigating to Alternate Unit tab", "status": "passed", "start": 1752400282018, "stop": 1752400290145}, {"name": "Clicking on 'Add Alternate Unit' button", "status": "passed", "start": 1752400290145, "stop": 1752400290362}, {"name": "Entering conversion factor", "status": "passed", "start": 1752400290362, "stop": 1752400295499}, {"name": "Clicking on 'Add Barcode' button", "status": "passed", "start": 1752400295499, "stop": 1752400303616}, {"name": "Entering barcode", "status": "passed", "start": 1752400303616, "stop": 1752400319049}, {"name": "Clicking on 'Map' button", "status": "passed", "start": 1752400319049, "stop": 1752400329162}, {"name": "Handling 'Do you wanna add another product?' alert", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Data Saved Successfully. Do you want to continue adding products to this group ?\nMessage: unexpected alert open: {Alert text : Data Saved Successfully. Do you want to continue adding products to this group ?}\n  (Session info: chrome=138.0.7204.101)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff71a1a6f75+76917]\n\tGetHandleVerifier [0x0x7ff71a1a6fd0+77008]\n\t(No symbol) [0x0x7ff719f59dea]\n\t(No symbol) [0x0x7ff71a00110c]\n\t(No symbol) [0x0x7ff719fd8243]\n\t(No symbol) [0x0x7ff719fa1431]\n\t(No symbol) [0x0x7ff719fa21c3]\n\tGetHandleVerifier [0x0x7ff71a47d2ad+3051437]\n\tGetHandleVerifier [0x0x7ff71a477903+3028483]\n\tGetHandleVerifier [0x0x7ff71a49589d+3151261]\n\tGetHandleVerifier [0x0x7ff71a1c183e+185662]\n\tGetHandleVerifier [0x0x7ff71a1c96ff+218111]\n\tGetHandleVerifier [0x0x7ff71a1afaf4+112628]\n\tGetHandleVerifier [0x0x7ff71a1afca9+113065]\n\tGetHandleVerifier [0x0x7ff71a196c78+10616]\n\tBaseThreadInitThunk [0x0x7ffd2c157374+20]\n\tRtlUserThreadStart [0x0x7ffd2c85cc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Necessary codes\\EXCEL\\test_product_master.py\", line 1068, in product_master\n    body = self.driver.find_element(By.TAG_NAME, \"body\")\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 914, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 231, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"}, "start": 1752400339252, "stop": 1752400339272}], "attachments": [{"name": "Add Another Product Alert Error", "source": "bd9f750c-e3da-4ba4-aab4-2a6f4b3bf1f3-attachment.png", "type": "image/png"}], "parameters": [{"name": "product_item", "value": "'tested 10'"}, {"name": "HS_code", "value": "'123'"}, {"name": "unit", "value": "'kg.'"}, {"name": "item_type", "value": "'Service Item'"}, {"name": "description", "value": "'This is description'"}, {"name": "category", "value": "nan"}, {"name": "short_name", "value": "'XYZ'"}, {"name": "purchase_price", "value": "'120'"}, {"name": "sales_price", "value": "'140'"}, {"name": "alt_unit", "value": "'Each'"}, {"name": "conversion_factor", "value": "'1000'"}, {"name": "barcode_map", "value": "'67'"}, {"name": "barcode_unit", "value": "'kg.'"}], "start": 1752400169744, "stop": 1752400339601}], "start": 1752400125271, "stop": 1752400339605}], "attachments": [{"name": "log", "source": "8cb95df0-61f1-4129-94d1-a1796dfdd7c6-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "72e51f0d-872f-4439-9bc9-fc18f2f15bba-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "row", "value": "{'product_item': 'tested 10', 'HS_code': 123, 'unit': 'kg.', 'item_type': 'Service Item', 'description': 'This is description', 'category': nan, 'short_name': 'XYZ', 'purchase_price': 120, 'sales_price': 140, 'alt_unit': 'Each', 'conversion_factor': 1000, 'barcode_map': 67, 'barcode_unit': 'kg.'}"}], "start": 1752400125271, "stop": 1752400339608, "uuid": "b7b5ebe9-40bb-4465-ab19-86c10fb0c35f", "historyId": "b3ce37f5081cce2c9d944f0d001e2df9", "testCaseId": "04ea4cde4fa16c3d6888e551e4e8f195", "fullName": "test_product_master.TestProductMaster#test_product_master_from_excel", "labels": [{"name": "suite", "value": "test_product_master"}, {"name": "subSuite", "value": "TestProductMaster"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "10780-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_product_master"}]}