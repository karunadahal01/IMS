{"name": "test_product_master_from_excel[row0]", "status": "broken", "statusDetails": {"message": "test_product_master.NavigationError: Failed to click 'Add Alternate Unit': Message:", "trace": "self = <test_product_master.TestProductMaster object at 0x0000020DCF2DA5D0>, product_item = 'tested 13', HS_code = '123'\nunit = 'kg.', item_type = 'Service Item', description = 'This is description', category = nan, short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'Each', conversion_factor = '1000', barcode_map = '68'\nbarcode_unit = 'kg.'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def product_master(self, product_item, HS_code, unit, item_type,\n                       description, category, short_name, purchase_price, sales_price,\n                       alt_unit, conversion_factor,\n                       barcode_map, barcode_unit):\n        wait = WebDriverWait(self.driver, 10)\n        try:\n            Master_menu = self.driver.find_element(By.LINK_TEXT, \"Masters\")\n            Master_menu.click()\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Masters Menu Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Masters': {e}\")\n        time.sleep(5)\n    \n        try:\n            inventory_info = wait.until(ec.presence_of_element_located((By.LINK_TEXT, \"Inventory Info\")))\n            ActionChains(self.driver).move_to_element(inventory_info).perform()\n            time.sleep(5)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Inventory Info Hover Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to hover over 'Inventory Info': {e}\")\n    \n        try:\n            product_master_link = wait.until(ec.visibility_of_element_located((By.LINK_TEXT, \"Product Master\")))\n            product_master_link.click()\n            time.sleep(5)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Product Master Click Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Product Master': {e}\")\n    \n        try:\n            add_product_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Add Product')]\")))\n            self.safe_click(add_product_btn, \"Add Product button\")\n            time.sleep(10)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Add Product Button Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product': {e}\")\n    \n        try:\n            add_product_label = wait.until(ec.element_to_be_clickable((By.XPATH, \"//label[contains(text(), 'Add Product')]\")))\n            add_product_label.click()\n            time.sleep(8)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Add Product Label Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product' label: {e}\")\n    \n        self.driver.execute_script(\"document.body.style.zoom='80%'\")\n        time.sleep(3)\n    \n        # Click on the Item Group input field\n        try:\n            with allure.step(\"Clicking on Item Group input field\"):\n                item_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='-- Press Enter For Item Group --']\")))\n                item_group_input.click()\n                time.sleep(5)\n                # Press Enter on the Item Group field\n                item_group_input.send_keys(Keys.ENTER)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking Item Group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click Item Group input field: {e}\")\n        wait = WebDriverWait(self.driver, 5)\n    \n        # Find and click the main group input field\n        try:\n            with allure.step(\"Clicking on main group input field\"):\n                main_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//ng-select//input[@type='text']\")))\n                main_group_input.click()\n                # Send Enter key to trigger dropdown\n                main_group_input.send_keys(Keys.ENTER)\n                # Send Enter again to select the first dropdown option\n                main_group_input.send_keys(Keys.ENTER)\n                main_group_input.send_keys(Keys.ENTER)\n    \n                time.sleep(8)\n    \n                ok_button = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//button[.//span[normalize-space()='Ok']]\")))\n                ok_button.click()\n        except Exception as e:\n            logger.error(f\"Error clicking main group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Main Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click main group input field: {e}\")\n    \n        # Find the input by placeholder and enter item name\n    \n        try:\n            with allure.step(\"Entering product item name\"):\n                # Find the input by placeholder and enter item name\n                item_name_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Enter Item Name']\")))\n                item_name_input.clear()\n                item_name_input.send_keys(product_item)\n                item_name_input.send_keys(Keys.ENTER)\n        except Exception as e:\n            logger.error(f\"Error entering product item name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter product item name: {e}\")\n    \n        # Press Tab from keyboard\n        self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        time.sleep(5)\n    \n        # Enter HSC code\n        try:\n            with allure.step(\"Entering HSC code\"):\n                self.driver.switch_to.active_element.send_keys(HS_code, Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error entering HSC code: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"HSC Code Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter HSC code: {e}\")\n    \n        # Click on vatable check box\n        try:\n            with allure.step(\"Clicking on vatable checkbox\"):\n                wait = WebDriverWait(self.driver, 10)\n                checkbox = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='checkbox' and contains(@class, 'ng-pristine')]\")))\n                checkbox.click()\n                time.sleep(5)\n    \n                # press TAB\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error clicking vatable checkbox: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Vatable Checkbox Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click vatable checkbox: {e}\")\n    \n        # To select Unit\n        try:\n            with allure.step(\"Selecting unit\"):\n                self.driver.switch_to.active_element.send_keys(unit, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting unit: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Unit Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select unit: {e}\")\n    \n        # To select item type\n        try:\n            with allure.step(\"Selecting item type\"):\n                self.driver.switch_to.active_element.send_keys(item_type, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting item type: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Type Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select item type: {e}\")\n    \n        # Description\n        try:\n            with allure.step(\"Entering description\"):\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                self.driver.switch_to.active_element.send_keys(description, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering description: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Description Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter description: {e}\")\n    \n        # Category\n        try:\n            with allure.step(\"Entering category\"):\n                self.driver.switch_to.active_element.send_keys(category, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering category: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Category Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter category: {e}\")\n    \n        # Short name\n        try:\n            with allure.step(\"Entering short name\"):\n                self.driver.switch_to.active_element.send_keys(short_name, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering short name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Short Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter short name: {e}\")\n    \n        # Purchase price\n        try:\n            with allure.step(\"Entering purchase price\"):\n                price_input = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='number' and @placeholder='Enter Purchase Price']\")))\n                price_input.clear()\n                price_input.send_keys(purchase_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering purchase price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Purchase Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter purchase price: {e}\")\n    \n        # Sales price\n        try:\n            with allure.step(\"Entering sales price\"):\n                number_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and @placeholder='0']\")))\n                number_input.clear()\n                number_input.send_keys(sales_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering sales price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Sales Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter sales price: {e}\")\n    \n        # Alternate Unit\n        try:\n            with allure.step(\"Navigating to Alternate Unit tab\"):\n                alternate_unit_tab = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Alternate Unit']\")))\n                alternate_unit_tab.click()\n                time.sleep(8)\n    \n        except Exception as e:\n            logger.error(f\"Error clicking Alternate Unit tab: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Alternate Unit Tab Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click Alternate Unit tab: {e}\")\n    \n        # Click on \"Add Alternate Unit\" button\n        try:\n            with allure.step(\"Clicking on 'Add Alternate Unit' button\"):\n                # Select unit: gm\n>               select_element = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//select[contains(@class, 'ng-pristine')]\")))\n\ntest_product_master.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d4c35ea937040e7f5cfdcc0b4df39ce0\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000020DCF014540>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_product_master.TestProductMaster object at 0x0000020DCF2DA5D0>\nrow = {'HS_code': 123, 'alt_unit': 'Each', 'barcode_map': 68, 'barcode_unit': 'kg.', ...}\n\n    @pytest.mark.parametrize(\"row\", pd.read_excel(\"products.xlsx\").to_dict('records'))\n    def test_product_master_from_excel(self, row):\n        with allure.step(f\"Creating product item from Excel row: {row}\"):\n            self.login(\"gedehim917@decodewp.com\",\n                       \"Tebahal1!\",\n                       \"https://velvet.webredirect.himshang.com.np/#/pages/dashboard\")\n    \n>           self.product_master(\n                product_item=row['product_item'],\n                HS_code=str(row['HS_code']),\n                unit=row['unit'],\n                item_type=row['item_type'],\n                description=row['description'],\n                category=row['category'],\n                short_name=row['short_name'],\n                purchase_price=str(row['purchase_price']),\n                sales_price=str(row['sales_price']),\n                alt_unit=row['alt_unit'],\n                conversion_factor=str(row['conversion_factor']),\n                barcode_map=str(row['barcode_map']),\n                barcode_unit=row['barcode_unit']\n            )\n\ntest_product_master.py:1096: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_product_master.TestProductMaster object at 0x0000020DCF2DA5D0>, product_item = 'tested 13', HS_code = '123'\nunit = 'kg.', item_type = 'Service Item', description = 'This is description', category = nan, short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'Each', conversion_factor = '1000', barcode_map = '68'\nbarcode_unit = 'kg.'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def product_master(self, product_item, HS_code, unit, item_type,\n                       description, category, short_name, purchase_price, sales_price,\n                       alt_unit, conversion_factor,\n                       barcode_map, barcode_unit):\n        wait = WebDriverWait(self.driver, 10)\n        try:\n            Master_menu = self.driver.find_element(By.LINK_TEXT, \"Masters\")\n            Master_menu.click()\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Masters Menu Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Masters': {e}\")\n        time.sleep(5)\n    \n        try:\n            inventory_info = wait.until(ec.presence_of_element_located((By.LINK_TEXT, \"Inventory Info\")))\n            ActionChains(self.driver).move_to_element(inventory_info).perform()\n            time.sleep(5)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Inventory Info Hover Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to hover over 'Inventory Info': {e}\")\n    \n        try:\n            product_master_link = wait.until(ec.visibility_of_element_located((By.LINK_TEXT, \"Product Master\")))\n            product_master_link.click()\n            time.sleep(5)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Product Master Click Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Product Master': {e}\")\n    \n        try:\n            add_product_btn = wait.until(ec.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Add Product')]\")))\n            self.safe_click(add_product_btn, \"Add Product button\")\n            time.sleep(10)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Add Product Button Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product': {e}\")\n    \n        try:\n            add_product_label = wait.until(ec.element_to_be_clickable((By.XPATH, \"//label[contains(text(), 'Add Product')]\")))\n            add_product_label.click()\n            time.sleep(8)\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Add Product Label Error\", attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click 'Add Product' label: {e}\")\n    \n        self.driver.execute_script(\"document.body.style.zoom='80%'\")\n        time.sleep(3)\n    \n        # Click on the Item Group input field\n        try:\n            with allure.step(\"Clicking on Item Group input field\"):\n                item_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='-- Press Enter For Item Group --']\")))\n                item_group_input.click()\n                time.sleep(5)\n                # Press Enter on the Item Group field\n                item_group_input.send_keys(Keys.ENTER)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error clicking Item Group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click Item Group input field: {e}\")\n        wait = WebDriverWait(self.driver, 5)\n    \n        # Find and click the main group input field\n        try:\n            with allure.step(\"Clicking on main group input field\"):\n                main_group_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//ng-select//input[@type='text']\")))\n                main_group_input.click()\n                # Send Enter key to trigger dropdown\n                main_group_input.send_keys(Keys.ENTER)\n                # Send Enter again to select the first dropdown option\n                main_group_input.send_keys(Keys.ENTER)\n                main_group_input.send_keys(Keys.ENTER)\n    \n                time.sleep(8)\n    \n                ok_button = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//button[.//span[normalize-space()='Ok']]\")))\n                ok_button.click()\n        except Exception as e:\n            logger.error(f\"Error clicking main group input field: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Main Group Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click main group input field: {e}\")\n    \n        # Find the input by placeholder and enter item name\n    \n        try:\n            with allure.step(\"Entering product item name\"):\n                # Find the input by placeholder and enter item name\n                item_name_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Enter Item Name']\")))\n                item_name_input.clear()\n                item_name_input.send_keys(product_item)\n                item_name_input.send_keys(Keys.ENTER)\n        except Exception as e:\n            logger.error(f\"Error entering product item name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter product item name: {e}\")\n    \n        # Press Tab from keyboard\n        self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        time.sleep(5)\n    \n        # Enter HSC code\n        try:\n            with allure.step(\"Entering HSC code\"):\n                self.driver.switch_to.active_element.send_keys(HS_code, Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error entering HSC code: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"HSC Code Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter HSC code: {e}\")\n    \n        # Click on vatable check box\n        try:\n            with allure.step(\"Clicking on vatable checkbox\"):\n                wait = WebDriverWait(self.driver, 10)\n                checkbox = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='checkbox' and contains(@class, 'ng-pristine')]\")))\n                checkbox.click()\n                time.sleep(5)\n    \n                # press TAB\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n        except Exception as e:\n            logger.error(f\"Error clicking vatable checkbox: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Vatable Checkbox Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to click vatable checkbox: {e}\")\n    \n        # To select Unit\n        try:\n            with allure.step(\"Selecting unit\"):\n                self.driver.switch_to.active_element.send_keys(unit, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting unit: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Unit Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select unit: {e}\")\n    \n        # To select item type\n        try:\n            with allure.step(\"Selecting item type\"):\n                self.driver.switch_to.active_element.send_keys(item_type, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error selecting item type: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Item Type Selection Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to select item type: {e}\")\n    \n        # Description\n        try:\n            with allure.step(\"Entering description\"):\n                self.driver.switch_to.active_element.send_keys(Keys.TAB)\n                self.driver.switch_to.active_element.send_keys(description, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering description: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Description Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter description: {e}\")\n    \n        # Category\n        try:\n            with allure.step(\"Entering category\"):\n                self.driver.switch_to.active_element.send_keys(category, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering category: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Category Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter category: {e}\")\n    \n        # Short name\n        try:\n            with allure.step(\"Entering short name\"):\n                self.driver.switch_to.active_element.send_keys(short_name, Keys.TAB)\n                time.sleep(5)\n        except Exception as e:\n            logger.error(f\"Error entering short name: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Short Name Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter short name: {e}\")\n    \n        # Purchase price\n        try:\n            with allure.step(\"Entering purchase price\"):\n                price_input = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//input[@type='number' and @placeholder='Enter Purchase Price']\")))\n                price_input.clear()\n                price_input.send_keys(purchase_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering purchase price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Purchase Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter purchase price: {e}\")\n    \n        # Sales price\n        try:\n            with allure.step(\"Entering sales price\"):\n                number_input = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//input[@type='number' and @placeholder='0']\")))\n                number_input.clear()\n                number_input.send_keys(sales_price)\n                time.sleep(10)\n        except Exception as e:\n            logger.error(f\"Error entering sales price: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Sales Price Input Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise FormFieldNotFoundError(f\"Failed to enter sales price: {e}\")\n    \n        # Alternate Unit\n        try:\n            with allure.step(\"Navigating to Alternate Unit tab\"):\n                alternate_unit_tab = wait.until(ec.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='mat-tab-label-content' and normalize-space()='Alternate Unit']\")))\n                alternate_unit_tab.click()\n                time.sleep(8)\n    \n        except Exception as e:\n            logger.error(f\"Error clicking Alternate Unit tab: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Alternate Unit Tab Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise NavigationError(f\"Failed to click Alternate Unit tab: {e}\")\n    \n        # Click on \"Add Alternate Unit\" button\n        try:\n            with allure.step(\"Clicking on 'Add Alternate Unit' button\"):\n                # Select unit: gm\n                select_element = wait.until(\n                    ec.element_to_be_clickable((By.XPATH, \"//select[contains(@class, 'ng-pristine')]\")))\n                select_element.click()\n                self.driver.switch_to.active_element.send_keys(alt_unit, Keys.TAB)\n                print(\"Unit selected.\")\n    \n        except Exception as e:\n            logger.error(f\"Error clicking 'Add Alternate Unit' button: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Alternate Unit Button Error\",\n                          attachment_type=allure.attachment_type.PNG)\n>           raise NavigationError(f\"Failed to click 'Add Alternate Unit': {e}\")\nE           test_product_master.NavigationError: Failed to click 'Add Alternate Unit': Message:\n\ntest_product_master.py:985: NavigationError"}, "steps": [{"name": "Creating product item from Excel row: {'product_item': 'tested 13', 'HS_code': 123, 'unit': 'kg.', 'item_type': 'Service Item', 'description': 'This is description', 'category': nan, 'short_name': 'XYZ', 'purchase_price': 120, 'sales_price': 140, 'alt_unit': 'Each', 'conversion_factor': 1000, 'barcode_map': 68, 'barcode_unit': 'kg.'}", "status": "broken", "statusDetails": {"message": "test_product_master.NavigationError: Failed to click 'Add Alternate Unit': Message: \n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Necessary codes\\EXCEL\\test_product_master.py\", line 1096, in test_product_master_from_excel\n    self.product_master(\n    ~~~~~~~~~~~~~~~~~~~^\n        product_item=row['product_item'],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<11 lines>...\n        barcode_unit=row['barcode_unit']\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Necessary codes\\EXCEL\\test_product_master.py\", line 985, in product_master\n    raise NavigationError(f\"Failed to click 'Add Alternate Unit': {e}\")\n"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1752400871510, "stop": 1752400925141}, {"name": "Creating product master for item: 'tested 13'", "status": "broken", "statusDetails": {"message": "test_product_master.NavigationError: Failed to click 'Add Alternate Unit': Message: \n\n", "trace": "  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Necessary codes\\EXCEL\\test_product_master.py\", line 985, in product_master\n    raise NavigationError(f\"Failed to click 'Add Alternate Unit': {e}\")\n"}, "steps": [{"name": "Clicking on Item Group input field", "status": "passed", "start": 1752400962985, "stop": 1752400973153}, {"name": "Clicking on main group input field", "status": "passed", "start": 1752400973153, "stop": 1752400981524}, {"name": "Entering product item name", "status": "passed", "start": 1752400981524, "stop": 1752400981695}, {"name": "Entering HSC code", "status": "passed", "start": 1752400986729, "stop": 1752400986797}, {"name": "Clicking on vatable checkbox", "status": "passed", "start": 1752400986797, "stop": 1752400991983}, {"name": "Selecting unit", "status": "passed", "start": 1752400991983, "stop": 1752400997068}, {"name": "Selecting item type", "status": "passed", "start": 1752400997068, "stop": 1752401002170}, {"name": "Entering description", "status": "passed", "start": 1752401002170, "stop": 1752401007343}, {"name": "Entering category", "status": "passed", "start": 1752401007343, "stop": 1752401012403}, {"name": "Entering short name", "status": "passed", "start": 1752401012403, "stop": 1752401017486}, {"name": "Entering purchase price", "status": "passed", "start": 1752401017486, "stop": 1752401027640}, {"name": "Entering sales price", "status": "passed", "start": 1752401027640, "stop": 1752401037851}, {"name": "Navigating to Alternate Unit tab", "status": "passed", "start": 1752401037851, "stop": 1752401045990}, {"name": "Clicking on 'Add Alternate Unit' button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Necessary codes\\EXCEL\\test_product_master.py\", line 974, in product_master\n    select_element = wait.until(\n        ec.element_to_be_clickable((By.XPATH, \"//select[contains(@class, 'ng-pristine')]\")))\n  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1752401045990, "stop": 1752401056010}], "attachments": [{"name": "Add Alternate Unit Button Error", "source": "222ac33a-70fe-42b4-9384-83968421aeb4-attachment.png", "type": "image/png"}], "parameters": [{"name": "product_item", "value": "'tested 13'"}, {"name": "HS_code", "value": "'123'"}, {"name": "unit", "value": "'kg.'"}, {"name": "item_type", "value": "'Service Item'"}, {"name": "description", "value": "'This is description'"}, {"name": "category", "value": "nan"}, {"name": "short_name", "value": "'XYZ'"}, {"name": "purchase_price", "value": "'120'"}, {"name": "sales_price", "value": "'140'"}, {"name": "alt_unit", "value": "'Each'"}, {"name": "conversion_factor", "value": "'1000'"}, {"name": "barcode_map", "value": "'68'"}, {"name": "barcode_unit", "value": "'kg.'"}], "start": 1752400925141, "stop": 1752401056265}], "start": 1752400871510, "stop": 1752401056268}], "attachments": [{"name": "log", "source": "09867c84-d43e-4ed6-961d-a56a0e739029-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "row", "value": "{'product_item': 'tested 13', 'HS_code': 123, 'unit': 'kg.', 'item_type': 'Service Item', 'description': 'This is description', 'category': nan, 'short_name': 'XYZ', 'purchase_price': 120, 'sales_price': 140, 'alt_unit': 'Each', 'conversion_factor': 1000, 'barcode_map': 68, 'barcode_unit': 'kg.'}"}], "start": 1752400871509, "stop": 1752401056271, "uuid": "1977c8ef-e746-463b-9ab1-4d9dab8411ad", "historyId": "233fe67d1886fc75cb4cdf87ce2622cb", "testCaseId": "04ea4cde4fa16c3d6888e551e4e8f195", "fullName": "test_product_master.TestProductMaster#test_product_master_from_excel", "labels": [{"name": "suite", "value": "test_product_master"}, {"name": "subSuite", "value": "TestProductMaster"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "9144-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_product_master"}]}