{"name": "test_login", "status": "broken", "statusDetails": {"message": "test_contra_Voucher.FormFieldNotFoundError: Could not find or interact with Account Ledger field: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7ca4ee415+77285]\n\tGetHandleVerifier [0x0x7ff7ca4ee470+77376]\n\t(No symbol) [0x0x7ff7ca2b9a6a]\n\t(No symbol) [0x0x7ff7ca310406]\n\t(No symbol) [0x0x7ff7ca3106bc]\n\t(No symbol) [0x0x7ff7ca363ac7]\n\t(No symbol) [0x0x7ff7ca33864f]\n\t(No symbol) [0x0x7ff7ca36087f]\n\t(No symbol) [0x0x7ff7ca3383e3]\n\t(No symbol) [0x0x7ff7ca301521]\n\t(No symbol) [0x0x7ff7ca3022b3]\n\tGetHandleVerifier [0x0x7ff7ca7d1efd+3107021]\n\tGetHandleVerifier [0x0x7ff7ca7cc29d+3083373]\n\tGetHandleVerifier [0x0x7ff7ca7ebedd+3213485]\n\tGetHandleVerifier [0x0x7ff7ca50884e+184862]\n\tGetHandleVerifier [0x0x7ff7ca51055f+216879]\n\tGetHandleVerifier [0x0x7ff7ca4f7084+113236]\n\tGetHandleVerifier [0x0x7ff7ca4f7239+113673]\n\tGetHandleVerifier [0x0x7ff7ca4de298+11368]\n\tBaseThreadInitThunk [0x0x7ffe85327374+20]\n\tRtlUserThreadStart [0x0x7ffe8617cc91+33]", "trace": "self = <test_contra_Voucher.TestERPFlowCreation object at 0x000002819BEB9450>, ledgeraccount1 = 'PURCHASE A/C'\nledgeraccount2 = 'PURCHASE A/C'\n\n        @allure.step(\"Navigate to Accounting Module\")\n        def navigate_to_accounting(self ,ledgeraccount1, ledgeraccount2):\n         #Accounting Module\n            try:\n                wait = WebDriverWait(self.driver, 10)\n                time.sleep(5)\n                accounting_menu =self.driver.find_element(By.LINK_TEXT, \"Accounting Module\")\n                accounting_menu.click()\n                # Wait for new tab to open\n                wait.until(lambda d: len(d.window_handles) > 1)\n    \n                # Switch to the new tab\n                self.driver.switch_to.window(self.driver.window_handles[1])\n    \n                # Wait until URL contains WEBACCOUNTREDIRECT\n                wait.until(ec.url_contains(\"WEBACCOUNTREDIRECT\"))\n    \n                # âœ… Now you can continue actions on the new tab\n                print(\"Now working in:\", self.driver.current_url)\n                #self.safe_click(accounting_menu, \"Accounting Module\")\n                logger.info(\"Clicked on Accounting menu\")\n            except Exception as e:\n                logger.error(f\"Failed to click on Accounting menu: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Accounting Menu Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise NavigationError(f\"Could not navigate to Accounting module: {e}\")\n    \n            #Navigate to Transactions\n            try:\n                time.sleep(5)\n                transactions_menu = WebDriverWait(self.driver, 10).until(\n                    ec.element_to_be_clickable(\n                        (By.XPATH, \"//a[contains(@class, 'main-menu-button') and contains(., 'Transactions')]\"))\n                )\n                self.safe_click(transactions_menu, \"Transactions menu\")\n                logger.info(\"Successfully clicked on Transactions menu\")\n            except Exception  as e:\n                logger.error(f\"Failed to click on Transactions menu: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Transactions Menu Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise NavigationError(f\"Could not navigate to Transactions: {e}\")\n    \n            #Navigate to Voucher Entries\n            try:\n                time.sleep(10)\n                voucher_entries_menu = self.driver.find_element(By.LINK_TEXT, \"Voucher Entries\")\n                voucher_entries_menu.click()\n                logger.info(\"Clicked on Voucher Entries menu\")\n            except Exception as e:\n                logger.error(f\"Failed to click on Voucher Entries menu: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Voucher Entries Menu Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise NavigationError(f\"Could not navigate to Voucher Entries: {e}\")\n    \n            # CLick on Dropdown named contra Voucher\n            try:\n                time.sleep(5)\n                # journal_voucher_dropdown = WebDriverWait(self.driver, 10).until(\n                #     ec.element_to_be_clickable((By.XPATH, \"//button[contains(@class, 'dropdown-toggle') and contains(., 'Journal Voucher')]\"))\n                # )\n                # self.safe_click(journal_voucher_dropdown, \"Journal Voucher dropdown\")\n                sales_tax_invoice = wait.until(ec.visibility_of_element_located((By.LINK_TEXT, \"Contra Voucher\")))\n                sales_tax_invoice.click()\n                time.sleep(10)\n                logger.info(\"Clicked on contra Voucher dropdown\")\n            except Exception as e:\n                logger.error(f\"Failed to click on contra Voucher dropdown: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"contra Voucher Dropdown Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise NavigationError(f\"Could not navigate to contra Voucher: {e}\")\n    \n             # Generate Random Refno\n    \n            # pyautogui.click()\n    \n            body = self.driver.find_element(By.TAG_NAME, \"body\")\n    \n            # Perform click\n            body.click()\n            try:\n    \n                time.sleep(5)\n                # ref_no_field = WebDriverWait(self.driver, 10).until(\n                #     ec.element_to_be_clickable((By.XPATH, \"//input[@formcontrolname='refNo']\"))\n                # )\n                # ref_no_field.clear()\n                # ref_no_field.send_keys(\"RefNo-\" + str(int(time.time())))\n    \n                def generate_random_refno(length=8):\n                    digits = string.digits\n                    return ''.join(random.choice(digits) for i in range(length))\n    \n                # Generate the random refno\n                random_refno = generate_random_refno()\n                print(f\"Generated Refno: {random_refno}\")\n    \n                # Find the input field by ID and input the random refno\n                refno_input = self.driver.find_element(By.ID, \"refno\")\n                refno_input.clear()\n                refno_input.send_keys(random_refno)\n    \n                time.sleep(3)\n                logger.info(\"Entered random RefNo\")\n            except Exception as e:\n                logger.error(f\"Failed to enter RefNo: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"RefNo Field Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise FormFieldNotFoundError(f\"Could not find or interact with RefNo field: {e}\")\n    #########################################################################################\n            # Entering Account first ledger\n            try:\n                time.sleep(5)\n                wait = WebDriverWait(self.driver, 10)\n                ledger1 = wait.until(ec.presence_of_element_located((By.ID, \"ACCODEInput_0\")))\n                ledger1.send_keys(Keys.ENTER)\n                time.sleep(5)\n                self.driver.switch_to.active_element.send_keys(ledgeraccount1 )\n               # self.driver.switch_to.active_element.send_keys(Keys.ARROW_DOWN)\n                self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n                time.sleep(5)\n                logger.info(\"Entered first Account Ledger\")\n            except Exception as e:\n                logger.error(f\"Failed to enter first Account Ledger: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Account Ledger Field Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise FormFieldNotFoundError(f\"Could not find or interact with Account Ledger field: {e}\")\n    \n            # Entering Amount for first ledger\n            try:\n                time.sleep(5)\n                self.driver.switch_to.active_element.send_keys('100', Keys.TAB)\n                time.sleep(3)\n                logger.info(\"Entered Amount for first ledger\")\n            except Exception as e:\n                logger.error(f\"Failed to enter Amount for first ledger: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Amount Field Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise FormFieldNotFoundError(f\"Could not find or interact with Amount field: {e}\")\n    \n            #Press enter in narration to add another ledger\n            try:\n    \n                self.driver.switch_to.active_element.send_keys( Keys.ENTER)\n                logger.info(\"Pressed Enter to add another ledger\")\n    \n            except Exception as e:\n                logger.error(f\"Failed to press Enter for adding another ledger: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Enter Key Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise FormFieldNotFoundError(f\"Could not press Enter key: {e}\")\n    ##############################################################################################\n                # Entering Account second ledger\n            try:\n                    time.sleep(5)\n                    wait = WebDriverWait(self.driver, 10)\n>                   ledger2 = wait.until(ec.presence_of_element_located((By.ID, \"ACCODEInput_1\")))\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_contra_Voucher.py:336: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5ff01b026df1e2fedb41ff7f318cb7b9\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000002819BECF100>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7ca4ee415+77285]\nE       \tGetHandleVerifier [0x0x7ff7ca4ee470+77376]\nE       \t(No symbol) [0x0x7ff7ca2b9a6a]\nE       \t(No symbol) [0x0x7ff7ca310406]\nE       \t(No symbol) [0x0x7ff7ca3106bc]\nE       \t(No symbol) [0x0x7ff7ca363ac7]\nE       \t(No symbol) [0x0x7ff7ca33864f]\nE       \t(No symbol) [0x0x7ff7ca36087f]\nE       \t(No symbol) [0x0x7ff7ca3383e3]\nE       \t(No symbol) [0x0x7ff7ca301521]\nE       \t(No symbol) [0x0x7ff7ca3022b3]\nE       \tGetHandleVerifier [0x0x7ff7ca7d1efd+3107021]\nE       \tGetHandleVerifier [0x0x7ff7ca7cc29d+3083373]\nE       \tGetHandleVerifier [0x0x7ff7ca7ebedd+3213485]\nE       \tGetHandleVerifier [0x0x7ff7ca50884e+184862]\nE       \tGetHandleVerifier [0x0x7ff7ca51055f+216879]\nE       \tGetHandleVerifier [0x0x7ff7ca4f7084+113236]\nE       \tGetHandleVerifier [0x0x7ff7ca4f7239+113673]\nE       \tGetHandleVerifier [0x0x7ff7ca4de298+11368]\nE       \tBaseThreadInitThunk [0x0x7ffe85327374+20]\nE       \tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_contra_Voucher.TestERPFlowCreation object at 0x000002819BEB9450>\n\n    def test_login(self):\n         self.login(\"gedehim917@decodewp.com\",\n               \"Tebahal1!\",\n               \"https://velvet.webredirect.himshang.com.np/#/pages/dashboard\")\n    \n>        self.navigate_to_accounting(ledgeraccount1=\"PURCHASE A/C\" , ledgeraccount2=\"PURCHASE A/C\")\n\ntest_contra_Voucher.py:407: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_contra_Voucher.TestERPFlowCreation object at 0x000002819BEB9450>, ledgeraccount1 = 'PURCHASE A/C'\nledgeraccount2 = 'PURCHASE A/C'\n\n        @allure.step(\"Navigate to Accounting Module\")\n        def navigate_to_accounting(self ,ledgeraccount1, ledgeraccount2):\n         #Accounting Module\n            try:\n                wait = WebDriverWait(self.driver, 10)\n                time.sleep(5)\n                accounting_menu =self.driver.find_element(By.LINK_TEXT, \"Accounting Module\")\n                accounting_menu.click()\n                # Wait for new tab to open\n                wait.until(lambda d: len(d.window_handles) > 1)\n    \n                # Switch to the new tab\n                self.driver.switch_to.window(self.driver.window_handles[1])\n    \n                # Wait until URL contains WEBACCOUNTREDIRECT\n                wait.until(ec.url_contains(\"WEBACCOUNTREDIRECT\"))\n    \n                # âœ… Now you can continue actions on the new tab\n                print(\"Now working in:\", self.driver.current_url)\n                #self.safe_click(accounting_menu, \"Accounting Module\")\n                logger.info(\"Clicked on Accounting menu\")\n            except Exception as e:\n                logger.error(f\"Failed to click on Accounting menu: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Accounting Menu Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise NavigationError(f\"Could not navigate to Accounting module: {e}\")\n    \n            #Navigate to Transactions\n            try:\n                time.sleep(5)\n                transactions_menu = WebDriverWait(self.driver, 10).until(\n                    ec.element_to_be_clickable(\n                        (By.XPATH, \"//a[contains(@class, 'main-menu-button') and contains(., 'Transactions')]\"))\n                )\n                self.safe_click(transactions_menu, \"Transactions menu\")\n                logger.info(\"Successfully clicked on Transactions menu\")\n            except Exception  as e:\n                logger.error(f\"Failed to click on Transactions menu: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Transactions Menu Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise NavigationError(f\"Could not navigate to Transactions: {e}\")\n    \n            #Navigate to Voucher Entries\n            try:\n                time.sleep(10)\n                voucher_entries_menu = self.driver.find_element(By.LINK_TEXT, \"Voucher Entries\")\n                voucher_entries_menu.click()\n                logger.info(\"Clicked on Voucher Entries menu\")\n            except Exception as e:\n                logger.error(f\"Failed to click on Voucher Entries menu: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Voucher Entries Menu Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise NavigationError(f\"Could not navigate to Voucher Entries: {e}\")\n    \n            # CLick on Dropdown named contra Voucher\n            try:\n                time.sleep(5)\n                # journal_voucher_dropdown = WebDriverWait(self.driver, 10).until(\n                #     ec.element_to_be_clickable((By.XPATH, \"//button[contains(@class, 'dropdown-toggle') and contains(., 'Journal Voucher')]\"))\n                # )\n                # self.safe_click(journal_voucher_dropdown, \"Journal Voucher dropdown\")\n                sales_tax_invoice = wait.until(ec.visibility_of_element_located((By.LINK_TEXT, \"Contra Voucher\")))\n                sales_tax_invoice.click()\n                time.sleep(10)\n                logger.info(\"Clicked on contra Voucher dropdown\")\n            except Exception as e:\n                logger.error(f\"Failed to click on contra Voucher dropdown: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"contra Voucher Dropdown Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise NavigationError(f\"Could not navigate to contra Voucher: {e}\")\n    \n             # Generate Random Refno\n    \n            # pyautogui.click()\n    \n            body = self.driver.find_element(By.TAG_NAME, \"body\")\n    \n            # Perform click\n            body.click()\n            try:\n    \n                time.sleep(5)\n                # ref_no_field = WebDriverWait(self.driver, 10).until(\n                #     ec.element_to_be_clickable((By.XPATH, \"//input[@formcontrolname='refNo']\"))\n                # )\n                # ref_no_field.clear()\n                # ref_no_field.send_keys(\"RefNo-\" + str(int(time.time())))\n    \n                def generate_random_refno(length=8):\n                    digits = string.digits\n                    return ''.join(random.choice(digits) for i in range(length))\n    \n                # Generate the random refno\n                random_refno = generate_random_refno()\n                print(f\"Generated Refno: {random_refno}\")\n    \n                # Find the input field by ID and input the random refno\n                refno_input = self.driver.find_element(By.ID, \"refno\")\n                refno_input.clear()\n                refno_input.send_keys(random_refno)\n    \n                time.sleep(3)\n                logger.info(\"Entered random RefNo\")\n            except Exception as e:\n                logger.error(f\"Failed to enter RefNo: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"RefNo Field Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise FormFieldNotFoundError(f\"Could not find or interact with RefNo field: {e}\")\n    #########################################################################################\n            # Entering Account first ledger\n            try:\n                time.sleep(5)\n                wait = WebDriverWait(self.driver, 10)\n                ledger1 = wait.until(ec.presence_of_element_located((By.ID, \"ACCODEInput_0\")))\n                ledger1.send_keys(Keys.ENTER)\n                time.sleep(5)\n                self.driver.switch_to.active_element.send_keys(ledgeraccount1 )\n               # self.driver.switch_to.active_element.send_keys(Keys.ARROW_DOWN)\n                self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n                time.sleep(5)\n                logger.info(\"Entered first Account Ledger\")\n            except Exception as e:\n                logger.error(f\"Failed to enter first Account Ledger: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Account Ledger Field Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise FormFieldNotFoundError(f\"Could not find or interact with Account Ledger field: {e}\")\n    \n            # Entering Amount for first ledger\n            try:\n                time.sleep(5)\n                self.driver.switch_to.active_element.send_keys('100', Keys.TAB)\n                time.sleep(3)\n                logger.info(\"Entered Amount for first ledger\")\n            except Exception as e:\n                logger.error(f\"Failed to enter Amount for first ledger: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Amount Field Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise FormFieldNotFoundError(f\"Could not find or interact with Amount field: {e}\")\n    \n            #Press enter in narration to add another ledger\n            try:\n    \n                self.driver.switch_to.active_element.send_keys( Keys.ENTER)\n                logger.info(\"Pressed Enter to add another ledger\")\n    \n            except Exception as e:\n                logger.error(f\"Failed to press Enter for adding another ledger: {e}\")\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=\"Enter Key Error\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise FormFieldNotFoundError(f\"Could not press Enter key: {e}\")\n    ##############################################################################################\n                # Entering Account second ledger\n            try:\n                    time.sleep(5)\n                    wait = WebDriverWait(self.driver, 10)\n                    ledger2 = wait.until(ec.presence_of_element_located((By.ID, \"ACCODEInput_1\")))\n                    ledger2.send_keys(Keys.ENTER)\n                    time.sleep(5)\n                    self.driver.switch_to.active_element.send_keys(ledgeraccount2)\n                    self.driver.switch_to.active_element.send_keys(Keys.ARROW_DOWN)\n                    self.driver.switch_to.active_element.send_keys(Keys.ENTER)\n                    time.sleep(5)\n                    logger.info(\"Entered first Account Ledger\")\n            except Exception as e:\n                    logger.error(f\"Failed to enter first Account Ledger: {e}\")\n                    allure.attach(self.driver.get_screenshot_as_png(),\n                                  name=\"Account Ledger Field Error\",\n                                  attachment_type=allure.attachment_type.PNG)\n>                   raise FormFieldNotFoundError(f\"Could not find or interact with Account Ledger field: {e}\")\nE                   test_contra_Voucher.FormFieldNotFoundError: Could not find or interact with Account Ledger field: Message: \nE                   Stacktrace:\nE                   \tGetHandleVerifier [0x0x7ff7ca4ee415+77285]\nE                   \tGetHandleVerifier [0x0x7ff7ca4ee470+77376]\nE                   \t(No symbol) [0x0x7ff7ca2b9a6a]\nE                   \t(No symbol) [0x0x7ff7ca310406]\nE                   \t(No symbol) [0x0x7ff7ca3106bc]\nE                   \t(No symbol) [0x0x7ff7ca363ac7]\nE                   \t(No symbol) [0x0x7ff7ca33864f]\nE                   \t(No symbol) [0x0x7ff7ca36087f]\nE                   \t(No symbol) [0x0x7ff7ca3383e3]\nE                   \t(No symbol) [0x0x7ff7ca301521]\nE                   \t(No symbol) [0x0x7ff7ca3022b3]\nE                   \tGetHandleVerifier [0x0x7ff7ca7d1efd+3107021]\nE                   \tGetHandleVerifier [0x0x7ff7ca7cc29d+3083373]\nE                   \tGetHandleVerifier [0x0x7ff7ca7ebedd+3213485]\nE                   \tGetHandleVerifier [0x0x7ff7ca50884e+184862]\nE                   \tGetHandleVerifier [0x0x7ff7ca51055f+216879]\nE                   \tGetHandleVerifier [0x0x7ff7ca4f7084+113236]\nE                   \tGetHandleVerifier [0x0x7ff7ca4f7239+113673]\nE                   \tGetHandleVerifier [0x0x7ff7ca4de298+11368]\nE                   \tBaseThreadInitThunk [0x0x7ffe85327374+20]\nE                   \tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\ntest_contra_Voucher.py:349: FormFieldNotFoundError"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "steps": [{"name": "Detected 'Already Logged In' popup â€” logging out first", "status": "passed", "start": 1753941696775, "stop": 1753941696848}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1753941659253, "stop": 1753941724945}, {"name": "Navigate to Accounting Module", "status": "broken", "statusDetails": {"message": "test_contra_Voucher.FormFieldNotFoundError: Could not find or interact with Account Ledger field: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7ca4ee415+77285]\n\tGetHandleVerifier [0x0x7ff7ca4ee470+77376]\n\t(No symbol) [0x0x7ff7ca2b9a6a]\n\t(No symbol) [0x0x7ff7ca310406]\n\t(No symbol) [0x0x7ff7ca3106bc]\n\t(No symbol) [0x0x7ff7ca363ac7]\n\t(No symbol) [0x0x7ff7ca33864f]\n\t(No symbol) [0x0x7ff7ca36087f]\n\t(No symbol) [0x0x7ff7ca3383e3]\n\t(No symbol) [0x0x7ff7ca301521]\n\t(No symbol) [0x0x7ff7ca3022b3]\n\tGetHandleVerifier [0x0x7ff7ca7d1efd+3107021]\n\tGetHandleVerifier [0x0x7ff7ca7cc29d+3083373]\n\tGetHandleVerifier [0x0x7ff7ca7ebedd+3213485]\n\tGetHandleVerifier [0x0x7ff7ca50884e+184862]\n\tGetHandleVerifier [0x0x7ff7ca51055f+216879]\n\tGetHandleVerifier [0x0x7ff7ca4f7084+113236]\n\tGetHandleVerifier [0x0x7ff7ca4f7239+113673]\n\tGetHandleVerifier [0x0x7ff7ca4de298+11368]\n\tBaseThreadInitThunk [0x0x7ffe85327374+20]\n\tRtlUserThreadStart [0x0x7ffe8617cc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\Whole codes\\Accounting Module\\test_contra_Voucher.py\", line 349, in navigate_to_accounting\n    raise FormFieldNotFoundError(f\"Could not find or interact with Account Ledger field: {e}\")\n"}, "attachments": [{"name": "Account Ledger Field Error", "source": "9c4b98fa-ae9e-45c2-be5a-30260280906b-attachment.png", "type": "image/png"}], "parameters": [{"name": "ledgeraccount1", "value": "'PURCHASE A/C'"}, {"name": "ledgeraccount2", "value": "'PURCHASE A/C'"}], "start": 1753941724946, "stop": 1753941842403}], "attachments": [{"name": "log", "source": "41c12685-2eba-477c-a27e-edd4af0bf194-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "2f38a79f-690d-44f7-82e7-a52833e0ed26-attachment.txt", "type": "text/plain"}], "start": 1753941659253, "stop": 1753941842408, "uuid": "f59ae58b-6971-43db-96c9-49c17ff2eed3", "historyId": "fb8c14adbbc3f42244d46dc7d03a7b6d", "testCaseId": "fb8c14adbbc3f42244d46dc7d03a7b6d", "fullName": "test_contra_Voucher.TestERPFlowCreation#test_login", "labels": [{"name": "feature", "value": "Test ERP FLow Creation"}, {"name": "suite", "value": "test_contra_Voucher"}, {"name": "subSuite", "value": "TestERPFlowCreation"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "13732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_contra_Voucher"}]}