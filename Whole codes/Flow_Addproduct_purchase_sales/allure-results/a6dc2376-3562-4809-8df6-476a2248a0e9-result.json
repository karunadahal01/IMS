{"name": "test_sales_tax_invoice", "status": "broken", "statusDetails": {"message": "test_Flow_(main).NavigationError: Failed to Navigate: Alert Text: Data Saved Successfully. Do you want to continue adding products to this group ?\nMessage: unexpected alert open: {Alert text : Data Saved Successfully. Do you want to continue adding products to this group ?}\n  (Session info: chrome=138.0.7204.98)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6a7446f75+76917]\n\tGetHandleVerifier [0x0x7ff6a7446fd0+77008]\n\t(No symbol) [0x0x7ff6a71f9dea]\n\t(No symbol) [0x0x7ff6a72a110c]\n\t(No symbol) [0x0x7ff6a7278243]\n\t(No symbol) [0x0x7ff6a7241431]\n\t(No symbol) [0x0x7ff6a72421c3]\n\tGetHandleVerifier [0x0x7ff6a771d2ad+3051437]\n\tGetHandleVerifier [0x0x7ff6a7717903+3028483]\n\tGetHandleVerifier [0x0x7ff6a773589d+3151261]\n\tGetHandleVerifier [0x0x7ff6a746183e+185662]\n\tGetHandleVerifier [0x0x7ff6a74696ff+218111]\n\tGetHandleVerifier [0x0x7ff6a744faf4+112628]\n\tGetHandleVerifier [0x0x7ff6a744fca9+113065]\n\tGetHandleVerifier [0x0x7ff6a7436c78+10616]\n\tBaseThreadInitThunk [0x0x7ffd2c157374+20]\n\tRtlUserThreadStart [0x0x7ffd2c85cc91+33]", "trace": "self = <test_Flow_(main).TestERPFlowCreation object at 0x00000238B2882190>, barcode_purchase = 777\n\n    def Purchase_invoice(self, barcode_purchase):\n        time.sleep(5)\n        # Navigation to transaction\n        try:\n>           nav_elements = self.driver.find_elements(By.XPATH, \"//a | //div[@class*='nav'] | //span[@class*='nav']\")\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_Flow_(main).py:578: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:952: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000238B29E9480>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Data Saved Successfully. Do you want to continue adding products t...ff6a7436c78+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd2c157374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd2c85cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Data Saved Successfully. Do you want to continue adding products to this group ?\nE           Message: unexpected alert open: {Alert text : Data Saved Successfully. Do you want to continue adding products to this group ?}\nE             (Session info: chrome=138.0.7204.98)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff6a7446f75+76917]\nE           \tGetHandleVerifier [0x0x7ff6a7446fd0+77008]\nE           \t(No symbol) [0x0x7ff6a71f9dea]\nE           \t(No symbol) [0x0x7ff6a72a110c]\nE           \t(No symbol) [0x0x7ff6a7278243]\nE           \t(No symbol) [0x0x7ff6a7241431]\nE           \t(No symbol) [0x0x7ff6a72421c3]\nE           \tGetHandleVerifier [0x0x7ff6a771d2ad+3051437]\nE           \tGetHandleVerifier [0x0x7ff6a7717903+3028483]\nE           \tGetHandleVerifier [0x0x7ff6a773589d+3151261]\nE           \tGetHandleVerifier [0x0x7ff6a746183e+185662]\nE           \tGetHandleVerifier [0x0x7ff6a74696ff+218111]\nE           \tGetHandleVerifier [0x0x7ff6a744faf4+112628]\nE           \tGetHandleVerifier [0x0x7ff6a744fca9+113065]\nE           \tGetHandleVerifier [0x0x7ff6a7436c78+10616]\nE           \tBaseThreadInitThunk [0x0x7ffd2c157374+20]\nE           \tRtlUserThreadStart [0x0x7ffd2c85cc91+33]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:231: UnexpectedAlertPresentException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Flow_(main).TestERPFlowCreation object at 0x00000238B2882190>\n\n    def test_sales_tax_invoice(self):\n        allure.step(\"Creating new product item\")\n        self.login(\"gedehim917@decodewp.com\",\n                   \"Tebahal1!\",\n                   \"https://velvet.webredirect.himshang.com.np/#/pages/dashboard\")\n        self.product_master(\n            product_item=\"Test3\",\n            HS_code=\"123\",\n            unit=\"kg.\",\n            item_type=\"Service Item\",\n            description=\"This is description\",\n            category=\"N/A\",\n            short_name=\"XYZ\",\n            purchase_price=\"120\",\n            sales_price=\"140\",\n            alt_unit=\"Each\",\n            conversion_factor=\"1000\",\n            barcode_map=\"777\",\n            barcode_unit=\"kg.\")\n    \n>       self.Purchase_invoice(\n                         barcode_purchase=777)\n\ntest_Flow_(main).py:1462: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_Flow_(main).TestERPFlowCreation object at 0x00000238B2882190>, barcode_purchase = 777\n\n    def Purchase_invoice(self, barcode_purchase):\n        time.sleep(5)\n        # Navigation to transaction\n        try:\n            nav_elements = self.driver.find_elements(By.XPATH, \"//a | //div[@class*='nav'] | //span[@class*='nav']\")\n            print(f\"Found {len(nav_elements)} potential navigation elements\")\n    \n            visible_nav_texts = []\n            for element in nav_elements[:15]:\n                try:\n                    text = element.text.strip()\n                    if text and len(text) > 0 and element.is_displayed():\n                        visible_nav_texts.append(text)\n                except WebDriverException:\n                     pass\n    \n            print(\"Available navigation texts:\")\n            for text in visible_nav_texts:\n                print(f\"  - '{text}'\")\n        except Exception as e:\n            print(f\"Navigation debug failed: {e}\")\n>           raise NavigationError(f\"Failed to Navigate: {e}\")\nE           test_Flow_(main).NavigationError: Failed to Navigate: Alert Text: Data Saved Successfully. Do you want to continue adding products to this group ?\nE           Message: unexpected alert open: {Alert text : Data Saved Successfully. Do you want to continue adding products to this group ?}\nE             (Session info: chrome=138.0.7204.98)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff6a7446f75+76917]\nE           \tGetHandleVerifier [0x0x7ff6a7446fd0+77008]\nE           \t(No symbol) [0x0x7ff6a71f9dea]\nE           \t(No symbol) [0x0x7ff6a72a110c]\nE           \t(No symbol) [0x0x7ff6a7278243]\nE           \t(No symbol) [0x0x7ff6a7241431]\nE           \t(No symbol) [0x0x7ff6a72421c3]\nE           \tGetHandleVerifier [0x0x7ff6a771d2ad+3051437]\nE           \tGetHandleVerifier [0x0x7ff6a7717903+3028483]\nE           \tGetHandleVerifier [0x0x7ff6a773589d+3151261]\nE           \tGetHandleVerifier [0x0x7ff6a746183e+185662]\nE           \tGetHandleVerifier [0x0x7ff6a74696ff+218111]\nE           \tGetHandleVerifier [0x0x7ff6a744faf4+112628]\nE           \tGetHandleVerifier [0x0x7ff6a744fca9+113065]\nE           \tGetHandleVerifier [0x0x7ff6a7436c78+10616]\nE           \tBaseThreadInitThunk [0x0x7ffd2c157374+20]\nE           \tRtlUserThreadStart [0x0x7ffd2c85cc91+33]\n\ntest_Flow_(main).py:595: NavigationError"}, "steps": [{"name": "Login with username: 'gedehim917@decodewp.com'", "status": "passed", "steps": [{"name": "Detected 'Already Logged In' popup — logging out first", "status": "passed", "start": 1752214179498, "stop": 1752214179628}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1752214146551, "stop": 1752214197710}, {"name": "Creating product master for item: 'Test3'", "status": "passed", "steps": [{"name": "Clicking on 'Masters' menu", "status": "passed", "start": 1752214197711, "stop": 1752214197984}, {"name": "Waiting for 'Product Master' to be visible and clicking it", "status": "passed", "start": 1752214208308, "stop": 1752214213524}, {"name": "Clicking on 'Add Product' button", "status": "passed", "start": 1752214213524, "stop": 1752214223644}, {"name": "Clicking 'Add Product' label", "status": "passed", "start": 1752214223644, "stop": 1752214231877}, {"name": "Clicking on Item Group input field", "status": "passed", "start": 1752214234956, "stop": 1752214245132}, {"name": "Clicking on main group input field", "status": "passed", "start": 1752214245132, "stop": 1752214253498}, {"name": "Entering product item name", "status": "passed", "start": 1752214253498, "stop": 1752214253651}, {"name": "Entering HSC code", "status": "passed", "start": 1752214258689, "stop": 1752214258757}, {"name": "Clicking on vatable checkbox", "status": "passed", "start": 1752214258757, "stop": 1752214263985}, {"name": "Selecting unit", "status": "passed", "start": 1752214263985, "stop": 1752214269057}, {"name": "Selecting item type", "status": "passed", "start": 1752214269057, "stop": 1752214274163}, {"name": "Entering description", "status": "passed", "start": 1752214274164, "stop": 1752214279357}, {"name": "Entering category", "status": "passed", "start": 1752214279357, "stop": 1752214284435}, {"name": "Entering short name", "status": "passed", "start": 1752214284435, "stop": 1752214289507}, {"name": "Entering purchase price", "status": "passed", "start": 1752214289507, "stop": 1752214299651}, {"name": "Entering sales price", "status": "passed", "start": 1752214299651, "stop": 1752214309876}, {"name": "Navigating to Alternate Unit tab", "status": "passed", "start": 1752214309876, "stop": 1752214318009}, {"name": "Clicking on 'Add Alternate Unit' button", "status": "passed", "start": 1752214318009, "stop": 1752214318223}, {"name": "Entering conversion factor", "status": "passed", "start": 1752214318223, "stop": 1752214323361}, {"name": "Clicking on 'Add Barcode' button", "status": "passed", "start": 1752214323361, "stop": 1752214331485}, {"name": "Entering barcode", "status": "passed", "start": 1752214331485, "stop": 1752214346949}, {"name": "Clicking on 'Map' button", "status": "passed", "start": 1752214346949, "stop": 1752214357059}, {"name": "Clicking on 'Save' button", "status": "passed", "start": 1752214357060, "stop": 1752214367158}], "parameters": [{"name": "product_item", "value": "'Test3'"}, {"name": "HS_code", "value": "'123'"}, {"name": "unit", "value": "'kg.'"}, {"name": "item_type", "value": "'Service Item'"}, {"name": "description", "value": "'This is description'"}, {"name": "category", "value": "'N/A'"}, {"name": "short_name", "value": "'XYZ'"}, {"name": "purchase_price", "value": "'120'"}, {"name": "sales_price", "value": "'140'"}, {"name": "alt_unit", "value": "'Each'"}, {"name": "conversion_factor", "value": "'1000'"}, {"name": "barcode_map", "value": "'777'"}, {"name": "barcode_unit", "value": "'kg.'"}], "start": 1752214197711, "stop": 1752214377159}], "attachments": [{"name": "stdout", "source": "9f213851-f5a4-48cf-a19c-c91420ea1351-attachment.txt", "type": "text/plain"}], "start": 1752214146551, "stop": 1752214382165, "uuid": "c3975e0e-db56-4659-9cda-1a749916c98e", "historyId": "6f3a85de6b26dfe2f297ab182b819b25", "testCaseId": "6f3a85de6b26dfe2f297ab182b819b25", "fullName": "test_Flow_(main).TestERPFlowCreation#test_sales_tax_invoice", "labels": [{"name": "feature", "value": "Test ERP FLow Creation"}, {"name": "suite", "value": "test_Flow_(main)"}, {"name": "subSuite", "value": "TestERPFlowCreation"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "9120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Flow_(main)"}]}