{"name": "test_complete_product_flow", "status": "failed", "statusDetails": {"message": "Failed: Complete product flow test failed: Failed to enter item name", "trace": "self = <test_flow_product.TestProductFlow object at 0x0000021E7E5B63F0>, product_item = 'Testing1', HS_code = '123'\nunit = 'kg.', item_type = 'Service Item', description = 'This is description', category = 'N/A', short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'Each', conversion_factor = '1000', barcode_map = '2020'\nbarcode_unit = 'kg.'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def create_product_master(self, product_item, HS_code, unit, item_type,\n                              description, category, short_name, purchase_price, sales_price,\n                              alt_unit, conversion_factor, barcode_map, barcode_unit):\n        \"\"\"\n        Create product master with comprehensive error handling.\n        \"\"\"\n        wait = WebDriverWait(self.driver, 15)\n    \n        try:\n            with allure.step(\"Navigating to Product Master screen\"):\n                # Navigate to Masters menu\n                try:\n                    Master_menu = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, \"Masters\")))\n                    Master_menu.click()\n                    logger.info(\"Clicked Masters menu\")\n                except TimeoutException:\n                    raise ProductMasterCreationError(\"Masters menu not found or not clickable\")\n    \n                # Hover over Inventory Info\n                try:\n                    inventory_info = wait.until(EC.presence_of_element_located((By.LINK_TEXT, \"Inventory Info\")))\n                    ActionChains(self.driver).move_to_element(inventory_info).perform()\n                    logger.info(\"Hovered over Inventory Info\")\n                except TimeoutException:\n                    raise ProductMasterCreationError(\"Inventory Info menu not found\")\n    \n                # Click Product Master\n                try:\n                    product_master_link = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, \"Product Master\")))\n                    product_master_link.click()\n                    logger.info(\"Clicked Product Master link\")\n                except TimeoutException:\n                    raise ProductMasterCreationError(\"Product Master link not found or not clickable\")\n    \n            with allure.step(\"Starting product creation\"):\n                # Click Add Product button with fallback\n                try:\n                    add_product_btn = wait.until(\n                        EC.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Add Product')]\")))\n                    self.safe_click(add_product_btn, \"Add Product button\")\n                    time.sleep(2)\n                except TimeoutException:\n                    raise ProductMasterCreationError(\"Add Product button not found\")\n    \n                # Set zoom level\n                try:\n                    self.driver.execute_script(\"document.body.style.zoom='80%'\")\n                    logger.info(\"Set zoom level to 80%\")\n                except WebDriverException:\n                    logger.warning(\"Failed to set zoom level, continuing without zoom\")\n    \n                # Fill item group\n                try:\n                    item_group_input = wait.until(EC.element_to_be_clickable(\n                        (By.XPATH, \"//input[@placeholder='-- Press Enter For Item Group --']\")))\n                    item_group_input.click()\n                    item_group_input.send_keys(Keys.ENTER, Keys.ENTER)\n                    logger.info(\"Filled item group\")\n                except (TimeoutException, ElementNotInteractableException):\n                    logger.warning(\"Item group input not found or not interactable, continuing\")\n    \n                # Main group\n                try:\n                    main_group_input = wait.until(\n                        EC.element_to_be_clickable((By.XPATH, \"//ng-select//input[@type='text']\")))\n                    main_group_input.click()\n                    main_group_input.send_keys(Keys.ENTER, Keys.ENTER)\n    \n                    ok_button = wait.until(\n                        EC.element_to_be_clickable((By.XPATH, \"//button[.//span[normalize-space()='Ok']]\")))\n                    ok_button.click()\n                    logger.info(\"Selected main group\")\n                except (TimeoutException, ElementNotInteractableException):\n                    logger.warning(\"Main group selection failed, continuing\")\n    \n                # Fill product details with individual error handling\n                try:\n>                   item_name_field = wait.until(\n                        EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Enter Item Name']\")))\n\ntest_flow_product.py:1223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"743b107fa3aae08a9035cded8b6ddb95\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000021E7B339A80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e505cda5+78885]\nE       \tGetHandleVerifier [0x0x7ff6e505ce00+78976]\nE       \t(No symbol) [0x0x7ff6e4e19bca]\nE       \t(No symbol) [0x0x7ff6e4e70766]\nE       \t(No symbol) [0x0x7ff6e4e70a1c]\nE       \t(No symbol) [0x0x7ff6e4ec4467]\nE       \t(No symbol) [0x0x7ff6e4e98bcf]\nE       \t(No symbol) [0x0x7ff6e4ec122f]\nE       \t(No symbol) [0x0x7ff6e4e98963]\nE       \t(No symbol) [0x0x7ff6e4e616b1]\nE       \t(No symbol) [0x0x7ff6e4e62443]\nE       \tGetHandleVerifier [0x0x7ff6e5334eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff6e532f33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff6e534e592+3165202]\nE       \tGetHandleVerifier [0x0x7ff6e507730e+186766]\nE       \tGetHandleVerifier [0x0x7ff6e507eb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff6e50659b4+114740]\nE       \tGetHandleVerifier [0x0x7ff6e5065b69+115177]\nE       \tGetHandleVerifier [0x0x7ff6e504c368+10728]\nE       \tBaseThreadInitThunk [0x0x7fffc23f7374+20]\nE       \tRtlUserThreadStart [0x0x7fffc31fcc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_flow_product.TestProductFlow object at 0x0000021E7E5B63F0>\n\n    @allure.feature(\"End-to-End Flow\")\n    @allure.story(\"Complete Product Flow\")\n    def test_complete_product_flow(self):\n        \"\"\"Test complete end-to-end product flow.\"\"\"\n        try:\n            # Login\n            self.login(\n                TEST_CONFIG[\"username\"],\n                TEST_CONFIG[\"password\"],\n                TEST_CONFIG[\"url\"]\n            )\n    \n            # Create product master\n            product_data = TEST_CONFIG[\"product_data\"]\n>           self.create_product_master(\n                product_data[\"product_item\"],\n                product_data[\"HS_code\"],\n                product_data[\"unit\"],\n                product_data[\"item_type\"],\n                product_data[\"description\"],\n                product_data[\"category\"],\n                product_data[\"short_name\"],\n                product_data[\"purchase_price\"],\n                product_data[\"sales_price\"],\n                product_data[\"alt_unit\"],\n                product_data[\"conversion_factor\"],\n                product_data[\"barcode_map\"],\n                product_data[\"barcode_unit\"]\n            )\n\ntest_flow_product.py:1400: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_flow_product.TestProductFlow object at 0x0000021E7E5B63F0>, product_item = 'Testing1', HS_code = '123'\nunit = 'kg.', item_type = 'Service Item', description = 'This is description', category = 'N/A', short_name = 'XYZ'\npurchase_price = '120', sales_price = '140', alt_unit = 'Each', conversion_factor = '1000', barcode_map = '2020'\nbarcode_unit = 'kg.'\n\n    @allure.step(\"Creating product master for item: {product_item}\")\n    def create_product_master(self, product_item, HS_code, unit, item_type,\n                              description, category, short_name, purchase_price, sales_price,\n                              alt_unit, conversion_factor, barcode_map, barcode_unit):\n        \"\"\"\n        Create product master with comprehensive error handling.\n        \"\"\"\n        wait = WebDriverWait(self.driver, 15)\n    \n        try:\n            with allure.step(\"Navigating to Product Master screen\"):\n                # Navigate to Masters menu\n                try:\n                    Master_menu = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, \"Masters\")))\n                    Master_menu.click()\n                    logger.info(\"Clicked Masters menu\")\n                except TimeoutException:\n                    raise ProductMasterCreationError(\"Masters menu not found or not clickable\")\n    \n                # Hover over Inventory Info\n                try:\n                    inventory_info = wait.until(EC.presence_of_element_located((By.LINK_TEXT, \"Inventory Info\")))\n                    ActionChains(self.driver).move_to_element(inventory_info).perform()\n                    logger.info(\"Hovered over Inventory Info\")\n                except TimeoutException:\n                    raise ProductMasterCreationError(\"Inventory Info menu not found\")\n    \n                # Click Product Master\n                try:\n                    product_master_link = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, \"Product Master\")))\n                    product_master_link.click()\n                    logger.info(\"Clicked Product Master link\")\n                except TimeoutException:\n                    raise ProductMasterCreationError(\"Product Master link not found or not clickable\")\n    \n            with allure.step(\"Starting product creation\"):\n                # Click Add Product button with fallback\n                try:\n                    add_product_btn = wait.until(\n                        EC.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Add Product')]\")))\n                    self.safe_click(add_product_btn, \"Add Product button\")\n                    time.sleep(2)\n                except TimeoutException:\n                    raise ProductMasterCreationError(\"Add Product button not found\")\n    \n                # Set zoom level\n                try:\n                    self.driver.execute_script(\"document.body.style.zoom='80%'\")\n                    logger.info(\"Set zoom level to 80%\")\n                except WebDriverException:\n                    logger.warning(\"Failed to set zoom level, continuing without zoom\")\n    \n                # Fill item group\n                try:\n                    item_group_input = wait.until(EC.element_to_be_clickable(\n                        (By.XPATH, \"//input[@placeholder='-- Press Enter For Item Group --']\")))\n                    item_group_input.click()\n                    item_group_input.send_keys(Keys.ENTER, Keys.ENTER)\n                    logger.info(\"Filled item group\")\n                except (TimeoutException, ElementNotInteractableException):\n                    logger.warning(\"Item group input not found or not interactable, continuing\")\n    \n                # Main group\n                try:\n                    main_group_input = wait.until(\n                        EC.element_to_be_clickable((By.XPATH, \"//ng-select//input[@type='text']\")))\n                    main_group_input.click()\n                    main_group_input.send_keys(Keys.ENTER, Keys.ENTER)\n    \n                    ok_button = wait.until(\n                        EC.element_to_be_clickable((By.XPATH, \"//button[.//span[normalize-space()='Ok']]\")))\n                    ok_button.click()\n                    logger.info(\"Selected main group\")\n                except (TimeoutException, ElementNotInteractableException):\n                    logger.warning(\"Main group selection failed, continuing\")\n    \n                # Fill product details with individual error handling\n                try:\n                    item_name_field = wait.until(\n                        EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Enter Item Name']\")))\n                    item_name_field.clear()\n                    item_name_field.send_keys(product_item, Keys.TAB)\n                    logger.info(\"Entered item name\")\n                except (TimeoutException, ElementNotInteractableException):\n>                   raise ProductMasterCreationError(\"Failed to enter item name\")\nE                   test_flow_product.ProductMasterCreationError: Failed to enter item name\n\ntest_flow_product.py:1229: ProductMasterCreationError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_flow_product.TestProductFlow object at 0x0000021E7E5B63F0>\n\n    @allure.feature(\"End-to-End Flow\")\n    @allure.story(\"Complete Product Flow\")\n    def test_complete_product_flow(self):\n        \"\"\"Test complete end-to-end product flow.\"\"\"\n        try:\n            # Login\n            self.login(\n                TEST_CONFIG[\"username\"],\n                TEST_CONFIG[\"password\"],\n                TEST_CONFIG[\"url\"]\n            )\n    \n            # Create product master\n            product_data = TEST_CONFIG[\"product_data\"]\n            self.create_product_master(\n                product_data[\"product_item\"],\n                product_data[\"HS_code\"],\n                product_data[\"unit\"],\n                product_data[\"item_type\"],\n                product_data[\"description\"],\n                product_data[\"category\"],\n                product_data[\"short_name\"],\n                product_data[\"purchase_price\"],\n                product_data[\"sales_price\"],\n                product_data[\"alt_unit\"],\n                product_data[\"conversion_factor\"],\n                product_data[\"barcode_map\"],\n                product_data[\"barcode_unit\"]\n            )\n    \n            # Additional verification or flow steps can be added here\n            logger.info(\"Complete product flow test passed successfully\")\n    \n        except (LoginFailedError, ProductMasterCreationError) as e:\n>           pytest.fail(f\"Complete product flow test failed: {e}\")\nE           Failed: Complete product flow test failed: Failed to enter item name\n\ntest_flow_product.py:1420: Failed"}, "description": "Test complete end-to-end product flow.", "steps": [{"name": "Perform login with username: 'gedehim917@decodewp.com'", "status": "passed", "steps": [{"name": "Entering credentials and clicking Sign In", "status": "passed", "start": 1751876398509, "stop": 1751876399021}, {"name": "Detected 'Already Logged In' popup — logging out first", "status": "passed", "start": 1751876407381, "stop": 1751876407489}], "attachments": [{"name": "login_success", "source": "6a937697-121a-4e82-9efa-5dbfd2149b78-attachment.png", "type": "image/png"}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1751876386736, "stop": 1751876425722}, {"name": "Creating product master for item: 'Testing1'", "status": "broken", "statusDetails": {"message": "test_flow_product.ProductMasterCreationError: Failed to enter item name\n", "trace": "  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\extra testing\\Custom Exception\\test_flow_product.py\", line 1229, in create_product_master\n    raise ProductMasterCreationError(\"Failed to enter item name\")\n"}, "steps": [{"name": "Navigating to Product Master screen", "status": "passed", "start": 1751876425723, "stop": 1751876426312}, {"name": "Starting product creation", "status": "broken", "statusDetails": {"message": "test_flow_product.ProductMasterCreationError: Failed to enter item name\n", "trace": "  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\extra testing\\Custom Exception\\test_flow_product.py\", line 1229, in create_product_master\n    raise ProductMasterCreationError(\"Failed to enter item name\")\n"}, "start": 1751876426312, "stop": 1751876490313}], "parameters": [{"name": "product_item", "value": "'Testing1'"}, {"name": "HS_code", "value": "'123'"}, {"name": "unit", "value": "'kg.'"}, {"name": "item_type", "value": "'Service Item'"}, {"name": "description", "value": "'This is description'"}, {"name": "category", "value": "'N/A'"}, {"name": "short_name", "value": "'XYZ'"}, {"name": "purchase_price", "value": "'120'"}, {"name": "sales_price", "value": "'140'"}, {"name": "alt_unit", "value": "'Each'"}, {"name": "conversion_factor", "value": "'1000'"}, {"name": "barcode_map", "value": "'2020'"}, {"name": "barcode_unit", "value": "'kg.'"}], "start": 1751876425722, "stop": 1751876490317}], "attachments": [{"name": "log", "source": "9d55635a-7dac-4360-9d44-71b8ce597540-attachment.txt", "type": "text/plain"}], "start": 1751876386735, "stop": 1751876490320, "uuid": "08221e7c-2788-4869-b2b7-585f66468c5e", "historyId": "86e63d7b794efcbf1015fd912fa7f6ce", "testCaseId": "86e63d7b794efcbf1015fd912fa7f6ce", "fullName": "test_flow_product.TestProductFlow#test_complete_product_flow", "labels": [{"name": "feature", "value": "End-to-End Flow"}, {"name": "story", "value": "Complete Product Flow"}, {"name": "suite", "value": "test_flow_product"}, {"name": "subSuite", "value": "TestProductFlow"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "14440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow_product"}]}