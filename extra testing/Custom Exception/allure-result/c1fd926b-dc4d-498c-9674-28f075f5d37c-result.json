{"name": "test_product_master_creation", "status": "failed", "statusDetails": {"message": "Failed: Product master creation test failed: Login failed due to WebDriver error: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome=137.0.7151.122)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff76016cda5+78885]\n\tGetHandleVerifier [0x0x7ff76016ce00+78976]\n\t(No symbol) [0x0x7ff75ff29bca]\n\t(No symbol) [0x0x7ff75ff265e2]\n\t(No symbol) [0x0x7ff75ff17319]\n\t(No symbol) [0x0x7ff75ff190c1]\n\t(No symbol) [0x0x7ff75ff17636]\n\t(No symbol) [0x0x7ff75ff17096]\n\t(No symbol) [0x0x7ff75ff16d5a]\n\t(No symbol) [0x0x7ff75ff1492f]\n\t(No symbol) [0x0x7ff75ff151ac]\n\t(No symbol) [0x0x7ff75ff2db7a]\n\t(No symbol) [0x0x7ff75ffd201e]\n\t(No symbol) [0x0x7ff75ffa8b8a]\n\t(No symbol) [0x0x7ff75ffd122f]\n\t(No symbol) [0x0x7ff75ffa8963]\n\t(No symbol) [0x0x7ff75ff716b1]\n\t(No symbol) [0x0x7ff75ff72443]\n\tGetHandleVerifier [0x0x7ff760444eed+3061101]\n\tGetHandleVerifier [0x0x7ff76043f33d+3037629]\n\tGetHandleVerifier [0x0x7ff76045e592+3165202]\n\tGetHandleVerifier [0x0x7ff76018730e+186766]\n\tGetHandleVerifier [0x0x7ff76018eb3f+217535]\n\tGetHandleVerifier [0x0x7ff7601759b4+114740]\n\tGetHandleVerifier [0x0x7ff760175b69+115177]\n\tGetHandleVerifier [0x0x7ff76015c368+10728]\n\tBaseThreadInitThunk [0x0x7fffc23f7374+20]\n\tRtlUserThreadStart [0x0x7fffc31fcc91+33]", "trace": "self = <test_flow_product.TestProductFlow object at 0x00000166938979D0>, username = 'gedehim917@decodewp.com'\npassword = 'Tebahal1!', link = 'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'\n\n    @allure.step(\"Perform login with username: {username}\")\n    @pytest.hookimpl(hookwrapper=True)\n    def login(self, username, password, link):\n        \"\"\"\n        Perform login with improved error handling and retry mechanism.\n        \"\"\"\n        try:\n            self.driver.maximize_window()\n>           self.driver.get(link)\n\ntest_flow_product.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:472: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016693955D10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...ff76015c368+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7fffc23f7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7fffc31fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=137.0.7151.122)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff76016cda5+78885]\nE       \tGetHandleVerifier [0x0x7ff76016ce00+78976]\nE       \t(No symbol) [0x0x7ff75ff29bca]\nE       \t(No symbol) [0x0x7ff75ff265e2]\nE       \t(No symbol) [0x0x7ff75ff17319]\nE       \t(No symbol) [0x0x7ff75ff190c1]\nE       \t(No symbol) [0x0x7ff75ff17636]\nE       \t(No symbol) [0x0x7ff75ff17096]\nE       \t(No symbol) [0x0x7ff75ff16d5a]\nE       \t(No symbol) [0x0x7ff75ff1492f]\nE       \t(No symbol) [0x0x7ff75ff151ac]\nE       \t(No symbol) [0x0x7ff75ff2db7a]\nE       \t(No symbol) [0x0x7ff75ffd201e]\nE       \t(No symbol) [0x0x7ff75ffa8b8a]\nE       \t(No symbol) [0x0x7ff75ffd122f]\nE       \t(No symbol) [0x0x7ff75ffa8963]\nE       \t(No symbol) [0x0x7ff75ff716b1]\nE       \t(No symbol) [0x0x7ff75ff72443]\nE       \tGetHandleVerifier [0x0x7ff760444eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff76043f33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff76045e592+3165202]\nE       \tGetHandleVerifier [0x0x7ff76018730e+186766]\nE       \tGetHandleVerifier [0x0x7ff76018eb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff7601759b4+114740]\nE       \tGetHandleVerifier [0x0x7ff760175b69+115177]\nE       \tGetHandleVerifier [0x0x7ff76015c368+10728]\nE       \tBaseThreadInitThunk [0x0x7fffc23f7374+20]\nE       \tRtlUserThreadStart [0x0x7fffc31fcc91+33]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_flow_product.TestProductFlow object at 0x00000166938979D0>\n\n    @allure.feature(\"Product Management\")\n    @allure.story(\"Product Master Creation\")\n    @pytest.hookimpl(hookwrapper=True)\n    def test_product_master_creation(self):\n        \"\"\"Test complete product master creation flow.\"\"\"\n        try:\n            # First login\n>           self.login(\n                TEST_CONFIG[\"username\"],\n                TEST_CONFIG[\"password\"],\n                TEST_CONFIG[\"url\"]\n            )\n\ntest_flow_product.py:539: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_flow_product.TestProductFlow object at 0x00000166938979D0>, username = 'gedehim917@decodewp.com'\npassword = 'Tebahal1!', link = 'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'\n\n    @allure.step(\"Perform login with username: {username}\")\n    @pytest.hookimpl(hookwrapper=True)\n    def login(self, username, password, link):\n        \"\"\"\n        Perform login with improved error handling and retry mechanism.\n        \"\"\"\n        try:\n            self.driver.maximize_window()\n            self.driver.get(link)\n            logger.info(f\"Navigated to login page: {link}\")\n    \n            with allure.step(\"Entering credentials and clicking Sign In\"):\n                # Wait for username field and enter credentials\n                username_field = WebDriverWait(self.driver, 15).until(\n                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'input[formcontrolname=\"username\"]'))\n                )\n                username_field.clear()\n                username_field.send_keys(username)\n                logger.info(\"Username entered successfully\")\n    \n                # Enter password\n                password_field = WebDriverWait(self.driver, 10).until(\n                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'input[formcontrolname=\"password\"]'))\n                )\n                password_field.clear()\n                password_field.send_keys(password)\n                logger.info(\"Password entered successfully\")\n    \n                # Click Sign In button with fallback methods\n                sign_in_btn = WebDriverWait(self.driver, 10).until(\n                    EC.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Sign In')]\"))\n                )\n                self.safe_click(sign_in_btn, \"Sign In button\")\n    \n            # Handle already logged in scenario\n            try:\n                logout_btn = WebDriverWait(self.driver, 20).until(\n                    EC.element_to_be_clickable((By.XPATH, \"//button[.//span[text()='Logout']]\"))\n                )\n                logger.info(\"Already Logged In popup detected\")\n    \n                # Click Logout button with fallback to JavaScript click\n                try:\n                    with allure.step(\"Detected 'Already Logged In' popup — logging out first\"):\n                        self.safe_click(logout_btn, \"Logout button\")\n                        logger.info(\"Logout button clicked successfully\")\n                except Exception as e:\n                    logger.error(f\"Failed to click logout button: {e}\")\n                    raise LoginFailedError(f\"Could not click logout button: {e}\")\n    \n                logger.info(\"Logout button clicked successfully\")\n                time.sleep(8)  # Wait for logout to complete\n    \n                # Wait for the \"Sign In\" button to be clickable and press Enter\n                sign_in_btn = WebDriverWait(self.driver, 10).until(\n                    EC.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Sign In')]\"))\n                )\n    \n                # Press Enter on the \"Sign In\" button\n                sign_in_btn.send_keys(Keys.ENTER)\n                logger.info(\"Pressed Enter on Sign In button after logout\")\n    \n            except TimeoutException:\n                logger.info(\"No 'Already Logged In' popup detected — continuing without logout\")\n    \n            # Verify login success with multiple possible indicators\n            try:\n                login_success_indicators = [\n                    (By.XPATH, \"//span[contains(text(), 'Dashboard')]\"),\n                    (By.XPATH, \"//span[contains(text(), 'Masters')]\"),\n                    (By.XPATH, \"//a[contains(text(), 'Masters')]\"),\n                    (By.XPATH, \"//*[contains(text(), 'Welcome')]\")\n                ]\n    \n                login_successful = False\n                for locator in login_success_indicators:\n                    try:\n                        WebDriverWait(self.driver, 5).until(EC.presence_of_element_located(locator))\n                        login_successful = True\n                        logger.info(f\"Login verified with locator: {locator}\")\n                        break\n                    except TimeoutException:\n                        continue\n    \n                if not login_successful:\n                    raise LoginFailedError(\"Login verification failed: no expected dashboard elements found\")\n    \n                allure.attach(self.driver.get_screenshot_as_png(), name=\"login_success\",\n                              attachment_type=allure.attachment_type.PNG)\n                logger.info(\"Login successful\")\n    \n            except TimeoutException:\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"login_failed\",\n                              attachment_type=allure.attachment_type.PNG)\n                raise LoginFailedError(\"Login failed: expected dashboard elements not found after timeout\")\n    \n        except (NoSuchElementException, ElementNotInteractableException) as e:\n            logger.error(f\"Element interaction error during login: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"login_element_error\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise LoginFailedError(f\"Login failed due to element interaction error: {e}\")\n    \n        except TimeoutException as e:\n            logger.error(f\"Timeout error during login: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"login_timeout\",\n                          attachment_type=allure.attachment_type.PNG)\n            raise LoginFailedError(f\"Login failed due to timeout: {e}\")\n    \n        except WebDriverException as e:\n            logger.error(f\"WebDriver error during login: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"login_webdriver_error\",\n                          attachment_type=allure.attachment_type.PNG)\n>           raise LoginFailedError(f\"Login failed due to WebDriver error: {e}\")\nE           test_flow_product.LoginFailedError: Login failed due to WebDriver error: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE             (Session info: chrome=137.0.7151.122)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff76016cda5+78885]\nE           \tGetHandleVerifier [0x0x7ff76016ce00+78976]\nE           \t(No symbol) [0x0x7ff75ff29bca]\nE           \t(No symbol) [0x0x7ff75ff265e2]\nE           \t(No symbol) [0x0x7ff75ff17319]\nE           \t(No symbol) [0x0x7ff75ff190c1]\nE           \t(No symbol) [0x0x7ff75ff17636]\nE           \t(No symbol) [0x0x7ff75ff17096]\nE           \t(No symbol) [0x0x7ff75ff16d5a]\nE           \t(No symbol) [0x0x7ff75ff1492f]\nE           \t(No symbol) [0x0x7ff75ff151ac]\nE           \t(No symbol) [0x0x7ff75ff2db7a]\nE           \t(No symbol) [0x0x7ff75ffd201e]\nE           \t(No symbol) [0x0x7ff75ffa8b8a]\nE           \t(No symbol) [0x0x7ff75ffd122f]\nE           \t(No symbol) [0x0x7ff75ffa8963]\nE           \t(No symbol) [0x0x7ff75ff716b1]\nE           \t(No symbol) [0x0x7ff75ff72443]\nE           \tGetHandleVerifier [0x0x7ff760444eed+3061101]\nE           \tGetHandleVerifier [0x0x7ff76043f33d+3037629]\nE           \tGetHandleVerifier [0x0x7ff76045e592+3165202]\nE           \tGetHandleVerifier [0x0x7ff76018730e+186766]\nE           \tGetHandleVerifier [0x0x7ff76018eb3f+217535]\nE           \tGetHandleVerifier [0x0x7ff7601759b4+114740]\nE           \tGetHandleVerifier [0x0x7ff760175b69+115177]\nE           \tGetHandleVerifier [0x0x7ff76015c368+10728]\nE           \tBaseThreadInitThunk [0x0x7fffc23f7374+20]\nE           \tRtlUserThreadStart [0x0x7fffc31fcc91+33]\n\ntest_flow_product.py:214: LoginFailedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_flow_product.TestProductFlow object at 0x00000166938979D0>\n\n    @allure.feature(\"Product Management\")\n    @allure.story(\"Product Master Creation\")\n    @pytest.hookimpl(hookwrapper=True)\n    def test_product_master_creation(self):\n        \"\"\"Test complete product master creation flow.\"\"\"\n        try:\n            # First login\n            self.login(\n                TEST_CONFIG[\"username\"],\n                TEST_CONFIG[\"password\"],\n                TEST_CONFIG[\"url\"]\n            )\n    \n            # Then create product master\n            product_data = TEST_CONFIG[\"product_data\"]\n            self.create_product_master(\n                product_data[\"product_item\"],\n                product_data[\"HS_code\"],\n                product_data[\"unit\"],\n                product_data[\"item_type\"],\n                product_data[\"description\"],\n                product_data[\"category\"],\n                product_data[\"short_name\"],\n                product_data[\"purchase_price\"],\n                product_data[\"sales_price\"],\n                product_data[\"alt_unit\"],\n                product_data[\"conversion_factor\"],\n                product_data[\"barcode_map\"],\n                product_data[\"barcode_unit\"]\n            )\n    \n            logger.info(\"Product master creation test passed successfully\")\n    \n        except (LoginFailedError, ProductMasterCreationError) as e:\n>           pytest.fail(f\"Product master creation test failed: {e}\")\nE           Failed: Product master creation test failed: Login failed due to WebDriver error: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE             (Session info: chrome=137.0.7151.122)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff76016cda5+78885]\nE           \tGetHandleVerifier [0x0x7ff76016ce00+78976]\nE           \t(No symbol) [0x0x7ff75ff29bca]\nE           \t(No symbol) [0x0x7ff75ff265e2]\nE           \t(No symbol) [0x0x7ff75ff17319]\nE           \t(No symbol) [0x0x7ff75ff190c1]\nE           \t(No symbol) [0x0x7ff75ff17636]\nE           \t(No symbol) [0x0x7ff75ff17096]\nE           \t(No symbol) [0x0x7ff75ff16d5a]\nE           \t(No symbol) [0x0x7ff75ff1492f]\nE           \t(No symbol) [0x0x7ff75ff151ac]\nE           \t(No symbol) [0x0x7ff75ff2db7a]\nE           \t(No symbol) [0x0x7ff75ffd201e]\nE           \t(No symbol) [0x0x7ff75ffa8b8a]\nE           \t(No symbol) [0x0x7ff75ffd122f]\nE           \t(No symbol) [0x0x7ff75ffa8963]\nE           \t(No symbol) [0x0x7ff75ff716b1]\nE           \t(No symbol) [0x0x7ff75ff72443]\nE           \tGetHandleVerifier [0x0x7ff760444eed+3061101]\nE           \tGetHandleVerifier [0x0x7ff76043f33d+3037629]\nE           \tGetHandleVerifier [0x0x7ff76045e592+3165202]\nE           \tGetHandleVerifier [0x0x7ff76018730e+186766]\nE           \tGetHandleVerifier [0x0x7ff76018eb3f+217535]\nE           \tGetHandleVerifier [0x0x7ff7601759b4+114740]\nE           \tGetHandleVerifier [0x0x7ff760175b69+115177]\nE           \tGetHandleVerifier [0x0x7ff76015c368+10728]\nE           \tBaseThreadInitThunk [0x0x7fffc23f7374+20]\nE           \tRtlUserThreadStart [0x0x7fffc31fcc91+33]\n\ntest_flow_product.py:566: Failed"}, "description": "Test complete product master creation flow.", "steps": [{"name": "Perform login with username: 'gedehim917@decodewp.com'", "status": "broken", "statusDetails": {"message": "test_flow_product.LoginFailedError: Login failed due to WebDriver error: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome=137.0.7151.122)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff76016cda5+78885]\n\tGetHandleVerifier [0x0x7ff76016ce00+78976]\n\t(No symbol) [0x0x7ff75ff29bca]\n\t(No symbol) [0x0x7ff75ff265e2]\n\t(No symbol) [0x0x7ff75ff17319]\n\t(No symbol) [0x0x7ff75ff190c1]\n\t(No symbol) [0x0x7ff75ff17636]\n\t(No symbol) [0x0x7ff75ff17096]\n\t(No symbol) [0x0x7ff75ff16d5a]\n\t(No symbol) [0x0x7ff75ff1492f]\n\t(No symbol) [0x0x7ff75ff151ac]\n\t(No symbol) [0x0x7ff75ff2db7a]\n\t(No symbol) [0x0x7ff75ffd201e]\n\t(No symbol) [0x0x7ff75ffa8b8a]\n\t(No symbol) [0x0x7ff75ffd122f]\n\t(No symbol) [0x0x7ff75ffa8963]\n\t(No symbol) [0x0x7ff75ff716b1]\n\t(No symbol) [0x0x7ff75ff72443]\n\tGetHandleVerifier [0x0x7ff760444eed+3061101]\n\tGetHandleVerifier [0x0x7ff76043f33d+3037629]\n\tGetHandleVerifier [0x0x7ff76045e592+3165202]\n\tGetHandleVerifier [0x0x7ff76018730e+186766]\n\tGetHandleVerifier [0x0x7ff76018eb3f+217535]\n\tGetHandleVerifier [0x0x7ff7601759b4+114740]\n\tGetHandleVerifier [0x0x7ff760175b69+115177]\n\tGetHandleVerifier [0x0x7ff76015c368+10728]\n\tBaseThreadInitThunk [0x0x7fffc23f7374+20]\n\tRtlUserThreadStart [0x0x7fffc31fcc91+33]\n\n", "trace": "  File \"C:\\Users\\karun\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\karun\\PycharmProjects\\PythonProject\\extra testing\\Custom Exception\\test_flow_product.py\", line 214, in login\n    raise LoginFailedError(f\"Login failed due to WebDriver error: {e}\")\n"}, "attachments": [{"name": "login_webdriver_error", "source": "a368e771-22b1-45b1-861d-93d29f11aa02-attachment.png", "type": "image/png"}], "parameters": [{"name": "username", "value": "'gedehim917@decodewp.com'"}, {"name": "password", "value": "'Tebahal1!'"}, {"name": "link", "value": "'https://velvet.webredirect.himshang.com.np/#/pages/dashboard'"}], "start": 1751950263546, "stop": 1751950264194}], "attachments": [{"name": "log", "source": "e2c13d6e-b65e-46f4-938c-3bb2cb67a604-attachment.txt", "type": "text/plain"}], "start": 1751950263544, "stop": 1751950264195, "uuid": "6b18d109-b927-40e2-93a2-301e06b6750c", "historyId": "0865bbb13d0d7d5338c91b9c1558002a", "testCaseId": "0865bbb13d0d7d5338c91b9c1558002a", "fullName": "test_flow_product.TestProductFlow#test_product_master_creation", "labels": [{"name": "story", "value": "Product Master Creation"}, {"name": "feature", "value": "Product Management"}, {"name": "suite", "value": "test_flow_product"}, {"name": "subSuite", "value": "TestProductFlow"}, {"name": "host", "value": "DESKTOP-AOJNATO"}, {"name": "thread", "value": "11448-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow_product"}]}